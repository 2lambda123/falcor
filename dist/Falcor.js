/*!
 * Copyright 2014 Netflix, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var Rx = require('rx');
var Observable = Rx.Observable;

var falcor = {},
    __GENERATION_GUID = 0,
    __GENERATION_VERSION = 0,
    __CONTAINER = "__reference_container",
    __CONTEXT = "__context",
    __GENERATION = "__generation",
    __GENERATION_UPDATED = "__generation_updated",
    __INVALIDATED = "__invalidated",
    __KEY = "__key",
    __KEYS = "__keys",
    __IS_KEY_SET = "__is_key_set",
    __NULL = "__null",
    __SELF = "./",
    __PARENT = "../",
    __REF = "__ref",
    __REF_INDEX = "__ref_index",
    __REFS_LENGTH = "__refs_length",
    __ROOT = "/",
    __OFFSET = "__offset",
    __FALKOR_EMPTY_OBJECT = '__FALKOR_EMPTY_OBJECT',
    __INTERNAL_KEYS = [
        __CONTAINER, __CONTEXT, __GENERATION, __GENERATION_UPDATED,
        __INVALIDATED, __KEY, __KEYS, __IS_KEY_SET, __NULL, __SELF,
        __PARENT, __REF, __REF_INDEX, __REFS_LENGTH, __OFFSET, __ROOT
    ];

var $TYPE = "$type",
    $SIZE = "$size",
    $EXPIRES = "$expires",
    $TIMESTAMP = "$timestamp";
 
var SENTINEL = "sentinel",
    ERROR = "error",
    VALUE = "value",
    EXPIRED = "expired",
    LEAF = "leaf";

function now() {
    return Date.now();
}

function NOOP() {};

falcor.__Internals = {};
falcor.Observable = Rx.Observable;
falcor.EXPIRES_NOW = 0;
falcor.EXPIRES_NEVER = 1;

// [H] -> Next -> ... -> [T]
// [T] -> Prev -> ... -> [H]
function lruPromote(model, object) {
    var root = model._root;
    var head = root.__head;
    if (head === object) {
        return;
    }

    // First insert
    if (!head) {
        root.__head = object;
        return;
    }

    // The head and the tail need to separate
    if (!root.__tail) {
        root.__head = object;
        root.__tail = head;
        object.__next = head;
        
        // Now tail
        head.__prev = object;
        return;
    }

    // Its in the cache.  Splice out.
    var prev = object.__prev;
    var next = object.__next;
    if (next) {
        next.__prev = prev;
    }
    if (prev) {
        prev.__next = next;
    }
    object.__prev = undefined;

    // Insert into head position
    root.__head = object;
    object.__next = head;
    head.__prev = object;
}

function lruSplice(model, object) {
    var root = model._root;

    // Its in the cache.  Splice out.
    var prev = object.__prev;
    var next = object.__next;
    if (next) {
        next.__prev = prev;
    }
    if (prev) {
        prev.__next = next;
    }
    object.__prev = undefined;
    
    if (object === root.__head) {
        root.__head = undefined;
    }
    if (object === root.__tail) {
        root.__tail = undefined;
    }
    object[__INVALIDATED] = true;
    root.expired.push(object);
}


// Pops the tail.
function lruPop(model) {
    
}


function isIntenalKey(x) {
    return x.indexOf('__') === 0 || x.indexOf('$') === 0;
}

function copyInto(a1, a2) {
    a1.length = a2.length;
    for (var i = 0, len = a2.length; i < len; i++) {
        a1[i] = a2[i];
    }
}

function copyCacheObject(value, allowType, onto) {
    var type = value.$type;
    
    if (type === 'sentinel') {
        value = value.value;
    }
    
    var outValue;
    if (typeof value === 'object') {
        if (Array.isArray(value)) {
            outValue = [];
            copyInto(outValue, value);
        } else {
            var keys = Object.keys(value);
            outValue = onto || {};
            for (var i = 0, len = keys.length; i < len; i++) {
                var k = keys[i];
                if (!(k.indexOf('__') === 0 || k.indexOf('$') === 0 || k === '/' || k === './' || k === '../')) {
                    outValue[k] = value[k];
                }
            }
            if (allowType) { 
                if (type && type !== 'sentinel') {
                    outValue.$type = type;
                } else {
                    outValue.$type = 'leaf';
                }
            }
        }
    } else {
        outValue = value;
    }
    return outValue;
}


function cloneToPathValue(model, node, path) {
    var type = node.$type;
    var value = type === 'sentinel' ? node.value : node;
    var outValue;

    if (model._boxed) {
        outValue = value;
    } else {
        outValue = copyCacheObject(value);
    }

    return {path: fastCopy(path), value: outValue};
}

function updateTrailingNullCase(path, depth, requested) {
    if (Array.isArray(path)) {
        if (path[depth] === null && depth === path.length - 1) {
            requested.push(null);
        }
    } else if (path !== null) {
        var keys = Object.keys(path);
        if (keys[0] === '__null' && keys.length === 1) {
            requested.push(null);
        }
    }
}

function isExpired(node) {
    var $expires = node.$expires === undefined && -1 || node.$expires;
    return $expires !== -1 && $expires !== 1 && ($expires === 0 || $expires < now());
}

function fastCopy(arr, i) {
    var a = [], len, j;
    for (j = 0, i = i || 0, len = arr.length; i < len; j++, i++) {
        a[j] = arr[i];
    }
    return a;
}

function fastCatSkipNulls(arr1, arr2) {
    var a = [];
    for (var i = 0, len = arr1.length; i < len; i++) {
        a[i] = arr1[i];
    }
    for (var j = 0, len = arr2.length; j < len; j++) {
        if (arr2[j]) {
            a[i++] = arr2[j];
        }
    }
    return a;
}

function fastCat(arr1, arr2) {
    var a = [];
    for (var i = 0, len = arr1.length; i < len; i++) {
        a[i] = arr1[i];
    }
    for (var j = 0, len = arr2.length; j < len; j++) {
        a[i++] = arr2[j];
    }
    return a;
}

function fastCatMutate(arr1, arr2) {
    for (var j = 0, len = arr2.length, i = arr1.length; j < len; j++, i++) {
        a[i] = arr2[j];
    }
    return a;
}

function permuteKey(key, memo) {
    if (memo.done) {
        return;
    }

    if (memo.isArray) {
        if (memo.loaded && memo.rangeOffset > memo.to) {
            memo.arrOffset++;
            memo.loaded = false;
        }

        var idx = memo.arrOffset;
        if (idx === key.length) {
            memo.done = true;
            return '';
        }

        var el = key[memo.arrOffset];
        var type = typeof el;
        if (type === 'object') {
            if (!memo.loaded) {
                memo.from = el.from || 0;
                memo.to = el.to || el.length && memo.from + el.length - 1 || 0;
                memo.rangeOffset = memo.from;
                memo.loaded = true;
            }


            return memo.rangeOffset++;
        } else {
            memo.arrOffset++;
            return el;
        }
    } else {
        if (!memo.loaded) {
            memo.from = key.from || 0;
            memo.to = key.to || key.length && memo.from + key.length - 1 || 0;
            memo.rangeOffset = memo.from;
            memo.loaded = true;
        }
        if (memo.rangeOffset > memo.to) {
            memo.done = true;
            return '';
        }

        return memo.rangeOffset++;
    }
}
//    var done = false, from, to, rangeOffset, arrayOffset = 0, loaded = false, isArray = isComplex && Array.isArray(k);
//    var type, idx, el;
//    while (!done) {
//        // ComboLock
//        if (isArray) {
//            if (loaded && rangeOffset > to) {
//                arrayOffset++;
//                loaded = false;
//            }
//
//            idx = arrayOffset;
//            if (idx === k.length) {
//                break;
//            }
//
//            el = k[arrayOffset];
//            type = typeof el;
//            if (type === 'object') {
//                if (!loaded) {
//                    from = el.from || 0;
//                    to = el.to || el.length && from + el.length - 1 || 0;
//                    rangeOffset = from;
//                    loaded = true;
//                }
//
//
//                key = rangeOffset++;
//            } else {
//                arrayOffset++;
//                key = el;
//            }
//        } else if (isComplex) {
//            if (!loaded) {
//                from = k.from || 0;
//                to = k.to || k.length && from + k.length - 1 || 0;
//                rangeOffset = from;
//                loaded = true;
//            }
//
//            if (rangeOffset > to) {
//                break;
//            }
//
//            key = rangeOffset++;
//        } else {
//            key = k;
//            done = true;
//        }

function spreadJSON(root, bins, bin) {
    bin = bin || [];
    if (!bins.length) {
        bins.push(bin);
    }
    if (root == null || typeof root !== 'object') {
        return [];
    }
    var keys = Object.keys(root);
    if (keys.length === 1) {
        bin.push(keys[0]);
        spreadJSON(root[keys[0]], bins, bin);
    } else {
        for (var i = 0, len = keys.length; i < len; i++) {
            var k = keys[i];
            var nextBin = fastCopy(bin);
            nextBin.push(k);
            bins.push(nextBin);
            spreadJSON(root[k], bins, nextBin);
        }
    }
}

function createHardlink(from, to) {
    
    // create a back reference
    var backRefs  = to[__REFS_LENGTH] || 0;
    to[__REF + backRefs] = from;
    to[__REFS_LENGTH] = backRefs + 1;
    
    // create a hard reference
    from[__REF_INDEX] = backRefs;
    from[__CONTEXT] = to;
}

function removeHardlink(cacheObject) {
    var context = cacheObject[__CONTEXT];
    if (context) {
        var idx = cacheObject[__REF_INDEX];
        var len = context[__REFS_LENGTH];
        
        while (idx < len) {
            context[__REF + idx] = context[__REF + idx + 1];
            ++idx;
        }
        
        context[__REFS_LENGTH] = len - 1;
        cacheObject[__CONTEXT] = undefined;
        cacheObject[__REF_INDEX] = undefined;
    }
}

function followReference(model, root, node, referenceContainer, reference) {

    var depth = 0;
    var k, next;

    while (true) {
        if (depth === 0 && referenceContainer[__CONTEXT]) {
            depth = reference.length;
            next = referenceContainer[__CONTEXT];
        } else {
            k = reference[depth++];
            next = node[k];
        }
        
        if (next) {
            var type = next.$type;
            var value = type === 'sentinel' ? next.value : next;

            if (depth < reference.length) {
                if (type || Array.isArray(value)) {
                    node = next;
                    break;
                }

                node = next;
                continue;
            }

            else if (depth === reference.length) {

                node = next;

                if (type && isExpired(next)) {
                    break;
                }

                if (!referenceContainer[__CONTEXT]) {
                    createHardlink(referenceContainer, next);
                }

                // Restart the reference follower.
                if (Array.isArray(value)) {
                    depth = 0;
                    reference = value;
                    referenceContainer = next;
                    node = root;
                    continue;
                }

                break;
            }
        }
        break;
    }

    if (depth < reference.length) {
        var ref = [];
        for (var i = 0; i < depth; i++) {
            ref[i] = reference[i];
        }
        reference = ref;
    }

    return [node, reference];
}


function get(getFlavor) {
    return function innerGet(model, paths, valuesOrOnNext, errorSelector) {
        var results = _output();
        var inputFormat = Array.isArray(paths[0]) ? 'Paths' : 'JSON';
        
        getFlavor(model, paths, valuesOrOnNext, inputFormat, results);
        
        if (errorSelector && results.errors.length) {
            var e, errors = results.errors;
            for (var i = 0, len = errors.length; i < len; i++) {
                e = errors[i];
                e.value = errorSelector(e.path, e.value);
            }
        }
        
        return results;
    };
}
function getAsValues(model, paths, onNext, inputFormat, results) {
    for (var i = 0, len = paths.length; i < len; i++) {
        walk(model, model._cache, model._cache, paths[0], 0, onNext, null, results, [], [], inputFormat, 'Values');
    }
}

function getAsPathMap(model, paths, values, inputFormat, results) {
    var valueNode;
    if (values && values.length === 1) {
        valueNode = {json: values[0]};
        results.values = [valueNode];
        valueNode = valueNode.json;
    }

    for (var i = 0, len = paths.length; i < len; i++) {
        walk(model, model._cache, model._cache, paths[i], 0, valueNode, [], results, [], [], inputFormat, 'PathMap');
    }

    if (results.requestedPaths.length === 0) {
        results.values = [null];
    }
}

function getAsJSON(model, paths, values, inputFormat, results) {
    if (values) {
        results.values = values;
    } else {
        values = [];
    }

    for (var i = 0, len = paths.length; i < len; i++) {
        var valueNode;
        if (values[i]) {
            valueNode = values[i];
        }
        walk(model, model._cache, model._cache, paths[i], 0, valueNode, [], results, [], [], inputFormat, 'JSON');
    }

    if (results.requestedPaths.length === 0) {
        results.values = [null];
    }

    return results;
}

function _output() {
    return {
        values: [],
        errors: [],
        requestedPaths: [],
        optimizedPaths: [],
        requestedMissingPaths: [],
        optimizedMissingPaths: []
    };
}

// TODO: Objectify?
function walk(model, root, curr, pathOrJSON, depth, seedOrFunction, positionalInfo, outerResults, optimizedPath, requestedPath, inputFormat, outputFormat, fromReference) {
    // BaseCase: This position does not exist, emit missing.
    if (!curr) {
        emitMissing(pathOrJSON, depth, requestedPath, optimizedPath, positionalInfo, outerResults, outputFormat);
        return;
    }
    
    var currType = curr[$TYPE];
    var currValue = currType === SENTINEL ? curr.value : curr;
    var atLeaf = currType || Array.isArray(currValue);
    
    positionalInfo = positionalInfo || [];

    // The Base Cases.  There is a type, therefore we have hit a 'leaf' node.
    if (atLeaf) {

        if (currType === ERROR) {
            if (fromReference) {
                requestedPath.push(null);
            }
            emitError(model, curr, currValue, requestedPath, optimizedPath, outerResults);
        } 
        
        // Else we have found a value, emit the current position information.
        else {
            if (isExpired(curr)) {
                if (!curr[__INVALIDATED]) {
                    lruSplice(model, curr);
                    removeHardlink(curr);
                }
                emitMissing(pathOrJSON, depth, requestedPath, optimizedPath, positionalInfo, outerResults, outputFormat);
            } else {
                emitValues(model, curr, pathOrJSON, depth, seedOrFunction, outerResults, requestedPath, optimizedPath, positionalInfo, outputFormat);
            }
        }
    }

    // We continue the search to the end of the path/json structure.
    else {
        
        // Base case of the searching:  Have we hit the end of the road?
        // Paths
        // 1) depth === path.length
        // PathMaps (json input)
        // 2) if its an object with no keys
        // 3) its a non-object
        var jsonQuery = inputFormat === 'JSON';
        var atEndOfJSONQuery = false;
        var k, i, len;
        if (jsonQuery) {
            if (pathOrJSON && typeof pathOrJSON === 'object') {
                if (Array.isArray(pathOrJSON)) {
                    atEndOfJSONQuery = true;
                } else {
                    k = Object.keys(pathOrJSON);
                    if (k.length === 1) {
                        k = k[0];
                    }
                }
            } else {
                atEndOfJSONQuery = true;
            }
        } else {
            k = pathOrJSON[depth];
        }
        
        
        // BaseCase: we have hit the end of our query without finding a 'leaf' node, therefore emit missing.
        if (atEndOfJSONQuery || !jsonQuery && depth === pathOrJSON.length) {
            emitMissing(pathOrJSON, depth, requestedPath, optimizedPath, positionalInfo, outerResults, outputFormat);
            return;
        }
        
        var memo = {done: false};
        var first = true;
        var permutePosition = positionalInfo;
        var permuteRequested = requestedPath;
        var permuteOptimized = optimizedPath;
        var asPathMap = outputFormat === 'PathMap';
        var asJSONG = outputFormat === 'JSONG';
        var asJSON = outputFormat === 'JSON';
        var isKeySet = false;
        var hasChildren = false;
        fromReference = false;
        depth++;

        var key;
        if (k && typeof k === 'object') {
            memo.isArray = Array.isArray(k);
            memo.arrOffset = 0;

            key = permuteKey(k, memo);
            isKeySet = true;
        } else {
            key = k;
            memo.done = true;
        }

        if (asJSON && isKeySet) {
            permutePosition.push(depth - 1);
        }

        while (!memo.done || first) {
            first = false;
            if (!memo.done) {
                permuteOptimized = [];
                permuteRequested = [];
                for (i = 0, len = requestedPath.length; i < len; i++) {
                    permuteRequested[i] = requestedPath[i];
                }
                for (i = 0, len = optimizedPath.length; i < len; i++) {
                    permuteOptimized[i] = optimizedPath[i];
                }
                if (asPathMap) {
                    for (i = 0, len = permutePosition.length; i < len; i++) {
                        permutePosition[i] = permutePosition[i];
                    }
                }
            }
            
            var nextPathOrPathMap = jsonQuery ? pathOrJSON[key] : pathOrJSON;
            if (jsonQuery && nextPathOrPathMap) {
                // TODO: consider an array, types, and simple values.
                if (typeof nextPathOrPathMap === 'object' && !Array.isArray(nextPathOrPathMap)) {
                    hasChildren = Object.keys(nextPathOrPathMap).length > 0;
                }
            }

            var next = curr[key];

            if (key !== null) {
                permuteOptimized.push(key);
                permuteRequested.push(key);
            }
            
            if (next) {
                var nType = next[$TYPE];
                var nSentinel = nType === SENTINEL;
                var value = nSentinel ? next.value : next;
                var valueIsArray = Array.isArray(value);
                if (asPathMap) {
                    permutePosition.push(next[__GENERATION]);
                }

                if (jsonQuery && hasChildren || !jsonQuery && depth < pathOrJSON.length) {

                    if (valueIsArray && (!nSentinel || nSentinel && !isExpired(next))) {
                        var ref = followReference(model, root, root, next, value);
                        fromReference = true;
                        next = ref[0];
                        var refPath = ref[1];

                        permuteOptimized = [];
                        for (i = 0, len = refPath.length; i < len; i++) {
                            permuteOptimized[i] = refPath[i];
                        }
                    }
                }
            }
            walk(model, root, next, nextPathOrPathMap, depth, seedOrFunction, permutePosition, outerResults, permuteOptimized, permuteRequested, inputFormat, outputFormat, fromReference);

            if (!memo.done) {
                key = permuteKey(k, memo);
            }
        }
    }

}

function simpleWalk(model, root, node, path, depth, results) {
    var key = path[depth++];
    
    // TODO: if sentinel, then there is no child, there is a short-circuit
    var nodeIsSentinel = node.$type === 'sentinel';
    var next = nodeIsSentinel ? node.value[key] : node[key];
    
    if (next) {
        var nType = next.$type;
        var value = nType === 'sentinel' ? next.value : next;
        var valueIsArray = Array.isArray(value);
        if (isExpired(next)) {
            // TODO: anything else?
            return undefined;
        }
        else if (depth < path.length) {
            if (valueIsArray) {
                var ref = followReference(model, root, root, value);
                var refNode = ref[0];

                if (refNode) {
                    var rType = refNode.$type;
                    var rValue = rType === 'sentinel' ? refNode.value : refNode;
                    
                    // TODO: Treat errors as values
                    if (rType === 'error') {
                        throw rValue;
                    }
                    
                    simpleWalk(model, root, refNode, path, depth, results);
                } else {
                    results.value = undefined;
                }
            }

            else if (nType === 'error') {
                throw value;
            }

            else {
                simpleWalk(model, root, next, path, depth, results);
            }
        } else if (nType === 'leaf') {
            results.value = copyCacheObject(value);
        } else if (nType === 'error') {
            throw value;
        } else {
            // TODO: Dont allow branch access
            results.value = undefined;
        }
    } else {
        results.value = undefined;
    }
}

function emitError(model, node, nodeValue, permuteRequested, permuteOptimized, outerResults) {
    
    outerResults.errors.push({path: fastCopy(permuteRequested), value: copyCacheObject(nodeValue)});
    lruPromote(model, node);
    outerResults.requestedPaths.push(permuteRequested);
    outerResults.optimizedPaths.push(permuteOptimized);
}

function emitMissing(path, depth, permuteRequested, permuteOptimized, permutePosition, results, type) {
    var pathSlice;
    if (Array.isArray(path)) {
        if (depth < path.length) {
            pathSlice = fastCopy(path, depth);
        } else {
            pathSlice = [];
        }

        concatAndInsertMissing(pathSlice, results, permuteRequested, permuteOptimized, permutePosition, type);
    } else {
        pathSlice = [];
        spreadJSON(path, pathSlice);

        if (pathSlice.length) {
            for (var i = 0, len = pathSlice.length; i < len; i++) {
                concatAndInsertMissing(pathSlice[i], results, permuteRequested, permuteOptimized, permutePosition, type, true);
            }
        } else {
            concatAndInsertMissing(pathSlice, results, permuteRequested, permuteOptimized, permutePosition, type);
        }
    }
    
}
function concatAndInsertMissing(remainingPath, results, permuteRequested, permuteOptimized, permutePosition, type, __null) {
    var i = 0, len;
    if (__null) {
        for (i = 0, len = remainingPath.length; i < len; i++) {
            if (remainingPath[i] === '__null') {
                remainingPath[i] = null;
            }
        }
    }
    if (type === 'JSON') {
        permuteRequested = fastCat(permuteRequested, remainingPath);
        for (i = 0, len = permutePosition.length; i < len; i++) {
            var idx = permutePosition[i];
            var r = permuteRequested[idx]
            // TODO: i think the typeof operator is no needed if there is better management of permutePosition addition
            if (typeof r !== 'object') {
                permuteRequested[idx] = [r];
            }
        }
        results.requestedMissingPaths.push(permuteRequested);
        results.optimizedMissingPaths.push(fastCatSkipNulls(permuteOptimized, remainingPath));
    } else {
        results.requestedMissingPaths.push(fastCat(permuteRequested, remainingPath));
        results.optimizedMissingPaths.push(fastCatSkipNulls(permuteOptimized, remainingPath));
    }
}
function emitValues(model, node, path, depth, seedOrFunction, outerResults, permuteRequested, permuteOptimized, permutePosition, outputFormat) {
    
    var i, len, k, key, curr;
    if (permuteRequested[permuteRequested.length - 1] !== null) {
        updateTrailingNullCase(path, depth, permuteRequested);
    }
    lruPromote(model, node);

    outerResults.requestedPaths.push(permuteRequested);
    outerResults.optimizedPaths.push(permuteOptimized);
    switch (outputFormat) {

        case 'Values':
            if (seedOrFunction) {
                if (typeof seedOrFunction === 'function') {
                    seedOrFunction(cloneToPathValue(model, node, permuteRequested));
                } else {
                }
            }
            break;
        
        case 'PathMap':
            if (seedOrFunction) {
                curr = seedOrFunction;
                for (i = 0, len = permuteRequested.length - 1; i < len; i++) {
                    k = permuteRequested[i];
                    if (k === null) {
                        continue;
                    }
                    if (!curr[k]) {
                        curr[k] = {__key: k, __generation: permutePosition[i]};
                    }
                    curr = curr[k];
                }
                k = permuteRequested[i];
                if (k !== null) {
                    curr[k] = copyCacheObject(node, true);
                } else {
                    curr = copyCacheObject(node, true, curr);
                    delete curr.__key;
                    delete curr.__generation;
                }
            }
            break;
        
        case 'JSON': 
            if (seedOrFunction) {

                if (permutePosition.length) {
                    if (!seedOrFunction.json) {
                        seedOrFunction.json = {};
                    }
                    curr = seedOrFunction.json;
                    for (i = 0, len = permutePosition.length - 1; i < len; i++) {
                        k = permutePosition[i];
                        key = permuteRequested[k];
                        
                        if (!curr[key]) {
                            curr[key] = {};
                        }
                        curr = curr[key];
                    }
                    
                    // assign the last 
                    k = permutePosition[i];
                    key = permuteRequested[k];
                    curr[key] = copyCacheObject(node);
                } else {
                    seedOrFunction.json = copyCacheObject(node);
                }
            }
            break;
    }
}


var getPathsAsValues = get(getAsValues);
var getPathMapsAsValues = get(getAsValues);
var getPathsAsJSON = get(getAsJSON);
var getPathMapsAsJSON = get(getAsJSON);
var getPathsAsPathMap = get(getAsPathMap);
var getPathMapsAsPathMap = get(getAsPathMap);

var ModelResponse = (function(falcor) {
    
    var Observable  = falcor.Observable,
        valuesMixin = { format: { value: "AsValues"  } },
        jsonMixin   = { format: { value: "AsPathMap" } },
        jsongMixin  = { format: { value: "AsJSONG"   } };
    
    function ModelResponse(forEach) {
        this._subscribe = forEach;
    }
    
    ModelResponse.create = function(forEach) {
        return new ModelResponse(forEach);
    };
    
    function noop() {};
    function mixin(self) {
        var mixins = Array.prototype.slice.call(arguments, 1);
        return new ModelResponse(function(other) {
            return self.subscribe(mixins.reduce(function(proto, mixin) {
                return Object.create(proto, mixin);
            }, other));
        });
    };
    
    ModelResponse.prototype = Observable.create(noop);
    ModelResponse.prototype.format = "AsPathMap";
    ModelResponse.prototype.toPathValues = function() {
        return mixin(this, valuesMixin);
    };
    ModelResponse.prototype.toJSON = function() {
        return mixin(this, jsonMixin);
    };
    ModelResponse.prototype.toJSONG = function() {
        return mixin(this, jsongMixin);
    };
    return ModelResponse;
}(falcor));
falcor.ImmediateScheduler = ImmediateScheduler;

function ImmediateScheduler() {
}

ImmediateScheduler.prototype = {
    schedule: function(action) {
        action();
    }
};

falcor.TimeoutScheduler = TimeoutScheduler;

function TimeoutScheduler(delay) {
    this.delay = delay;
}

TimeoutScheduler.prototype = {
    schedule: function(action) {
        setTimeout(action, this.delay);
    }
};


// Ties the requestQueue to a jsongModel.
// For dataSource purposes.
var RequestQueue = falcor.RequestQueue = function(jsongModel, scheduler) {
    this._scheduler = scheduler;
    this._jsongModel = jsongModel;

    this._scheduled = false;
    this._requests = [];
};

RequestQueue.prototype = {
    _get: function() {
        var i = -1;
        var requests = this._requests;
        while (++i < requests.length) {
            if (!requests[i].pending && requests[i].isGet) {
                return requests[i];
            }
        }
        return requests[requests.length] = new GetRequest(this._jsongModel, this);
    },
    _set: function() {
        var i = -1;
        var requests = this._requests;
        
        // TODO: Set always sends off a request immediately, so there is no batching.
        while (++i < requests.length) {
            if (!requests[i].pending && requests[i].isSet) {
                return requests[i];
            }
        }
        return requests[requests.length] = new SetRequest(this._jsongModel, this);
    },

    remove: function(request) {
        for (var i = this._requests.length - 1; i > -1; i--) {
            if (this._requests[i].id === request.id && this._requests.splice(i, 1)) {
                break;
            }
        }
    },
    
    set: function(jsongEnv, observer) {
        var self = this;
        var disposable = self._set().batch(jsongEnv, observer).flush();

        return {
            dispose: function() {
                disposable.dispose();
            }
        };
    },

    get: function(requestedPaths, optimizedPaths, observer) {
        var self = this;
        var disposable = null;

        // TODO: get does not batch across requests.
        self._get().batch(requestedPaths, optimizedPaths, observer);

        if (!self._scheduled) {
            self._scheduled = true;
            disposable = self._scheduler.schedule(self._flush.bind(self));
        }

        return {
            dispose: function() {
                disposable.dispose();
            }
        };
    },

    _flush: function() {
        this._scheduled = false;

        var requests = this._requests, i = -1;
        var disposables = [];
        while (++i < requests.length) {
            if (!requests[i].pending) {
                disposables[disposables.length] = requests[i].flush();
            }
        }

        return {
            dispose: function() {
                disposables.forEach(function(d) { d.dispose(); });
            }
        }
    }
};

var REQUEST_ID = 0;

var SetRequest = function(model, queue) {
    var self = this;
    self._jsongModel = model;
    self._queue = queue;
    self.observers = [];
    self.jsongEnvs = [];
    self.pending = false;
    self.id = ++REQUEST_ID;
    self.isSet = true;
};

SetRequest.prototype = {
    batch: function(jsongEnv, observer) {
        var self = this;
        observer.onNext = observer.onNext || NOOP;
        observer.onError = observer.onError || NOOP;
        observer.onCompleted = observer.onCompleted || NOOP;

        if (!observer.__observerId) {
            observer.__observerId = ++REQUEST_ID;
        }
        observer._requestId = self.id;

        self.observers[self.observers.length] = observer;
        self.jsongEnvs[self.jsongEnvs.length] = jsongEnv;

        return self;
    },
    flush: function() {
        var incomingValues, query, op, len;
        var self = this;
        var jsongs = self.jsongEnvs;
        var observers = self.observers;
        var model = self._jsongModel;
        self.pending = true;

        // TODO: Set does not batch.
        return model._dataSource.
            set(jsongs[0]).
            subscribe(function(response) {
                incomingValues = response;
            }, function(err) {
                var i = -1;
                var n = observers.length;
                while (++i < n) {
                    obs = observers[i];
                    obs.onError && obs.onError(err);
                }
            }, function() {
                var i, n, obs;
                self._queue.remove(self);
                i = -1;
                n = observers.length;
                while (++i < n) {
                    obs = observers[i];
                    obs.onNext && obs.onNext({
                        jsong: incomingValues.jsong || incomingValues.value,
                        paths: incomingValues.paths
                    });
                    obs.onCompleted && obs.onCompleted();
                }
            });
    }
};



var GetRequest = function(jsongModel, queue) {
    var self = this;
    self._jsongModel = jsongModel;
    self._queue = queue;
    self.observers = [];
    self.optimizedPaths = [];
    self.requestedPaths = [];
    self.pending = false;
    self.id = ++REQUEST_ID;
    self.isGet = true;
};

GetRequest.prototype = {

    batch: function(requestedPaths, optimizedPaths, observer) {
        // TODO: Do we need to gap fill?
        var self = this;
        observer.onNext = observer.onNext || NOOP;
        observer.onError = observer.onError || NOOP;
        observer.onCompleted = observer.onCompleted || NOOP;

        if (!observer.__observerId) {
            observer.__observerId = ++REQUEST_ID;
        }
        observer._requestId = self.id;

        self.observers[self.observers.length] = observer;
        self.optimizedPaths[self.optimizedPaths.length] = optimizedPaths;
        self.requestedPaths[self.requestedPaths.length] = requestedPaths;

        return self;
    },

    flush: function() {
        var incomingValues, query, op, len;
        var self = this;
        var requested = self.requestedPaths;
        var optimized = self.optimizedPaths;
        var observers = self.observers;
        var disposables = [];
        var results = [];
        var model = self._jsongModel;
        self._scheduled = false;
        self.pending = true;

        var optimizedMaps = {};
        var requestedMaps = {};
        var r, o, i, j, obs, resultIndex;
        for (i = 0, len = requested.length; i < len; i++) {
            r = requested[i];
            o = optimized[i];
            obs = observers[i];
            for (j = 0; j < r.length; j++) {
                pathsToMapWithObservers(r[j], 0, readyNode(requestedMaps, null, obs), obs);
                pathsToMapWithObservers(o[j], 0, readyNode(optimizedMaps, null, obs), obs);
            }
        }
        return model._dataSource.
            get(collapse(optimizedMaps)).
            subscribe(function(response) {
                incomingValues = response;
            }, function(err) {
                var i = -1;
                var n = observers.length;
                while (++i < n) {
                    obs = observers[i];
                    obs.onError && obs.onError(err);
                }
            }, function() {
                var i, n, obs;
                self._queue.remove(self);
                i = -1;
                n = observers.length;
                while (++i < n) {
                    obs = observers[i];
                    obs.onNext && obs.onNext({
                        jsong: incomingValues.jsong || incomingValues.value,
                        paths: incomingValues.paths
                    });
                    obs.onCompleted && obs.onCompleted();
                }
            });
    },
    // Returns the paths that are contained within this request.
    contains: function(requestedPaths, optimizedPaths) {
        // TODO: 
    }
};

function pathsToMapWithObservers(path, idx, branch, observer) {
    var curr = path[idx];

    // Object / Array
    if (typeof curr === 'object') {
        if (Array.isArray(curr)) {
            curr.forEach(function(v) {
                readyNode(branch, v, observer);
                if (path.length > idx + 1) {
                    pathsToMapWithObservers(path, idx + 1, branch[v], observer);
                }
            });
        } else {
            var from = curr.from || 0;
            var to = curr.to >= 0 ? curr.to : curr.length;
            for (var i = from; i <= to; i++) {
                readyNode(branch, i, observer);
                if (path.length > idx + 1) {
                    pathsToMapWithObservers(path, idx + 1, branch[i], observer);
                }
            }
        }
    } else {
        readyNode(branch, curr, observer);
        if (path.length > idx + 1) {
            pathsToMapWithObservers(path, idx + 1, branch[curr], observer);
        }
    }
}

/**
 * Builds the set of collapsed
 * queries by traversing the tree
 * once
 */
var charPattern = /\D/i;

function readyNode(branch, key, observer) {
    if (key === null) {
        branch.__observers = branch.__observers || [];
        !containsObserver(branch.__observers, observer) && branch.__observers.push(observer);
        return branch;
    }

    if (!branch[key]) {
        branch[key] = {__observers: []};
    }

    !containsObserver(branch[key].__observers, observer) && branch[key].__observers.push(observer);
    return branch;
}

function containsObserver(observers, observer) {
    if (!observer) {
        return;
    }
    return observers.reduce(function(acc, x) {
        return acc || x.__observerId === observer.__observerId;
    }, false);
}

function collapse(pathMap) {
    return rangeCollapse(buildQueries(pathMap));
}

/**
 * Collapse ranges, e.g. when there is a continuous range
 * in an array, turn it into an object instead
 *
 * [1,2,3,4,5,6] => {"from":1, "to":6}
 *
 */
function rangeCollapse(paths) {
    paths.forEach(function (path) {
        path.forEach(function (elt, index) {
            var range;
            if (Array.isArray(elt) && elt.every(isNumber) && allUnique(elt)) {
                elt.sort(function(a, b) {
                    return a - b;
                });
                if (elt[elt.length-1] - elt[0] === elt.length-1) {
                    // create range
                    range = {};
                    range.from = elt[0];
                    range.to = elt[elt.length-1];
                    path[index] = range;
                }
            }
        });
    });
    return paths;
}

/* jshint forin: false */
function buildQueries(root) {

    if (root == null || typeof root !== 'object') {
        return [ [] ];
    }

    var children = Object.keys(root).filter(notPathMapInternalKeys),
        child, memo, paths, key, childIsNum,
        list, head, tail, clone, results,
        i = -1, n = children.length,
        j, k, x;

    if (n === 0 || Array.isArray(root) === true) {
        return [ [] ];
    }

    memo = {};
    while(++i < n) {
        child = children[i];
        paths = buildQueries(root[child]);
        key = createKey(paths);

        childIsNum = typeof child === 'string' && !charPattern.test(child);

        if ((list = memo[key]) && (head = list.head)) {
            head[head.length] = childIsNum ? parseInt(child, 10) : child;
        } else {
            memo[key] = {
                head: [childIsNum ? parseInt(child, 10) : child],
                tail: paths
            };
        }
    }

    results = [];
    for(x in memo) {
        head = (list = memo[x]).head;
        tail = list.tail;
        i = -1;
        n = tail.length;
        while(++i < n) {
            list = tail[i];
            j = -1;
            k = list.length;
            if(head[0] === '') {
                clone = [];
            } else {
                clone = [head.length === 1 ? head[0] : head];
                while(++j < k) {
                    clone[j + 1] = list[j];
                }
            }
            results[results.length] = clone;
        }
    }
    return results;
}

function notPathMapInternalKeys(key) {
    return (
        key !== "__observers" &&
        key !== "__pending" &&
        key !== "__batchID"
        );
}

/**
 * Return true if argument is a number
 */
function isNumber(val) {
    return typeof val === "number";
}

/**
 * allUnique
 * return true if every number in an array is unique
 */
function allUnique(arr) {
    var hash = {},
        index,
        len;

    for (index = 0, len = arr.length; index < len; index++) {
        if (hash[arr[index]]) {
            return false;
        }
        hash[arr[index]] = true;
    }
    return true;
}

/**
 * Sort a list-of-lists
 * Used for generating a unique hash
 * key for each subtree; used by the
 * memoization
 */
function sortLol(lol) {
    return lol.reduce(function (result, curr) {
        if (curr instanceof Array) {
            result.push(sortLol(curr).slice(0).sort());
            return result;
        }
        return result.concat(curr);
    }, []).slice(0).sort();
}

/**
 * Create a unique hash key for a set
 * of paths
 */
function createKey(list) {
    return JSON.stringify(sortLol(list));
}
// Note: For testing
falcor.__Internals.buildQueries = buildQueries;

function modelOperation(name) {
    return function() {

        var model = this, root = model._root,
            args = Array.prototype.slice.call(arguments),
            selector = args[args.length - 1];

        selector = typeof selector === "function" ? args.pop() : undefined;

        return ModelResponse.create(function(options) {

            var onNext = options.onNext.bind(options),
                onError = options.onError.bind(options),
                onCompleted = options.onCompleted.bind(options),
                isProgressive = options.isProgressive,
                valuesCount = selector && selector.length || 0;
            var operationalName = name;
            var disposed = false;
            var hasSelector = !!selector;
            var format = hasSelector && 'AsJSON' || options.format || 'AsPathMap';
            var isJSONG = format === 'AsJSONG';
            var seedRequired = isSeedRequired(format);
            var isValues = format === 'AsValues';
            var pathSetValues = [];
            var errors = [];
            var indices = [];
            var undefineds = [];
            var jsongPaths = [];
            var errorSelector = options.errorSelector || model._errorSelector;
            var atLeastOneValue = false;
            var shouldRequest = true;
            var shouldRoute = true;
            var isSlave = !!(model._dataSource || model._router);
            var routeMisses = {};
            var isFirstSet = name === 'set' && isSlave;
            var firstSetJSONGPaths;
            var firstSetModel = model;
            var firstSetRequested = [];

            if (hasSelector) {
                for (var i = 0; i < args.length; i++) {
                    if (i < valuesCount) {
                        pathSetValues[pathSetValues.length] = Object.create(null);
                    }
                    undefineds[undefineds.length] = false;
                    indices[indices.length] = i;
                }
            } else if (seedRequired) {
                pathSetValues[0] = Object.create(null);
                undefineds[0] = true;
            }

            function recurse(requested, relativePathSetValues) {
                if (disposed) { return; }
                var setSeed = false;

                // Note: We have to swap seeds for the first set since we must enforce jsong.
                // TODO: This does not consider setProgressively.
                if (isFirstSet) {
                    setSeed = [{}];
                    
                    // If there is a bound path then we have to do some real magik
                    if (model._path && model._path.length) {
                        firstSetModel = model.clone(['_path', []]);
                    }
                }

                var operations = getOperationArgGroups(requested, operationalName, format, setSeed || relativePathSetValues, hasSelector, !isFirstSet && isValues && onNext, errorSelector, isFirstSet, model._path);
                var results = processOperations(isFirstSet && firstSetModel || model, operations);
                isFirstSet && (firstSetJSONGPaths = []);

                errors = errors.concat(results.errors);
                atLeastOneValue = atLeastOneValue || results.valuesReceived;

                // from each of the operations, the results must be remerged back into the values array
                operations.forEach(function(op) {
                    if (!isFirstSet && hasSelector) {
                        var absoluteIndex;
                        var hasIndex;
                        op.values.forEach(function(valueObject, i) {
                            absoluteIndex = indices[i + op.valuesOffset];
                            hasIndex = typeof absoluteIndex === 'number';
                            if (hasIndex) {
                                if (valueObject) {
                                    if (valueObject.json !== undefined) {
                                        pathSetValues[absoluteIndex] = valueObject;
                                    } else {
                                        pathSetValues[absoluteIndex] = {json: valueObject};
                                    }
                                    undefineds[absoluteIndex] = false;
                                } else {
                                    undefineds[absoluteIndex] = undefineds[absoluteIndex] && true;
                                }
                            }
                        });
                    } else if (seedRequired && !isFirstSet) {
                        if (op.values[0]) {
                            pathSetValues = op.values;
                            undefineds[0] = false;
                            if (isJSONG && !isFirstSet) {
                                jsongPaths = jsongPaths.concat(op.values[0].paths);
                            }
                        } else {
                            undefineds[0] = true;
                        }
                    } else if (isFirstSet) {
                        firstSetJSONGPaths = firstSetJSONGPaths.concat(op.values[0].paths);
                    }
                });
                var nextRequest = results.requestedMissingPaths;
                var missingLength = nextRequest.length;

                // There is never missing paths on a set since we set through values
                if (isFirstSet) {
                    missingLength = 1;
                    nextRequest = {jsong: setSeed[0], paths: firstSetJSONGPaths};
                }

                // no need to inform the user of the current state if in value mode
                if (isProgressive && missingLength && !isValues) {
                    emitValues();
                }

                // We access the router first before going off to the source.
                if (missingLength && model._router && shouldRoute) {
                    routerRecurse(nextRequest, results, relativePathSetValues);
                }

                // We contine looking into the modelSource if the router does not exist / shouldRoute
                // is no longer true.
                else if (missingLength && shouldRequest && model._dataSource) {
                    modelSourceRequest(nextRequest, results, relativePathSetValues);
                }

                // Once we have exhausted all external resources or found all data we
                // emit values and complete.
                else {
                    emitValues();
                    executeOnErrorOrCompleted();
                }
            }

            function routerRecurse(nextRequest, results, relativePathSetValues) {
                var incomingValues;
                var optPaths = results.optimizedMissingPaths;
                for (var i = 0; i < nextRequest.length; i++) {
                    nextRequest[i]._routerIndex = i;
                    optPaths[i]._routerIndex = i;
                }
                var opts = optPaths.filter(function(p) { return !PathLibrary.simplePathInMap(p, routeMisses); });
                if (opts.length && opts.length !== optPaths.length) {
                    var optMap = opts.reduce(function(acc, o) {
                        acc[o._routerIndex] = true;
                        return acc;
                    }, {});
                    nextRequest = nextRequest.filter(function(r) { return optMap[r._routerIndex]; });
                }

                if (opts.length) {
                    model._router[name](opts).
                        subscribe(function(jsongEnv) {
                            incomingValues = jsongEnv;
                            incomingValues.paths = nextRequest;
                        }, function(err) {
                            // TODO: Should this ever happen?
                        }, function() {
                            opts.forEach(function(p) { PathLibrary.pathToMap(p, routeMisses); });
                            completeRecursion(nextRequest, incomingValues, relativePathSetValues);
                        });
                } else {

                    // TODO: support both router and modelSource (note selector functions).
                    shouldRoute = false;
                    shouldRequest = false;
                    completeRecursion([], {jsong: {}, paths: [[]]}, relativePathSetValues);
                }
            }

            function modelSourceRequest(nextRequest, results, relativePathSetValues) {
                var incomingValues;
                var requestedPaths = isFirstSet ? nextRequest.paths : nextRequest;
                var observer = {
                    onNext: function(jsongEnvelop) {
                        incomingValues = jsongEnvelop;
                    },
                    onError: function(err) {
                        // When an error is thrown, all currently requested paths are
                        // inserted as errors and the output format is not needed.
                        // TODO: There must be a way to make this more efficient.
                        var out = model._setPathsAsValues.apply(null, [model].concat(
                            requestedPaths.
                                reduce(function(acc, r) {
                                    acc[0].push({
                                        path: r,
                                        value: err
                                    });
                                    return acc;
                                }, [[]]),
                            undefined,
                            model._errorSelector
                        ));
                        errors = errors.concat(out.errors);

                        // there could still be values within the cache
                        emitValues();
                        executeOnErrorOrCompleted();
                    },
                    onCompleted: function() {
                        shouldRequest = false;
                        completeRecursion(requestedPaths, incomingValues, relativePathSetValues);
                    }
                };

                if (name === 'set') {
                    model._request.set(nextRequest, observer);
                } else {
                    model._request.get(nextRequest, results.optimizedMissingPaths, observer);
                }
            }

            function completeRecursion(requestedPaths, incomingValues, relativePathSetValues) {
                var out = getOperationsPartitionedByPathIndex(
                    requestedPaths,
                    incomingValues,
                    indices,
                    !isFirstSet && hasSelector,
                    isFirstSet || seedRequired,
                    valuesCount,
                    isFirstSet,
                    args,
                    model._path
                );

                var newOperations = out.ops;
                indices = out.indices;

                operationalName = 'set';
                isFirstSet = false;

                // Note: We do not request missing paths again.
                if (hasSelector) {
                    var arr = [];
                    for (var i = 0; i < indices.length; i++) {
                        arr[arr.length] = relativePathSetValues[indices[i]];
                    }
                    recurse(newOperations, arr);
                } else if (seedRequired) {
                    recurse(newOperations, pathSetValues);
                } else {
                    recurse(newOperations, []);
                }
            }

            try {
                recurse(args, pathSetValues);
            } catch(e) {
                errors = [e];
                executeOnErrorOrCompleted();
            }

            function emitValues() {
                if (disposed) {
                    return;
                }

                root.allowSync = true;
                if (atLeastOneValue) {
                    if (hasSelector) {
                        if (valuesCount > 0) {
                            // they should be wrapped in json items
                            onNext(selector.apply(model, pathSetValues.map(function(x, i) {
                                if (undefineds[i]) {
                                    return undefined;
                                }

                                return x && x.json;
                            })));
                        } else {
                            onNext(selector.call(model));
                        }
                    } else if (!isValues && !model._progressive) {
                        // this means there is an onNext function that is not AsValues or progressive,
                        // therefore there must only be one onNext call, which should only be the 0
                        // index of the values of the array
                        if (isJSONG) {
                            pathSetValues[0].paths = jsongPaths;
                        }
                        onNext(pathSetValues[0]);
                    }
                }
                root.allowSync = false;
            }

            function executeOnErrorOrCompleted() {
                if (disposed) {
                    return;
                }

                root.allowSync = true;
                if (errors.length) {
                    onError(errors);
                } else {
                    onCompleted();
                }
                root.allowSync = false;
            }

            return {
                dispose: function() {
                    disposed = true;
                }
            };
        });
    }
}

function fastCollapse(paths) {
    return paths.reduce(function(acc, p) {
        var curr = acc[0];
        if (!curr) {
            acc[0] = p;
        } else {
            p.forEach(function(v, i) {
                // i think
                if (typeof v === 'object') {
                    v.forEach(function(value) {
                        curr[i][curr[i].length] = value;
                    });
                }
            });
        }
        return acc;
    }, []);
}

falcor.__Internals.fastCollapse = fastCollapse;

// TODO: There is a performance win.  If i request from the core the requested paths,
// then i should not have to collapse the JSON paths.
function convertArgumentsToFromJSONG(args, remoteMessage, boundPath) {
    var newArgs = [];
    for (var i = 0, len = args.length; i < len; i++) {
        var argI = args[i];
        var paths;
        if (isJSONG(argI)) {
            paths = argI.paths;
        } else if (isPathOrPathValue(argI)) {
            paths = [argI.path || argI];
        } else {
            paths = collapse(argI);
        }
        newArgs[newArgs.length] = {
            jsong: remoteMessage.jsong,
            paths: paths,
            boundPath: boundPath && boundPath.length && boundPath || undefined
        };
    }
    

    return newArgs;
}

function getOperationsPartitionedByPathIndex(requestedPaths, incomingValues, previousIndices, hasSelector, seedRequired, valuesCount, isFirstSet, originalArgs, boundPath) {
    var newOperations = [];
    var indices = [];

    if (isFirstSet) {
        indices = previousIndices;
        newOperations = convertArgumentsToFromJSONG(originalArgs, incomingValues, boundPath);
    } else {
        requestedPaths.forEach(function (r) {
            var op = newOperations[newOperations.length - 1];
            if (!op) {
                op = newOperations[newOperations.length] = {jsong: incomingValues.jsong, paths: []};
            }
            if (hasSelector) {
                if (typeof r.pathSetIndex !== 'undefined') {
                    var pathSetIndex = r.pathSetIndex;
                    var absoluteIndex = previousIndices[pathSetIndex];
                    var hasIndex = typeof absoluteIndex === 'number' && absoluteIndex < valuesCount;
                    if (op && op.pathSetIndex !== pathSetIndex && typeof op.pathSetIndex !== 'undefined') {
                        if (op && op.paths.length > 1) {
                            op.paths = fastCollapse(op.paths);
                        }
                        op = newOperations[newOperations.length] = {jsong: incomingValues.jsong, paths: []};
                        op.pathSetIndex = pathSetIndex;
                        hasIndex && (indices[indices.length] = absoluteIndex);
                    } else if (typeof op.pathSetIndex === 'undefined') {
                        hasIndex && (op.pathSetIndex = pathSetIndex);
                        hasIndex && (indices[indices.length] = absoluteIndex);
                    }
                }
            } else if (seedRequired) {
                // single seed white board
            } else {
                // isValues
            }
            op.paths[op.paths.length] = r;
            op.boundPath = op.boundPath || boundPath && boundPath.length && boundPath || undefined;
        });

        // Note: We have fast collapsed all operations at their closing for the next operation.
        // so the last one needs to be collapsed
        if (hasSelector) {
            var op = newOperations[newOperations.length - 1];
            if (op && op.paths.length > 1) {
                op.paths = fastCollapse(op.paths);
            }
        }
    }

    return {ops: newOperations, indices: indices};
}

function getOperationArgGroups(ops, name, format, values, hasSelector, onNext, errorSelector, isFirstSet, boundPath) {
    var opFormat = (isFirstSet && 'AsJSONG' || format);
    var seedRequired = isSeedRequired(opFormat);
    var isValues = !seedRequired;
    var valuesIndex = 0, valueEnvelope;
    return ops.
        map(cloneIfPathOrPathValue).
        reduce(function(groups, argument, index) {
            var group = groups[groups.length - 1],
                type  = isPathOrPathValue(argument) ? "Paths" :
                    isJSONG(argument) ? "JSONGs" : "PathMaps",
                groupType = group && group.type,
                methodName = name + type + opFormat;

            // Sets the operation to jsong if its the first set.
            // We need this
            var op = Model.prototype['_' + methodName];

            if (type !== groupType) {
                group = groups[groups.length] = [];
            }

            group.boundPath = type === "JSONGs" && argument.boundPath || undefined;

            if (groupType === null || type !== groupType) {
                group.methodName = methodName;
                group.format = opFormat;
                group.type = type;
                group.op = op;
                group.isSeedRequired = seedRequired;
                group.isValues = isValues;
                group.values = [];
                group.onNext = onNext;
                group.valuesOffset = valuesIndex;
                group.errorSelector = errorSelector;
            }
            
            if (isFirstSet && boundPath && boundPath.length) {
                group[group.length] = appendBoundPathToArgument(boundPath, argument, type);
            } else {
                group[group.length] = argument;
            }
            
            valueEnvelope = values[valuesIndex];
            if (seedRequired && hasSelector && !isFirstSet && valuesIndex < values.length && valueEnvelope) {
                // This is the relative offset into the values array
                group.values[group.values.length] = valueEnvelope.json || valueEnvelope.jsong || valueEnvelope;
                valuesIndex++;
            } else if (((!hasSelector && seedRequired) || isFirstSet) && valueEnvelope) {
                // no need to know the value index
                group.values[group.values.length] = valueEnvelope.json || valueEnvelope.jsong || valueEnvelope;
            }

            return groups;
        }, []);
}

function appendBoundPathToArgument(boundPath, argument, type) {
    // Clones on PathValues so we can mutate.
    if (type === 'Paths') {
        if (argument.path) {
            argument.path = boundPath.concat(argument.path);
            return argument;
        }
        return boundPath.concat(argument);
    } 
    
    else if (type === 'PathMaps') {
        var prefix = {};
        var curr = prefix;
        for (var i = 0, len = boundPath.length; i < len - 1; i++) {
            curr[boundPath[i]] = {};
            curr = curr[boundPath[i]];
        }

        prefix[boundPath[i]] = argument;
        return prefix;
    }

    var paths = [];
    for (var i = 0, len = argument.paths.length; i < len; i++) {
        paths[paths.length] = boundPath.concat(argument.paths[i]);
    }
    return {jsong: argument.jsong, paths: paths};
}

function processOperations(model, operations) {
    // no value has to be kept track of since its all in the 'values' array that is attached
    // to each operation
    return operations.reduce(function(memo, operation) {

        var boundPath = model._path;

        if(boundPath.length > 0 && operation.format === "AsJSONG") {
            throw new Error("It is not legal to use the JSON Graph format from a bound Model. JSON Graph format can only be used from a root model.");
        }

        var results = operation.isValues ?
            operation.op(model, operation, operation.onNext, operation.errorSelector, operation.boundPath) :
            operation.op(model, operation, operation.values, operation.errorSelector, operation.boundPath);
        var missing = results.requestedMissingPaths;
        var offset = operation.valuesOffset;

        for (var i = 0, len = missing.length; i < len; i++) {
            missing[i].boundPath = boundPath;
            missing[i].pathSetIndex += offset;
        }

        memo.requestedMissingPaths = memo.requestedMissingPaths.concat(missing);
        memo.optimizedMissingPaths = memo.optimizedMissingPaths.concat(results.optimizedMissingPaths);
        memo.errors = memo.errors.concat(results.errors);
        memo.valuesReceived = memo.valuesReceived || results.requestedPaths.length > 0;

        return memo;
    }, {
        errors: [],
        requestedMissingPaths: [],
        optimizedMissingPaths: [],
        valuesReceived: false
    });
}

function not() {
    var fns = Array.prototype.slice.call(arguments);
    return function() {
        var args = arguments;
        return !fns.every(function(fn) {
            return fn.apply(null, args);
        });
    }
}

function isPathOrPathValue(x) {
    return !!(Array.isArray(x)) || (
        x.hasOwnProperty("path") && x.hasOwnProperty("value"));
}

function isJSONG(x) {
    return x.hasOwnProperty("jsong");
}

function isSeedRequired(format) {
    return format === 'AsJSON' || format === 'AsJSONG' || format === 'AsPathMap';
}

function cloneIfPathOrPathValue(x) {
    return (Array.isArray(x) && x.concat()) || (
        x.hasOwnProperty("path") && x.hasOwnProperty("value") && (
        x.path = x.path.concat()) && x || x) || x;
}



falcor.Model = Model;

Model.EXPIRES_NOW = falcor.EXPIRES_NOW;
Model.EXPIRES_NEVER = falcor.EXPIRES_NEVER;

function Model(options) {
    options || (options = {});
    this._dataSource = options.source;
    this._maxSize = options.maxSize || Math.pow(2, 53) - 1;
    this._collectRatio = options.collectRatio || 0.75;
    this._scheduler = new falcor.ImmediateScheduler();
    this._request = new RequestQueue(this, this._scheduler);
    this._errorSelector = options.errorSelector || Model.prototype._errorSelector;
    this._cache = {};
    this._router = options.router;
    this._root = options.root || {
        expired: [],
        allowSync: false,
        unsafeMode: true
    };
    if (options.cache && typeof options.cache === "object") {
        this.setCache(options.cache);
    }
    this._path = [];
}

Model.prototype = {
    _boxed: false,
    _progressive: false,
    _request: new falcor.RequestQueue(new falcor.ImmediateScheduler()),
    _errorSelector: function(x, y) { return y; },
    get: modelOperation("get"),
    set: modelOperation("set"),
    invalidate: modelOperation("inv"),
    call: call,
    getValue: function(path) {
        return this.get(path, function(x) { return x });
    },
    setValue: function(path, value) {
        return this.set(Array.isArray(path) ?
            {path: path, value: value} :
            path, function(x) { return x; });
    },
    bind: function(boundPath) {
        
        var model = this, root = model._root,
            paths = new Array(arguments.length - 1),
            i = -1, n = arguments.length - 1;
        
        while(++i < n) {
            paths[i] = arguments[i + 1];
        }
        
        if(n === 0) { throw new Error("Model#bind requires at least one value path."); }
        
        return Rx.Observable.create(function(observer) {
            
            var boundModel;
            
            try {
                root.allowSync = true;
                if(!(boundModel = model.bindSync(model._path.concat(boundPath)))) {
                    throw false;
                }
                root.allowSync = false;
                observer.onNext(boundModel);
                observer.onCompleted();
            } catch (e) {
                root.allowSync = false;
                return model.get.apply(model, paths.map(function(path) {
                    return boundPath.concat(path);
                }).concat(function(){})).subscribe(
                    function onNext() {},
                    function onError(err)  { observer.onError(err); },
                    function onCompleted() {
                        try {
                            if(boundModel = model.bindSync(boundPath)) {
                                observer.onNext(boundModel);
                            }
                            observer.onCompleted();
                        } catch(e) {
                            observer.onError(e);
                        }
                });
            }
        });
    },
    setCache: function(cache) {
        return this._setPathMapsAsValues(this, [cache], undefined, this._errorSelector, []);
    },
    getBoundValue: function() {
        return this.syncCheck("getBoundValue") && this._getBoundValue(this);
    },
    getBoundContext: function() {
        return this.syncCheck("getBoundContext") && this._getBoundContext(this);
    },
    getValueSync: function(path) {
        if(Array.isArray(path) === false) {
            throw new Error("Model#getValueSync must be called with an Array path.");
        }
        var value = this.syncCheck("getValueSync") && this._getValueSync(this, this._path.concat(path)).value;
        if(value[$TYPE] === ERROR) {
            throw value;
        }
        return value;
    },
    setValueSync: function(path, value, errorSelector) {
        if(Array.isArray(path) === false) {
            if(typeof errorSelector !== "function") {
                errorSelector = value || this._errorSelector;
            }
            value = path.value;
            path  = path.path;
        }
        if(Array.isArray(path) === false) {
            throw new Error("Model#setValueSync must be called with an Array path.");
        }
        if(this._dataSource) {
            throw new Error("Model#setValueSync can not be invoked on a Model with a DataSource. Please use the withoutDataSource() method followed by setValueSync if you would like to modify only the local cache.");
        }
        var value = this.syncCheck("setValueSync") && this._setValueSync(this, this._path.concat(path), value, errorSelector);
        if(value[$TYPE] === ERROR) {
            throw value;
        }
        return value;
    },
    bindSync: function(path) {
        if(Array.isArray(path) === false) {
            throw new Error("Model#bindSync must be called with an Array path.");
        }
        var boundValue = this.syncCheck("bindSync") && getBoundValue(this, this._path.concat(path));
        if(boundValue.shorted) {
            if(boundValue = boundValue.value) {
                if(boundValue[$TYPE] === ERROR) {
                    throw boundValue;
                    // throw new Error("Model#bindSync can\'t bind to or beyond an error: " + boundValue.toString());
                }
            }
            return undefined;
        } else if(boundValue.value && boundValue.value[$TYPE] === ERROR) {
            throw boundValue.value;
        }
        return this.clone(["_path", boundValue.path]);
    },
    // TODO: This seems like a great place for optimizations
    clone: function() {
        var self = this;
        var clone = new Model();
        
        Object.keys(self).forEach(function(key) {
            clone[key] = self[key];
        });
        
        Array.prototype.slice.call(arguments).forEach(function(tuple) {
            model[tuple[0]] = tuple[1];
        });
        
        return clone;
    },
    batch: function(schedulerOrDelay) {
        if(typeof schedulerOrDelay === "number") {
            schedulerOrDelay = new falcor.TimeoutScheduler(Math.round(Math.abs(schedulerOrDelay)));
        } else if(!schedulerOrDelay || !schedulerOrDelay.schedule) {
            schedulerOrDelay = new falcor.ImmediateScheduler();
        }
        return this.clone(["_request", new falcor.RequestQueue(this, schedulerOrDelay)]);
    },
    unbatch: function() {
        return this.clone(["_request", new falcor.RequestQueue(this, new ImmediateScheduler())]);
    },
    boxValues: function() {
        return this.clone(["_boxed", true]);
    },
    unboxValues: function() {
        return this.clone(["_boxed", false]);
    },
    withoutDataSource: function() {
        return this.clone(["_dataSource", null]);
    },
    syncCheck: function(name) {
        if(this._root.allowSync === false && this._root.unsafeMode === false) {
            throw new Error("Model#" + name + " may only be called within the context of a request selector.");
        }
        return true;
    },

    _getBoundContext         :       getBoundContext,
    _getBoundValue           :         getBoundValue,

    _getValueSync            :          getValueSync,
    _setValueSync            :          setValueSync,

    _getPathsAsValues        :      getPathsAsValues,
    _getPathsAsJSON          :        getPathsAsJSON,
    _getPathsAsPathMap       :     getPathsAsPathMap,
    _getPathsAsJSONG         :       getPathsAsJSONG,

    _getPathMapsAsValues     :   getPathMapsAsValues,
    _getPathMapsAsJSON       :     getPathMapsAsJSON,
    _getPathMapsAsPathMap    :  getPathMapsAsPathMap,
    _getPathMapsAsJSONG      :    getPathMapsAsJSONG,
    
    _setPathsAsValues        :      setPathsAsValues,
    _setPathsAsJSON          :        setPathsAsJSON,
    _setPathsAsPathMap       :     setPathsAsPathMap,
    _setPathsAsJSONG         :       setPathsAsJSONG,
    
    _setPathMapsAsValues     :   setPathMapsAsValues,
    _setPathMapsAsJSON       :     setPathMapsAsJSON,
    _setPathMapsAsPathMap    :  setPathMapsAsPathMap,
    _setPathMapsAsJSONG      :    setPathMapsAsJSONG,
    
    _setJSONGsAsValues       :     setJSONGsAsValues,
    _setJSONGsAsJSON         :       setJSONGsAsJSON,
    _setJSONGsAsPathMap      :    setJSONGsAsPathMap,
    _setJSONGsAsJSONG        :      setJSONGsAsJSONG,
    
    _invPathsAsValues        :       invalidatePaths,
    _invPathsAsJSON          :       invalidatePaths,
    _invPathsAsPathMap       :       invalidatePaths,
    _invPathsAsJSONG         :       invalidatePaths,
    
    _invPathMapsAsValues     :    invalidatePathMaps,
    _invPathMapsAsJSON       :    invalidatePathMaps,
    _invPathMapsAsPathMap    :    invalidatePathMaps,
    _invPathMapsAsJSONG      :    invalidatePathMaps
};


var PathLibrary = {
    simplePathToMap: simplePathToMap,
    pathToMap: pathToMap,
    simplePathInMap: simplePathInMap
};

function simplePathToMap(path, seed) {
    seed = seed || {};
    var curr = seed;
    for (var i = 0, len = path.length; i < len; i++) {
        if (curr[path[i]]) {
            curr = curr[path[i]];
        } else {
            curr = curr[path[i]] = {};
        }
    }
    return seed;
}

// TODO: Paul, teach me how to macro
function intersect(map, pathSet) {
    
}

function pathToMap(path, seed, depth) {
    depth = depth || 0;
    var curr = path[depth];

    // Object / Array
    if (typeof curr === 'object') {
        if (Array.isArray(curr)) {
            curr.forEach(function(v) {
                if (!seed[v]) {
                    seed[v] = {};
                }
                if (depth < path.length) {
                    pathToMap(path, seed[v], depth + 1);
                }
            });
        } else {
            var from = curr.from || 0;
            var to = curr.to >= 0 ? curr.to : curr.length;
            for (var i = from; i <= to; i++) {
                if (!seed[i]) {
                    seed[i] = {};
                }
                if (depth < path.length) {
                    pathToMap(path, seed[i], depth + 1);
                }
            }
        }
    } else {
        if (depth < path.length) {
            if (!seed[curr]) {
                seed[curr] = {};
            }
            pathToMap(path, seed[curr], depth + 1);
        }
    }
}

function simplePathInMap(path, map) {
    var curr = map;
    for (var i = 0, len = path.length; i < len; i++) {
        if (curr[path[i]]) {
            curr = curr[path[i]];
        } else {
            return false;
        }
    }
    return true;
}

function call(path, args, suffixes, paths, selector) {
    var model = this;
    args && Array.isArray(args) || (args = []);
    suffixes && Array.isArray(suffixes) || (suffixes = []);
    paths = Array.prototype.slice.call(arguments, 3);
    if (typeof (selector = paths[paths.length - 1]) !== 'function') {
        selector = undefined;
    } else {
        paths = paths.slice(0, -1);
    }
    return ModelResponse.create(function (options) {
        var rootModel = model.clone([
                '_path',
                []
            ]), localRoot = rootModel.withoutDataSource(), dataSource = model._dataSource, boundPath = model._path, callPath = boundPath.concat(path), thisPath = callPath.slice(0, -1);
        var disposable = model.getValue(path).flatMap(function (localFn) {
                if (typeof localFn === 'function') {
                    return Rx.Observable.return(localFn.apply(rootModel.bindSync(thisPath), args).map(function (pathValue) {
                        return {
                            path: thisPath.concat(pathValue.path),
                            value: pathValue.value
                        };
                    }).toArray().flatMap(function (pathValues) {
                        return localRoot.set.apply(localRoot, pathValues).toJSONG();
                    }).flatMap(function (envelope) {
                        return rootModel.get.apply(rootModel, envelope.paths.reduce(function (paths$2, path$2) {
                            return paths$2.concat(suffixes.map(function (suffix) {
                                return path$2.concat(suffix);
                            }));
                        }, []).concat(paths.reduce(function (paths$2, path$2) {
                            return paths$2.concat(thisPath.concat(path$2));
                        }, []))).toJSONG();
                    }));
                }
                return Rx.Observable.empty();
            }).defaultIfEmpty(dataSource.call(path, args, suffixes, paths)).mergeAll().subscribe(function (envelope) {
                var invalidated = envelope.invalidated;
                if (invalidated && invalidated.length) {
                    invalidatePaths(rootModel, invalidated, undefined, model._errorSelector);
                }
                disposable = localRoot.set(envelope, function () {
                    return model;
                }).subscribe(function (model$2) {
                    var getPaths = envelope.paths.map(function (path$2) {
                            return path$2.slice(boundPath.length);
                        });
                    if (selector) {
                        getPaths[getPaths.length] = function () {
                            return selector.call(model$2, getPaths);
                        };
                    }
                    disposable = model$2.get.apply(model$2, getPaths).subscribe(options);
                });
            });
        return {
            dispose: function () {
                disposable && disposable.dispose();
                disposable = undefined;
            }
        };
    });
}
function getBoundContext(model) {
    return getBoundValue(model || this).value;
}
function getBoundValue(model, path, value, boxed, shorted) {
    model || (model = this);
    path || (path = model._path || []);
    if (path.length) {
        model._boxed = (boxed = model._boxed) || true;
        value = getValueSync(model, path.concat(null));
        model._boxed = boxed;
        path = value.path;
        shorted = value.shorted;
        value = value.value;
        while (path[path.length - 1] == null) {
            path.pop();
        }
    } else {
        value = model._cache;
        shorted = false;
    }
    return {
        path: path,
        value: value,
        shorted: shorted
    };
}
function getPathMapsAsJSONG(model, pathMaps, values, errorSelector, boundPath) {
    var nodeRoot = model._cache || (model._cache = {}), nodeParent = nodeRoot, node = nodeParent, boundLength = 0;
    boundPath = model._path || [];
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$8, y$2) {
        return y$2;
    });
    var pathMapStack = pathMaps.pathMapStack || (pathMaps.pathMapStack = []);
    var nodes = pathMaps.nodes || (pathMaps.nodes = []);
    var jsons = pathMaps.jsons || (pathMaps.jsons = []);
    var errors = pathMaps.errors || (pathMaps.errors = []);
    var refs = pathMaps.refs || (pathMaps.refs = []);
    var depth = pathMaps.depth || (pathMaps.depth = 0);
    var refIndex = pathMaps.refIndex || (pathMaps.refIndex = 0);
    var refDepth = pathMaps.refDepth || (pathMaps.refDepth = 0);
    var requestedPath = pathMaps.requestedPath || (pathMaps.requestedPath = []);
    var optimizedPath = pathMaps.optimizedPath || (pathMaps.optimizedPath = []);
    var requestedPaths = pathMaps.requestedPaths || (pathMaps.requestedPaths = []);
    var optimizedPaths = pathMaps.optimizedPaths || (pathMaps.optimizedPaths = []);
    var requestedMissingPaths = pathMaps.requestedMissingPaths || (pathMaps.requestedMissingPaths = []);
    var optimizedMissingPaths = pathMaps.optimizedMissingPaths || (pathMaps.optimizedMissingPaths = []);
    var hasValue = pathMaps.hasValue || (pathMaps.hasValue = false);
    var jsonRoot = pathMaps.jsonRoot || (pathMaps.jsonRoot = values && values[0]);
    var jsonParent = pathMaps.jsonParent || (pathMaps.jsonParent = jsonRoot);
    var jsonNode = pathMaps.jsonNode || (pathMaps.jsonNode = jsonParent);
    var pathMap, length = 0, height = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-1] = jsonParent;
    jsons[-2] = jsons;
    var index = -1, count = pathMaps.length;
    while (++index < count) {
        pathMap = pathMaps[index];
        pathMapStack[0] = pathMap;
        depth = 0;
        length = pathMap.length;
        height = length - 1;
        var ref;
        refs.length = 0;
        while (depth > -1) {
            refIndex = depth;
            while (--refIndex >= -1) {
                if (!!(ref = refs[refIndex])) {
                    refLength = ref.length;
                    var i = -1, j = 0;
                    while (++i < refLength) {
                        optimizedPath[j++] = ref[i];
                    }
                    i = ++refIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    optimizedPath.length = j;
                    break;
                }
            }
            var offset, keys, index$2, key, isKeySet;
            pathMap = pathMap;
            height = (length = depth) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                node = nodeParent[key];
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                nodeTimestamp = node && node[$TIMESTAMP];
                nodeExpires = node && node[$EXPIRES];
                if (node != null && typeof node === 'object') {
                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    } else {
                        if (nodeExpires !== 1) {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                            if (node !== head) {
                                next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                root$2.__head = root$2.__next = head = node;
                                head.__next = next;
                                head.__prev = void 0;
                            }
                            if (tail == null || node === tail) {
                                root$2.__tail = root$2.__prev = tail = prev || node;
                            }
                            root$2 = head = tail = next = prev = void 0;
                        }
                    }
                }
                if (node != null && jsonParent != null) {
                    if (boxed === true) {
                        jsonParent[key] = node;
                    } else {
                        var val = nodeValue;
                        if (val != null && typeof val === 'object') {
                            var src = val, keys$2 = Object.keys(src), x, i$2 = -1, n = keys$2.length;
                            val = Array.isArray(src) && new Array(src.length) || Object.create(null);
                            while (++i$2 < n) {
                                x = keys$2[i$2];
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (val[x] = src[x]);
                            }
                        }
                        if (!nodeType && (val != null && typeof val === 'object') && !Array.isArray(val)) {
                            val[$TYPE] = LEAF;
                        }
                        jsonParent[key] = val;
                    }
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                jsonParent = jsonNode = jsons[depth - 1];
                depth = depth;
                follow_path_map_6284:
                    do {
                        if ((pathMap = pathMapStack[offset = depth * 4]) != null && typeof pathMap === 'object' && (keys = pathMapStack[offset + 1] || (pathMapStack[offset + 1] = Object.keys(pathMap))) && ((index$2 = pathMapStack[offset + 2] || (pathMapStack[offset + 2] = 0)) || true) && ((key = pathMapStack[offset + 3]) || true) && ((isKeySet = keys.length > 1) || keys.length > 0)) {
                            key = keys[index$2];
                            if (key == __NULL) {
                                pathMapStack[offset = 3 * (depth + 1)] = pathMap[__NULL];
                                pathMapStack[offset + 1] = keys;
                                pathMapStack[offset + 2] = 0;
                                nodeParent = nodes[depth] = node;
                                jsonParent = jsons[depth] = jsonNode;
                                depth = depth + 1;
                                continue follow_path_map_6284;
                            } else if (key === $SIZE || (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT))) {
                                nodeParent = node;
                                break follow_path_map_6284;
                            } else if (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') {
                                nodeParent[key] || (nodeParent[key] = pathMap[key]);
                                nodeParent = node;
                                break follow_path_map_6284;
                            } else {
                                depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                                pathMapStack[offset = 4 * (depth + 1)] = pathMap = pathMap[key];
                                if (pathMap != null && typeof pathMap === 'object' && pathMap[$TYPE] === void 0 && Array.isArray(pathMap) === false && (keys = Object.keys(pathMap)) && keys.length > 0) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    if (node != null && jsonParent != null) {
                                        if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                            if (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                jsonNode = jsonParent[key] = Object.create(null);
                                            }
                                        } else {
                                            if (boxed === true) {
                                                jsonParent[key] = node;
                                            } else {
                                                var val$2 = nodeValue;
                                                if (val$2 != null && typeof val$2 === 'object') {
                                                    var src$2 = val$2, keys$3 = Object.keys(src$2), x$2, i$3 = -1, n$2 = keys$3.length;
                                                    val$2 = Array.isArray(src$2) && new Array(src$2.length) || Object.create(null);
                                                    while (++i$3 < n$2) {
                                                        x$2 = keys$3[i$3];
                                                        !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (val$2[x$2] = src$2[x$2]);
                                                    }
                                                }
                                                if (!nodeType && (val$2 != null && typeof val$2 === 'object') && !Array.isArray(val$2)) {
                                                    val$2[$TYPE] = LEAF;
                                                }
                                                jsonParent[key] = val$2;
                                            }
                                        }
                                    }
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        do {
                                            if (nodeExpires !== 1) {
                                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                                if (node !== head$2) {
                                                    next$2 && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                                                    prev$2 && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                                                    (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                                    root$3.__head = root$3.__next = head$2 = node;
                                                    head$2.__next = next$2;
                                                    head$2.__prev = void 0;
                                                }
                                                if (tail$2 == null || node === tail$2) {
                                                    root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                                }
                                                root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                                            }
                                            refs[depth] = nodeValue;
                                            refIndex = depth + 1;
                                            refDepth = 0;
                                            var key$2, isKeySet$2;
                                            reference = nodeValue;
                                            refHeight = (refLength = reference.length) - 1;
                                            nodeParent = nodeRoot;
                                            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                node = node = nodeParent;
                                            } else {
                                                nodeParent = nodeRoot;
                                                jsonParent = jsonRoot;
                                                refDepth = refDepth;
                                                follow_path_6522:
                                                    do {
                                                        key$2 = reference[refDepth];
                                                        isKeySet$2 = false;
                                                        if (key$2 != null) {
                                                            if (refDepth < refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                if (node != null && jsonParent != null) {
                                                                    if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                                        if (!(jsonNode = jsonParent[key$2]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                                            jsonNode = jsonParent[key$2] = Object.create(null);
                                                                        }
                                                                    } else {
                                                                        if (boxed === true) {
                                                                            jsonParent[key$2] = node;
                                                                        } else {
                                                                            var val$3 = nodeValue;
                                                                            if (val$3 != null && typeof val$3 === 'object') {
                                                                                var src$3 = val$3, keys$4 = Object.keys(src$3), x$3, i$4 = -1, n$3 = keys$4.length;
                                                                                val$3 = Array.isArray(src$3) && new Array(src$3.length) || Object.create(null);
                                                                                while (++i$4 < n$3) {
                                                                                    x$3 = keys$4[i$4];
                                                                                    !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (val$3[x$3] = src$3[x$3]);
                                                                                }
                                                                            }
                                                                            if (!nodeType && (val$3 != null && typeof val$3 === 'object') && !Array.isArray(val$3)) {
                                                                                val$3[$TYPE] = LEAF;
                                                                            }
                                                                            jsonParent[key$2] = val$3;
                                                                        }
                                                                    }
                                                                }
                                                                if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                    nodeParent = node;
                                                                    break follow_path_6522;
                                                                }
                                                                nodeParent = node;
                                                                jsonParent = jsonNode;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_6522;
                                                            } else if (refDepth === refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                if (node != null && jsonParent != null) {
                                                                    if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                                        if (!(jsonNode = jsonParent[key$2]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                                            jsonNode = jsonParent[key$2] = Object.create(null);
                                                                        }
                                                                    } else {
                                                                        if (boxed === true) {
                                                                            jsonParent[key$2] = node;
                                                                        } else {
                                                                            var val$4 = nodeValue;
                                                                            if (val$4 != null && typeof val$4 === 'object') {
                                                                                var src$4 = val$4, keys$5 = Object.keys(src$4), x$4, i$5 = -1, n$4 = keys$5.length;
                                                                                val$4 = Array.isArray(src$4) && new Array(src$4.length) || Object.create(null);
                                                                                while (++i$5 < n$4) {
                                                                                    x$4 = keys$5[i$5];
                                                                                    !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (val$4[x$4] = src$4[x$4]);
                                                                                }
                                                                            }
                                                                            if (!nodeType && (val$4 != null && typeof val$4 === 'object') && !Array.isArray(val$4)) {
                                                                                val$4[$TYPE] = LEAF;
                                                                            }
                                                                            jsonParent[key$2] = val$4;
                                                                        }
                                                                    }
                                                                }
                                                                if (node != null) {
                                                                    var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                    // Set up the hard-link so we don't have to do all
                                                                    // this work the next time we follow this reference.
                                                                    if (refContext === void 0) {
                                                                        // create a back reference
                                                                        var backRefs = node[__REFS_LENGTH] || 0;
                                                                        node[__REF + backRefs] = refContainer;
                                                                        node[__REFS_LENGTH] = backRefs + 1;
                                                                        // create a hard reference
                                                                        refContainer[__REF_INDEX] = backRefs;
                                                                        refContainer[__CONTEXT] = node;
                                                                        refContainer = backRefs = void 0;
                                                                    }
                                                                    ;
                                                                }
                                                                appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                nodeParent = node;
                                                                break follow_path_6522;
                                                            }
                                                        } else if (refDepth < refHeight) {
                                                            nodeParent = node;
                                                            jsonParent = jsonNode;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_6522;
                                                        }
                                                        nodeParent = node;
                                                        break follow_path_6522;
                                                    } while (true);
                                                node = nodeParent;
                                            }
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeExpires = node && node[$EXPIRES];
                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                        } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                        if (node == null) {
                                            while (refDepth <= refHeight) {
                                                optimizedPath[refDepth] = reference[refDepth++];
                                            }
                                        }
                                    }
                                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                        nodeParent = node;
                                        break follow_path_map_6284;
                                    }
                                    pathMapStack[offset + 1] = keys;
                                    pathMapStack[offset + 3] = key;
                                    nodeParent = nodes[depth] = node;
                                    jsonParent = jsons[depth] = jsonNode;
                                    depth = depth + 1;
                                    continue follow_path_map_6284;
                                }
                            }
                        }
                        if (key != null) {
                            optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                            node = nodeParent[key];
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            nodeTimestamp = node && node[$TIMESTAMP];
                            nodeExpires = node && node[$EXPIRES];
                            if (node != null && typeof node === 'object') {
                                if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                } else {
                                    if (nodeExpires !== 1) {
                                        var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                        if (node !== head$3) {
                                            next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                            prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                            (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                            root$4.__head = root$4.__next = head$3 = node;
                                            head$3.__next = next$3;
                                            head$3.__prev = void 0;
                                        }
                                        if (tail$3 == null || node === tail$3) {
                                            root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                                        }
                                        root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                                    }
                                }
                            }
                            if (node != null && jsonParent != null) {
                                if (boxed === true) {
                                    jsonParent[key] = node;
                                } else {
                                    var val$5 = nodeValue;
                                    if (val$5 != null && typeof val$5 === 'object') {
                                        var src$5 = val$5, keys$6 = Object.keys(src$5), x$5, i$6 = -1, n$5 = keys$6.length;
                                        val$5 = Array.isArray(src$5) && new Array(src$5.length) || Object.create(null);
                                        while (++i$6 < n$5) {
                                            x$5 = keys$6[i$6];
                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (val$5[x$5] = src$5[x$5]);
                                        }
                                    }
                                    if (!nodeType && (val$5 != null && typeof val$5 === 'object') && !Array.isArray(val$5)) {
                                        val$5[$TYPE] = LEAF;
                                    }
                                    jsonParent[key] = val$5;
                                }
                            }
                            appendNullKey = false;
                        }
                        nodeParent = node;
                        break follow_path_map_6284;
                    } while (true);
                node = nodeParent;
            }
            if (node != null || boxed === true) {
                if (nodeType === ERROR) {
                    if (nodeExpires !== 1) {
                        var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                        if (node !== head$4) {
                            next$4 && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                            prev$4 && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                            (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                            root$5.__head = root$5.__next = head$4 = node;
                            head$4.__next = next$4;
                            head$4.__prev = void 0;
                        }
                        if (tail$4 == null || node === tail$4) {
                            root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                        }
                        root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                    }
                    var nodeType$2 = node && node[$TYPE] || void 0;
                    nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                    var pbv = Object.create(null);
                    var src$6 = requestedPath, i$7 = -1, n$6 = src$6.length, req = new Array(n$6);
                    while (++i$7 < n$6) {
                        req[i$7] = src$6[i$7];
                    }
                    if (appendNullKey === true) {
                        req[req.length] = null;
                    }
                    pbv.path = req;
                    if (boxed === true) {
                        pbv.value = node;
                    } else {
                        var dest = nodeValue, src$7 = dest, x$6;
                        if (dest != null && typeof dest === 'object') {
                            dest = Array.isArray(src$7) && [] || Object.create(null);
                            for (x$6 in src$7) {
                                !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest[x$6] = src$7[x$6]);
                            }
                        }
                        pbv.value = dest;
                    }
                    errors[errors.length] = pbv;
                }
                hasValue || (hasValue = jsonParent != null);
                var src$8 = optimizedPath, i$8 = -1, n$7 = src$8.length, opt = new Array(n$7);
                while (++i$8 < n$7) {
                    opt[i$8] = src$8[i$8];
                }
                var src$9 = requestedPath, i$9 = -1, n$8 = src$9.length, req$2 = new Array(n$8);
                while (++i$9 < n$8) {
                    req$2[i$9] = src$9[i$9];
                }
                if (appendNullKey === true) {
                    req$2[req$2.length] = null;
                }
                requestedPaths[requestedPaths.length] = req$2;
                optimizedPaths[optimizedPaths.length] = opt;
            }
            if (boxed === false && node == null || refreshing === true) {
                var src$10 = boundPath, i$10 = -1, n$9 = src$10.length, req$3 = new Array(n$9);
                while (++i$10 < n$9) {
                    req$3[i$10] = src$10[i$10];
                }
                var src$11 = optimizedPath, i$11 = -1, n$10 = src$11.length, opt$2 = new Array(n$10);
                while (++i$11 < n$10) {
                    opt$2[i$11] = src$11[i$11];
                }
                var reqLen = req$3.length - 1, optLen = opt$2.length - 1, i$12 = -1, n$11 = requestedPath.length, map, offset$2, keys$7, index$3, reqKeys, optKeys, optKeysLen, x$7, y, z;
                while (++i$12 < n$11) {
                    req$3[++reqLen] = (reqKeys = pathMapStack[offset$2 = (i$12 + boundLength) * 4 + 1]) && reqKeys.length > 1 && [requestedPath[i$12]] || requestedPath[i$12];
                }
                var j$2 = depth, k = reqLen, l = optLen;
                i$12 = j$2++;
                while (j$2 > i$12) {
                    if ((map = pathMapStack[offset$2 = (j$2 + boundLength) * 4]) != null && typeof map === 'object' && map[$TYPE] === void 0 && Array.isArray(map) === false && (keys$7 = pathMapStack[offset$2 + 1] || (pathMapStack[offset$2 + 1] = Object.keys(map))) && ((index$3 = pathMapStack[offset$2 + 2] || (pathMapStack[offset$2 + 2] = 0)) || true) && keys$7.length > 0) {
                        if ((pathMapStack[offset$2 + 2] = ++index$3) - 1 < keys$7.length) {
                            if (reqLen - k < j$2 - i$12) {
                                var src$12 = keys$7, i$13 = -1, n$12 = src$12.length, dest$2 = new Array(n$12);
                                while (++i$13 < n$12) {
                                    dest$2[i$13] = src$12[i$13];
                                }
                                reqKeys = dest$2;
                                x$7 = -1;
                                y = reqKeys.length;
                                while (++x$7 < y) {
                                    reqKeys[x$7] = (z = reqKeys[x$7]) == __NULL ? null : z;
                                }
                                req$3[++reqLen] = y === 1 ? reqKeys[0] : reqKeys;
                            }
                            if (optLen - l < j$2 - i$12) {
                                var src$13 = keys$7, i$14 = -1, n$13 = src$13.length, dest$3 = new Array(n$13);
                                while (++i$14 < n$13) {
                                    dest$3[i$14] = src$13[i$14];
                                }
                                reqKeys = dest$3;
                                optKeys = [];
                                optKeysLen = 0;
                                x$7 = -1;
                                y = reqKeys.length;
                                while (++x$7 < y) {
                                    (z = reqKeys[x$7]) !== __NULL && (optKeys[optKeysLen++] = z);
                                }
                                if (optKeysLen > 0) {
                                    opt$2[++optLen] = optKeysLen === 1 ? optKeys[0] : optKeys;
                                }
                            }
                            pathMapStack[offset$2 = 4 * (++j$2 + boundLength)] = map[keys$7[index$3 - 1]];
                            continue;
                        }
                    }
                    delete pathMapStack[offset$2 = 4 * (j$2-- + boundLength)];
                    delete pathMapStack[offset$2 + 1];
                    delete pathMapStack[offset$2 + 2];
                    delete pathMapStack[offset$2 + 3];
                }
                req$3.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req$3;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
            }
            appendNullKey = false;
            var offset$3, keys$8, index$4;
            while (depth > -1 && (keys$8 = pathMapStack[(offset$3 = 4 * depth) + 1]) && ((index$4 = pathMapStack[offset$3 + 2]) || true) && (pathMapStack[offset$3 + 2] = ++index$4) >= keys$8.length) {
                delete pathMapStack[offset$3 + 0];
                delete pathMapStack[offset$3 + 1];
                delete pathMapStack[offset$3 + 2];
                delete pathMapStack[offset$3 + 3];
                --depth;
            }
        }
    }
    values && (values[0] = hasValue && {
        paths: requestedPaths,
        jsong: jsons[-1]
    } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getPathsAsJSONG(model, pathSets, values, errorSelector, boundPath) {
    var nodeRoot = model._cache || (model._cache = {}), nodeParent = nodeRoot, node = nodeParent, boundLength = 0;
    boundPath = model._path || [];
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$8, y) {
        return y;
    });
    var nodes = pathSets.nodes || (pathSets.nodes = []);
    var jsons = pathSets.jsons || (pathSets.jsons = []);
    var errors = pathSets.errors || (pathSets.errors = []);
    var refs = pathSets.refs || (pathSets.refs = []);
    var depth = pathSets.depth || (pathSets.depth = 0);
    var refIndex = pathSets.refIndex || (pathSets.refIndex = 0);
    var refDepth = pathSets.refDepth || (pathSets.refDepth = 0);
    var requestedPath = pathSets.requestedPath || (pathSets.requestedPath = []);
    var optimizedPath = pathSets.optimizedPath || (pathSets.optimizedPath = []);
    var requestedPaths = pathSets.requestedPaths || (pathSets.requestedPaths = []);
    var optimizedPaths = pathSets.optimizedPaths || (pathSets.optimizedPaths = []);
    var requestedMissingPaths = pathSets.requestedMissingPaths || (pathSets.requestedMissingPaths = []);
    var optimizedMissingPaths = pathSets.optimizedMissingPaths || (pathSets.optimizedMissingPaths = []);
    var hasValue = pathSets.hasValue || (pathSets.hasValue = false);
    var jsonRoot = pathSets.jsonRoot || (pathSets.jsonRoot = values && values[0]);
    var jsonParent = pathSets.jsonParent || (pathSets.jsonParent = jsonRoot);
    var jsonNode = pathSets.jsonNode || (pathSets.jsonNode = jsonParent);
    var path, length = 0, height = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-1] = jsonParent;
    jsons[-2] = jsons;
    var index = -1, count = pathSets.length;
    while (++index < count) {
        path = pathSets[index];
        depth = 0;
        length = path.length;
        height = length - 1;
        var ref;
        refs.length = 0;
        while (depth > -1) {
            refIndex = depth;
            while (--refIndex >= -1) {
                if (!!(ref = refs[refIndex])) {
                    refLength = ref.length;
                    var i = -1, j = 0;
                    while (++i < refLength) {
                        optimizedPath[j++] = ref[i];
                    }
                    i = ++refIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    optimizedPath.length = j;
                    break;
                }
            }
            var key, isKeySet;
            path = path;
            height = (length = path.length) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                node = nodeParent[key];
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                nodeTimestamp = node && node[$TIMESTAMP];
                nodeExpires = node && node[$EXPIRES];
                if (node != null && typeof node === 'object') {
                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    } else {
                        if (nodeExpires !== 1) {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                            if (node !== head) {
                                next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                root$2.__head = root$2.__next = head = node;
                                head.__next = next;
                                head.__prev = void 0;
                            }
                            if (tail == null || node === tail) {
                                root$2.__tail = root$2.__prev = tail = prev || node;
                            }
                            root$2 = head = tail = next = prev = void 0;
                        }
                    }
                }
                if (node != null && jsonParent != null) {
                    if (boxed === true) {
                        jsonParent[key] = node;
                    } else {
                        var val = nodeValue;
                        if (val != null && typeof val === 'object') {
                            var src = val, keys = Object.keys(src), x, i$2 = -1, n = keys.length;
                            val = Array.isArray(src) && new Array(src.length) || Object.create(null);
                            while (++i$2 < n) {
                                x = keys[i$2];
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (val[x] = src[x]);
                            }
                        }
                        if (!nodeType && (val != null && typeof val === 'object') && !Array.isArray(val)) {
                            val[$TYPE] = LEAF;
                        }
                        jsonParent[key] = val;
                    }
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                jsonParent = jsonNode = jsons[depth - 1];
                depth = depth;
                follow_path_5797:
                    do {
                        key = path[depth];
                        if (isKeySet = key != null && typeof key === 'object') {
                            if (Array.isArray(key)) {
                                if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        if (key === __NULL) {
                            key = null;
                        }
                        depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                        if (key != null) {
                            if (depth < height) {
                                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                if (node != null && jsonParent != null) {
                                    if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                        if (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                            jsonNode = jsonParent[key] = Object.create(null);
                                        }
                                    } else {
                                        if (boxed === true) {
                                            jsonParent[key] = node;
                                        } else {
                                            var val$2 = nodeValue;
                                            if (val$2 != null && typeof val$2 === 'object') {
                                                var src$2 = val$2, keys$2 = Object.keys(src$2), x$2, i$3 = -1, n$2 = keys$2.length;
                                                val$2 = Array.isArray(src$2) && new Array(src$2.length) || Object.create(null);
                                                while (++i$3 < n$2) {
                                                    x$2 = keys$2[i$3];
                                                    !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (val$2[x$2] = src$2[x$2]);
                                                }
                                            }
                                            if (!nodeType && (val$2 != null && typeof val$2 === 'object') && !Array.isArray(val$2)) {
                                                val$2[$TYPE] = LEAF;
                                            }
                                            jsonParent[key] = val$2;
                                        }
                                    }
                                }
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    do {
                                        if (nodeExpires !== 1) {
                                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                            if (node !== head$2) {
                                                next$2 && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                                                prev$2 && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                                                (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                                root$3.__head = root$3.__next = head$2 = node;
                                                head$2.__next = next$2;
                                                head$2.__prev = void 0;
                                            }
                                            if (tail$2 == null || node === tail$2) {
                                                root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                            }
                                            root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                                        }
                                        refs[depth] = nodeValue;
                                        refIndex = depth + 1;
                                        refDepth = 0;
                                        var key$2, isKeySet$2;
                                        reference = nodeValue;
                                        refHeight = (refLength = reference.length) - 1;
                                        nodeParent = nodeRoot;
                                        nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                        if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                            node = node = nodeParent;
                                        } else {
                                            nodeParent = nodeRoot;
                                            jsonParent = jsonRoot;
                                            refDepth = refDepth;
                                            follow_path_6007:
                                                do {
                                                    key$2 = reference[refDepth];
                                                    isKeySet$2 = false;
                                                    if (key$2 != null) {
                                                        if (refDepth < refHeight) {
                                                            optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                            node = nodeParent[key$2];
                                                            nodeType = node && node[$TYPE] || void 0;
                                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                            nodeTimestamp = node && node[$TIMESTAMP];
                                                            nodeExpires = node && node[$EXPIRES];
                                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                            }
                                                            if (node != null && jsonParent != null) {
                                                                if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                                    if (!(jsonNode = jsonParent[key$2]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                                        jsonNode = jsonParent[key$2] = Object.create(null);
                                                                    }
                                                                } else {
                                                                    if (boxed === true) {
                                                                        jsonParent[key$2] = node;
                                                                    } else {
                                                                        var val$3 = nodeValue;
                                                                        if (val$3 != null && typeof val$3 === 'object') {
                                                                            var src$3 = val$3, keys$3 = Object.keys(src$3), x$3, i$4 = -1, n$3 = keys$3.length;
                                                                            val$3 = Array.isArray(src$3) && new Array(src$3.length) || Object.create(null);
                                                                            while (++i$4 < n$3) {
                                                                                x$3 = keys$3[i$4];
                                                                                !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (val$3[x$3] = src$3[x$3]);
                                                                            }
                                                                        }
                                                                        if (!nodeType && (val$3 != null && typeof val$3 === 'object') && !Array.isArray(val$3)) {
                                                                            val$3[$TYPE] = LEAF;
                                                                        }
                                                                        jsonParent[key$2] = val$3;
                                                                    }
                                                                }
                                                            }
                                                            if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                nodeParent = node;
                                                                break follow_path_6007;
                                                            }
                                                            nodeParent = node;
                                                            jsonParent = jsonNode;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_6007;
                                                        } else if (refDepth === refHeight) {
                                                            optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                            node = nodeParent[key$2];
                                                            nodeType = node && node[$TYPE] || void 0;
                                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                            nodeTimestamp = node && node[$TIMESTAMP];
                                                            nodeExpires = node && node[$EXPIRES];
                                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                            }
                                                            if (node != null && jsonParent != null) {
                                                                if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                                    if (!(jsonNode = jsonParent[key$2]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                                        jsonNode = jsonParent[key$2] = Object.create(null);
                                                                    }
                                                                } else {
                                                                    if (boxed === true) {
                                                                        jsonParent[key$2] = node;
                                                                    } else {
                                                                        var val$4 = nodeValue;
                                                                        if (val$4 != null && typeof val$4 === 'object') {
                                                                            var src$4 = val$4, keys$4 = Object.keys(src$4), x$4, i$5 = -1, n$4 = keys$4.length;
                                                                            val$4 = Array.isArray(src$4) && new Array(src$4.length) || Object.create(null);
                                                                            while (++i$5 < n$4) {
                                                                                x$4 = keys$4[i$5];
                                                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (val$4[x$4] = src$4[x$4]);
                                                                            }
                                                                        }
                                                                        if (!nodeType && (val$4 != null && typeof val$4 === 'object') && !Array.isArray(val$4)) {
                                                                            val$4[$TYPE] = LEAF;
                                                                        }
                                                                        jsonParent[key$2] = val$4;
                                                                    }
                                                                }
                                                            }
                                                            if (node != null) {
                                                                var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                // Set up the hard-link so we don't have to do all
                                                                // this work the next time we follow this reference.
                                                                if (refContext === void 0) {
                                                                    // create a back reference
                                                                    var backRefs = node[__REFS_LENGTH] || 0;
                                                                    node[__REF + backRefs] = refContainer;
                                                                    node[__REFS_LENGTH] = backRefs + 1;
                                                                    // create a hard reference
                                                                    refContainer[__REF_INDEX] = backRefs;
                                                                    refContainer[__CONTEXT] = node;
                                                                    refContainer = backRefs = void 0;
                                                                }
                                                                ;
                                                            }
                                                            appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                            nodeParent = node;
                                                            break follow_path_6007;
                                                        }
                                                    } else if (refDepth < refHeight) {
                                                        nodeParent = node;
                                                        jsonParent = jsonNode;
                                                        refDepth = refDepth + 1;
                                                        continue follow_path_6007;
                                                    }
                                                    nodeParent = node;
                                                    break follow_path_6007;
                                                } while (true);
                                            node = nodeParent;
                                        }
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        nodeExpires = node && node[$EXPIRES];
                                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                    } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                    if (node == null) {
                                        while (refDepth <= refHeight) {
                                            optimizedPath[refDepth] = reference[refDepth++];
                                        }
                                    }
                                }
                                if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                    nodeParent = node;
                                    break follow_path_5797;
                                }
                                nodeParent = nodes[depth] = node;
                                jsonParent = jsons[depth] = jsonNode;
                                depth = depth + 1;
                                continue follow_path_5797;
                            } else if (depth === height) {
                                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object') {
                                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    } else {
                                        if (nodeExpires !== 1) {
                                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                            if (node !== head$3) {
                                                next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                                prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                                (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                                root$4.__head = root$4.__next = head$3 = node;
                                                head$3.__next = next$3;
                                                head$3.__prev = void 0;
                                            }
                                            if (tail$3 == null || node === tail$3) {
                                                root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                                            }
                                            root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                                        }
                                    }
                                }
                                if (node != null && jsonParent != null) {
                                    if (boxed === true) {
                                        jsonParent[key] = node;
                                    } else {
                                        var val$5 = nodeValue;
                                        if (val$5 != null && typeof val$5 === 'object') {
                                            var src$5 = val$5, keys$5 = Object.keys(src$5), x$5, i$6 = -1, n$5 = keys$5.length;
                                            val$5 = Array.isArray(src$5) && new Array(src$5.length) || Object.create(null);
                                            while (++i$6 < n$5) {
                                                x$5 = keys$5[i$6];
                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (val$5[x$5] = src$5[x$5]);
                                            }
                                        }
                                        if (!nodeType && (val$5 != null && typeof val$5 === 'object') && !Array.isArray(val$5)) {
                                            val$5[$TYPE] = LEAF;
                                        }
                                        jsonParent[key] = val$5;
                                    }
                                }
                                appendNullKey = false;
                                nodeParent = node;
                                break follow_path_5797;
                            }
                        } else if (depth < height) {
                            nodeParent = nodeParent;
                            jsonParent = jsonParent;
                            depth = depth + 1;
                            continue follow_path_5797;
                        }
                        nodeParent = node;
                        break follow_path_5797;
                    } while (true);
                node = nodeParent;
            }
            if (node != null || boxed === true) {
                if (nodeType === ERROR) {
                    if (nodeExpires !== 1) {
                        var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                        if (node !== head$4) {
                            next$4 && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                            prev$4 && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                            (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                            root$5.__head = root$5.__next = head$4 = node;
                            head$4.__next = next$4;
                            head$4.__prev = void 0;
                        }
                        if (tail$4 == null || node === tail$4) {
                            root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                        }
                        root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                    }
                    var nodeType$2 = node && node[$TYPE] || void 0;
                    nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                    var pbv = Object.create(null);
                    var src$6 = requestedPath, i$7 = -1, n$6 = src$6.length, req = new Array(n$6);
                    while (++i$7 < n$6) {
                        req[i$7] = src$6[i$7];
                    }
                    if (appendNullKey === true) {
                        req[req.length] = null;
                    }
                    pbv.path = req;
                    if (boxed === true) {
                        pbv.value = node;
                    } else {
                        var dest = nodeValue, src$7 = dest, x$6;
                        if (dest != null && typeof dest === 'object') {
                            dest = Array.isArray(src$7) && [] || Object.create(null);
                            for (x$6 in src$7) {
                                !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest[x$6] = src$7[x$6]);
                            }
                        }
                        pbv.value = dest;
                    }
                    errors[errors.length] = pbv;
                }
                hasValue || (hasValue = jsonParent != null);
                var src$8 = optimizedPath, i$8 = -1, n$7 = src$8.length, opt = new Array(n$7);
                while (++i$8 < n$7) {
                    opt[i$8] = src$8[i$8];
                }
                var src$9 = requestedPath, i$9 = -1, n$8 = src$9.length, req$2 = new Array(n$8);
                while (++i$9 < n$8) {
                    req$2[i$9] = src$9[i$9];
                }
                if (appendNullKey === true) {
                    req$2[req$2.length] = null;
                }
                requestedPaths[requestedPaths.length] = req$2;
                optimizedPaths[optimizedPaths.length] = opt;
            }
            if (boxed === false && node == null || refreshing === true) {
                var src$10 = boundPath, i$10 = -1, n$9 = src$10.length, req$3 = new Array(n$9);
                while (++i$10 < n$9) {
                    req$3[i$10] = src$10[i$10];
                }
                var src$11 = optimizedPath, i$11 = -1, n$10 = src$11.length, opt$2 = new Array(n$10);
                while (++i$11 < n$10) {
                    opt$2[i$11] = src$11[i$11];
                }
                var reqLen = req$3.length - 1, optLen = opt$2.length - 1, i$12 = -1, n$11 = requestedPath.length, j$2 = depth, k = height, x$7;
                while (++i$12 < n$11) {
                    req$3[++reqLen] = path[i$12 + boundLength] != null && typeof path[i$12 + boundLength] === 'object' && [requestedPath[i$12]] || requestedPath[i$12];
                }
                i$12 = -1;
                n$11 = height - depth;
                while (++i$12 < n$11) {
                    x$7 = req$3[++reqLen] = path[++j$2 + boundLength];
                    x$7 != null && (opt$2[++optLen] = x$7);
                }
                req$3.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req$3;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
            }
            appendNullKey = false;
            var key$3;
            depth = depth;
            unroll_5646:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_5646;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_5646;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_5646;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_5646;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_5646;
                    }
                    depth = path.depth = depth;
                    break unroll_5646;
                } while (true);
            depth = depth;
        }
    }
    values && (values[0] = hasValue && {
        paths: requestedPaths,
        jsong: jsons[-1]
    } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function getValueSync(model, path) {
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), _cache = model._cache || {}, errorSelector = model._errorSelector || function (x$2, y) {
            return y;
        }, optimizedPath = [], appendNullKey = false, depth = 0, length = 0, height = 0, reference, refIndex = 0, refDepth = 0, refLength = 0, refHeight = 0, nodeRoot = _cache, nodeParent = nodeRoot, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var key, isKeySet;
    path = path;
    height = (length = path.length) - 1;
    nodeParent = nodeRoot;
    nodeType = nodeParent && nodeParent[$TYPE] || void 0;
    nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
    if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
        node = node = nodeParent;
    } else {
        nodeParent = nodeRoot;
        depth = depth;
        follow_path_7314:
            do {
                key = path[depth];
                if (isKeySet = key != null && typeof key === 'object') {
                    if (Array.isArray(key)) {
                        if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    } else {
                        key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                    }
                }
                if (key === __NULL) {
                    key = null;
                }
                if (key != null) {
                    if (depth < height) {
                        optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                        node = nodeParent[key];
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        nodeTimestamp = node && node[$TIMESTAMP];
                        nodeExpires = node && node[$EXPIRES];
                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                            do {
                                if (nodeExpires !== 1) {
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                    if (node !== head) {
                                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                        root$2.__head = root$2.__next = head = node;
                                        head.__next = next;
                                        head.__prev = void 0;
                                    }
                                    if (tail == null || node === tail) {
                                        root$2.__tail = root$2.__prev = tail = prev || node;
                                    }
                                    root$2 = head = tail = next = prev = void 0;
                                }
                                refIndex = depth + 1;
                                refDepth = 0;
                                var location = (nodeValue[__CONTAINER] || nodeValue)[__CONTEXT];
                                if (location !== void 0) {
                                    node = location;
                                    refHeight = (refLength = nodeValue.length) - 1;
                                    while (refDepth < refLength) {
                                        optimizedPath[refDepth] = nodeValue[refDepth++];
                                    }
                                    optimizedPath.length = refLength;
                                } else {
                                    var key$2, isKeySet$2;
                                    reference = nodeValue;
                                    refHeight = (refLength = reference.length) - 1;
                                    nodeParent = nodeRoot;
                                    nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                    if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                        node = node = nodeParent;
                                    } else {
                                        nodeParent = nodeRoot;
                                        refDepth = refDepth;
                                        follow_path_7489:
                                            do {
                                                key$2 = reference[refDepth];
                                                isKeySet$2 = false;
                                                if (key$2 != null) {
                                                    if (refDepth < refHeight) {
                                                        optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                        node = nodeParent[key$2];
                                                        nodeType = node && node[$TYPE] || void 0;
                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                        nodeExpires = node && node[$EXPIRES];
                                                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                        }
                                                        if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                            nodeParent = node;
                                                            break follow_path_7489;
                                                        }
                                                        nodeParent = node;
                                                        refDepth = refDepth + 1;
                                                        continue follow_path_7489;
                                                    } else if (refDepth === refHeight) {
                                                        optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                        node = nodeParent[key$2];
                                                        nodeType = node && node[$TYPE] || void 0;
                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                        nodeExpires = node && node[$EXPIRES];
                                                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                        }
                                                        if (node != null) {
                                                            var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                            // Set up the hard-link so we don't have to do all
                                                            // this work the next time we follow this reference.
                                                            if (refContext === void 0) {
                                                                // create a back reference
                                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                                node[__REF + backRefs] = refContainer;
                                                                node[__REFS_LENGTH] = backRefs + 1;
                                                                // create a hard reference
                                                                refContainer[__REF_INDEX] = backRefs;
                                                                refContainer[__CONTEXT] = node;
                                                                refContainer = backRefs = void 0;
                                                            }
                                                            ;
                                                        }
                                                        appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                        nodeParent = node;
                                                        break follow_path_7489;
                                                    }
                                                } else if (refDepth < refHeight) {
                                                    nodeParent = node;
                                                    refDepth = refDepth + 1;
                                                    continue follow_path_7489;
                                                }
                                                nodeParent = node;
                                                break follow_path_7489;
                                            } while (true);
                                        node = nodeParent;
                                    }
                                }
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                            } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                            if (node == null) {
                                while (refDepth <= refHeight) {
                                    optimizedPath[refDepth] = reference[refDepth++];
                                }
                            }
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            nodeParent = node;
                            break follow_path_7314;
                        }
                        nodeParent = node;
                        depth = depth + 1;
                        continue follow_path_7314;
                    } else if (depth === height) {
                        optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                        node = nodeParent[key];
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        nodeTimestamp = node && node[$TIMESTAMP];
                        nodeExpires = node && node[$EXPIRES];
                        if (node != null && typeof node === 'object') {
                            if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            } else {
                                if (nodeExpires !== 1) {
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2 = node.__next, prev$2 = node.__prev;
                                    if (node !== head$2) {
                                        next$2 && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                                        prev$2 && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                                        (next$2 = head$2) && (head$2 != null && typeof head$2 === 'object') && (head$2.__prev = node);
                                        root$3.__head = root$3.__next = head$2 = node;
                                        head$2.__next = next$2;
                                        head$2.__prev = void 0;
                                    }
                                    if (tail$2 == null || node === tail$2) {
                                        root$3.__tail = root$3.__prev = tail$2 = prev$2 || node;
                                    }
                                    root$3 = head$2 = tail$2 = next$2 = prev$2 = void 0;
                                }
                            }
                        }
                        nodeParent = node;
                        break follow_path_7314;
                    }
                } else if (depth < height) {
                    nodeParent = node;
                    depth = depth + 1;
                    continue follow_path_7314;
                }
                nodeParent = node;
                break follow_path_7314;
            } while (true);
        node = nodeParent;
    }
    optimizedPath.length = depth + (refLength - refIndex) + 1;
    if (boxed === false) {
        var dest = nodeValue, src = dest, x;
        if (dest != null && typeof dest === 'object') {
            dest = Array.isArray(src) && [] || Object.create(null);
            for (x in src) {
                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
            }
        }
        node = dest;
    }
    if (nodeType === ERROR) {
        node[$TYPE] = ERROR;
    }
    var shorted = appendNullKey;
    while (!shorted && ++depth <= height) {
        shorted = path[depth] != null;
    }
    return {
        value: node,
        path: optimizedPath,
        shorted: shorted
    };
}
function setValueSync(model, path, value, errorSelector) {
    ++__GENERATION_VERSION;
    if (Array.isArray(path) === false) {
        if (typeof errorSelector !== 'function') {
            errorSelector = value;
        }
        value = path.value;
        path = path.path;
    }
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$2, y) {
        return y;
    });
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), _cache = model._cache || {}, optimizedPath = [], appendNullKey = false, depth = 0, length = 0, height = 0, reference, refIndex = 0, refDepth = 0, refLength = 0, refHeight = 0, nodeRoot = _cache, nodeParent = nodeRoot, node = nodeParent, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var key, isKeySet;
    path = path;
    height = (length = path.length) - 1;
    nodeParent = nodeRoot;
    nodeType = nodeParent && nodeParent[$TYPE] || void 0;
    nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
    if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
        node = node = nodeParent;
    } else {
        nodeParent = nodeRoot;
        depth = depth;
        follow_path_4999:
            do {
                key = path[depth];
                if (isKeySet = key != null && typeof key === 'object') {
                    if (Array.isArray(key)) {
                        if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                        }
                    } else {
                        key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                    }
                }
                if (key === __NULL) {
                    key = null;
                }
                if (key != null) {
                    if (depth < height) {
                        optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                        node = nodeParent[key];
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        nodeTimestamp = node && node[$TIMESTAMP];
                        nodeExpires = node && node[$EXPIRES];
                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                            do {
                                if (nodeExpires !== 1) {
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next = node.__next, prev = node.__prev;
                                    if (node !== head) {
                                        next && (next != null && typeof next === 'object') && (next.__prev = prev);
                                        prev && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                        (next = head) && (head != null && typeof head === 'object') && (head.__prev = node);
                                        root$2.__head = root$2.__next = head = node;
                                        head.__next = next;
                                        head.__prev = void 0;
                                    }
                                    if (tail == null || node === tail) {
                                        root$2.__tail = root$2.__prev = tail = prev || node;
                                    }
                                    root$2 = head = tail = next = prev = void 0;
                                }
                                refIndex = depth + 1;
                                refDepth = 0;
                                var location = (nodeValue[__CONTAINER] || nodeValue)[__CONTEXT];
                                if (location !== void 0) {
                                    node = location;
                                    refHeight = (refLength = nodeValue.length) - 1;
                                    while (refDepth < refLength) {
                                        optimizedPath[refDepth] = nodeValue[refDepth++];
                                    }
                                    optimizedPath.length = refLength;
                                } else {
                                    var key$2, isKeySet$2;
                                    reference = nodeValue;
                                    refHeight = (refLength = reference.length) - 1;
                                    nodeParent = nodeRoot;
                                    nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                    if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                        node = node = nodeParent;
                                    } else {
                                        nodeParent = nodeRoot;
                                        refDepth = refDepth;
                                        follow_path_5174:
                                            do {
                                                key$2 = reference[refDepth];
                                                isKeySet$2 = false;
                                                if (key$2 != null) {
                                                    if (refDepth < refHeight) {
                                                        optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                        node = nodeParent[key$2];
                                                        nodeType = node && node[$TYPE] || void 0;
                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                        nodeExpires = node && node[$EXPIRES];
                                                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                        }
                                                        if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                            nodeParent = node;
                                                            break follow_path_5174;
                                                        }
                                                        nodeParent = node;
                                                        refDepth = refDepth + 1;
                                                        continue follow_path_5174;
                                                    } else if (refDepth === refHeight) {
                                                        optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                        node = nodeParent[key$2];
                                                        nodeType = node && node[$TYPE] || void 0;
                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                        nodeExpires = node && node[$EXPIRES];
                                                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                        }
                                                        if (node != null) {
                                                            var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                            // Set up the hard-link so we don't have to do all
                                                            // this work the next time we follow this reference.
                                                            if (refContext === void 0) {
                                                                // create a back reference
                                                                var backRefs = node[__REFS_LENGTH] || 0;
                                                                node[__REF + backRefs] = refContainer;
                                                                node[__REFS_LENGTH] = backRefs + 1;
                                                                // create a hard reference
                                                                refContainer[__REF_INDEX] = backRefs;
                                                                refContainer[__CONTEXT] = node;
                                                                refContainer = backRefs = void 0;
                                                            }
                                                            ;
                                                        }
                                                        appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                        nodeParent = node;
                                                        break follow_path_5174;
                                                    }
                                                } else if (refDepth < refHeight) {
                                                    nodeParent = node;
                                                    refDepth = refDepth + 1;
                                                    continue follow_path_5174;
                                                }
                                                nodeParent = node;
                                                break follow_path_5174;
                                            } while (true);
                                        node = nodeParent;
                                    }
                                }
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                            } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                            if (node == null) {
                                while (refDepth <= refHeight) {
                                    optimizedPath[refDepth] = reference[refDepth++];
                                }
                            }
                        }
                        if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                            nodeParent = node;
                            break follow_path_4999;
                        }
                        nodeParent = node;
                        depth = depth + 1;
                        continue follow_path_4999;
                    } else if (depth === height) {
                        optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                        node = nodeParent[key];
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        nodeTimestamp = node && node[$TIMESTAMP];
                        nodeExpires = node && node[$EXPIRES];
                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                        }
                        nodeType = value && value[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                        nodeTimestamp = value && value[$TIMESTAMP];
                        nodeExpires = value && value[$EXPIRES];
                        var newNode, size_offset, leafSize = node && node[$SIZE] || 0;
                        newNode = value;
                        if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                            nodeType = 'array';
                            newNode[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                            delete nodeValue[$SIZE];
                            nodeValue[__CONTAINER] = newNode;
                        } else if (nodeType === SENTINEL) {
                            newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                        } else if (nodeType === ERROR) {
                            newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                        } else if (!(value != null && typeof value === 'object')) {
                            nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            nodeType = 'sentinel';
                            newNode = { 'value': nodeValue };
                            newNode[$TYPE] = nodeType;
                            newNode[$SIZE] = nodeSize;
                        } else {
                            nodeType = newNode[$TYPE] = nodeType || 'leaf';
                            newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                        }
                        ;
                        if (node != null && node !== newNode) {
                            var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = newNode[__REFS_LENGTH] || 0, i = -1, ref;
                            while (++i < nodeRefsLength) {
                                if ((ref = node[__REF + i]) !== void 0) {
                                    ref[__CONTEXT] = newNode;
                                    newNode[__REF + (destRefsLength + i)] = ref;
                                    node[__REF + i] = void 0;
                                }
                            }
                            newNode[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                            node[__REFS_LENGTH] = ref = void 0;
                            var invParent = nodeParent, invChild = node, invKey = key, keys, index, offset, childType, childValue, isBranch, stack = [
                                    nodeParent,
                                    invKey,
                                    node
                                ], depth$2 = 0;
                            while (depth$2 > -1) {
                                nodeParent = stack[offset = depth$2 * 8];
                                invKey = stack[offset + 1];
                                node = stack[offset + 2];
                                if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                                    childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                                if ((isBranch = stack[offset + 5]) === void 0) {
                                    isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                }
                                if (isBranch === true) {
                                    if ((keys = stack[offset + 6]) === void 0) {
                                        keys = stack[offset + 6] = [];
                                        index = -1;
                                        for (invKey in node) {
                                            !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys[++index] = invKey);
                                        }
                                    }
                                    index = stack[offset + 7] || (stack[offset + 7] = 0);
                                    if (index < keys.length) {
                                        stack[offset + 7] = index + 1;
                                        stack[offset = ++depth$2 * 8] = node;
                                        stack[offset + 1] = invKey = keys[index];
                                        stack[offset + 2] = node[invKey];
                                        continue;
                                    }
                                }
                                var ref$2 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                if (ref$2 && Array.isArray(ref$2)) {
                                    destination = ref$2[__CONTEXT];
                                    if (destination) {
                                        var i$2 = (ref$2[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                        while (++i$2 <= n) {
                                            destination[__REF + i$2] = destination[__REF + (i$2 + 1)];
                                        }
                                        destination[__REFS_LENGTH] = n;
                                        ref$2[__REF_INDEX] = ref$2[__CONTEXT] = destination = void 0;
                                    }
                                }
                                var ref$3, i$3 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                while (++i$3 < n$2) {
                                    if ((ref$3 = node[__REF + i$3]) !== void 0) {
                                        ref$3[__CONTEXT] = node[__REF + i$3] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                                    (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                                    (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                                    node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                                    node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                                    node.__next = node.__prev = void 0;
                                    head$2 = tail$2 = next$2 = prev$2 = void 0;
                                }
                                nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                delete stack[offset + 0];
                                delete stack[offset + 1];
                                delete stack[offset + 2];
                                delete stack[offset + 3];
                                delete stack[offset + 4];
                                delete stack[offset + 5];
                                delete stack[offset + 6];
                                delete stack[offset + 7];
                                --depth$2;
                            }
                            nodeParent = invParent;
                            node = invChild;
                        }
                        nodeParent[key] = node = newNode;
                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                        size_offset = leafSize - nodeSize;
                        var node$2 = nodeParent, child = node, stack$2 = [];
                        while (node = nodeParent) {
                            nodeParent = node[__PARENT];
                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                                var ref$4 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                if (ref$4 && Array.isArray(ref$4)) {
                                    destination$2 = ref$4[__CONTEXT];
                                    if (destination$2) {
                                        var i$4 = (ref$4[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                        while (++i$4 <= n$3) {
                                            destination$2[__REF + i$4] = destination$2[__REF + (i$4 + 1)];
                                        }
                                        destination$2[__REFS_LENGTH] = n$3;
                                        ref$4[__REF_INDEX] = ref$4[__CONTEXT] = destination$2 = void 0;
                                    }
                                }
                                var ref$5, i$5 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                while (++i$5 < n$4) {
                                    if ((ref$5 = node[__REF + i$5]) !== void 0) {
                                        ref$5[__CONTEXT] = node[__REF + i$5] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3, prev$3;
                                    (next$3 = node.__next) && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                    (prev$3 = node.__prev) && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                    node === head$3 && (root$4.__head = root$4.__next = head$3 = next$3);
                                    node === tail$3 && (root$4.__tail = root$4.__prev = tail$3 = prev$3);
                                    node.__next = node.__prev = void 0;
                                    head$3 = tail$3 = next$3 = prev$3 = void 0;
                                }
                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                var depth$3 = 0, references, ref$6, i$6, k, n$5;
                                while (depth$3 > -1) {
                                    if ((references = stack$2[depth$3]) === void 0) {
                                        i$6 = k = -1;
                                        n$5 = node[__REFS_LENGTH] || 0;
                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                        node[__GENERATION] = __GENERATION_GUID++;
                                        if ((ref$6 = node[__PARENT]) !== void 0 && ref$6[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            stack$2[depth$3] = references = new Array(n$5 + 1);
                                            references[++k] = ref$6;
                                        } else if (n$5 > 0) {
                                            stack$2[depth$3] = references = new Array(n$5);
                                        }
                                        while (++i$6 < n$5) {
                                            if ((ref$6 = node[__REF + i$6]) !== void 0 && ref$6[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                references[++k] = ref$6;
                                            }
                                        }
                                    }
                                    if ((node = references && references.pop()) !== void 0) {
                                        ++depth$3;
                                    } else {
                                        stack$2[depth$3--] = void 0;
                                    }
                                }
                            }
                        }
                        nodeParent = node$2;
                        node = child;
                        if (node != null && typeof node === 'object') {
                            if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            } else {
                                if (nodeExpires !== 1) {
                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4 = node.__next, prev$4 = node.__prev;
                                    if (node !== head$4) {
                                        next$4 && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                        prev$4 && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                        (next$4 = head$4) && (head$4 != null && typeof head$4 === 'object') && (head$4.__prev = node);
                                        root$5.__head = root$5.__next = head$4 = node;
                                        head$4.__next = next$4;
                                        head$4.__prev = void 0;
                                    }
                                    if (tail$4 == null || node === tail$4) {
                                        root$5.__tail = root$5.__prev = tail$4 = prev$4 || node;
                                    }
                                    root$5 = head$4 = tail$4 = next$4 = prev$4 = void 0;
                                }
                            }
                        }
                        nodeParent = node;
                        break follow_path_4999;
                    }
                } else if (depth < height) {
                    nodeParent = node;
                    depth = depth + 1;
                    continue follow_path_4999;
                }
                nodeParent = node;
                break follow_path_4999;
            } while (true);
        node = nodeParent;
    }
    optimizedPath.length = depth + (refLength - refIndex) + 1;
    if (boxed === false) {
        var dest = nodeValue, src = dest, x;
        if (dest != null && typeof dest === 'object') {
            dest = Array.isArray(src) && [] || Object.create(null);
            for (x in src) {
                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src[x]);
            }
        }
        node = dest;
    }
    if (nodeType === ERROR) {
        node[$TYPE] = ERROR;
    }
    var shorted = appendNullKey;
    while (!shorted && ++depth <= height) {
        shorted = path[depth] != null;
    }
    return {
        value: node,
        path: optimizedPath,
        shorted: shorted
    };
}
function invalidatePathMaps(model, pathSets, values, errorSelector) {
    var nodeRoot = model._cache || (model._cache = {}), nodeParent = getBoundContext(model), node = nodeParent, root = model._root || model, expired = root.expired || (root.expired = []), appendNullKey = false, pathMap, length = 0, height = 0, depth = 0, refIndex = 0, refDepth = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var pathMapStack = pathSets.pathMapStack || (pathSets.pathMapStack = []);
    var nodes = pathSets.nodes || (pathSets.nodes = []);
    var optimizedPath = pathSets.optimizedPath || (pathSets.optimizedPath = []);
    nodes[-1] = nodeParent;
    var index = -1, count = pathSets.length;
    while (++index < count) {
        pathMapStack[0] = pathMap = pathSets[index];
        depth = 0;
        while (depth > -1) {
            var offset, keys, index$2, key, isKeySet;
            pathMap = pathMap;
            height = (length = depth) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                node = nodeParent[key];
                nodeSize = (node && node[$SIZE] || 0) * -1;
                var invParent = nodeParent, invChild = node, invKey = key, keys$2, index$3, offset$2, childType, childValue, isBranch, stack = [
                        nodeParent,
                        invKey,
                        node
                    ], depth$2 = 0;
                while (depth$2 > -1) {
                    nodeParent = stack[offset$2 = depth$2 * 8];
                    invKey = stack[offset$2 + 1];
                    node = stack[offset$2 + 2];
                    if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                        childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                    }
                    childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                    if ((isBranch = stack[offset$2 + 5]) === void 0) {
                        isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                    }
                    if (isBranch === true) {
                        if ((keys$2 = stack[offset$2 + 6]) === void 0) {
                            keys$2 = stack[offset$2 + 6] = [];
                            index$3 = -1;
                            for (invKey in node) {
                                !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys$2[++index$3] = invKey);
                            }
                        }
                        index$3 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                        if (index$3 < keys$2.length) {
                            stack[offset$2 + 7] = index$3 + 1;
                            stack[offset$2 = ++depth$2 * 8] = node;
                            stack[offset$2 + 1] = invKey = keys$2[index$3];
                            stack[offset$2 + 2] = node[invKey];
                            continue;
                        }
                    }
                    var ref = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                    if (ref && Array.isArray(ref)) {
                        destination = ref[__CONTEXT];
                        if (destination) {
                            var i = (ref[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                            while (++i <= n) {
                                destination[__REF + i] = destination[__REF + (i + 1)];
                            }
                            destination[__REFS_LENGTH] = n;
                            ref[__REF_INDEX] = ref[__CONTEXT] = destination = void 0;
                        }
                    }
                    var ref$2, i$2 = -1, n$2 = node[__REFS_LENGTH] || 0;
                    while (++i$2 < n$2) {
                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                            ref$2[__CONTEXT] = node[__REF + i$2] = void 0;
                        }
                    }
                    node[__REFS_LENGTH] = void 0;
                    if (node != null && typeof node === 'object') {
                        var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                        (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                        (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                        node === head && (root$2.__head = root$2.__next = head = next);
                        node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                        node.__next = node.__prev = void 0;
                        head = tail = next = prev = void 0;
                    }
                    nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                    delete stack[offset$2 + 0];
                    delete stack[offset$2 + 1];
                    delete stack[offset$2 + 2];
                    delete stack[offset$2 + 3];
                    delete stack[offset$2 + 4];
                    delete stack[offset$2 + 5];
                    delete stack[offset$2 + 6];
                    delete stack[offset$2 + 7];
                    --depth$2;
                }
                nodeParent = invParent;
                node = invChild;
                if (nodeSize > 0) {
                    var child = node, node$2 = nodeParent;
                    while (node) {
                        nodeParent = nodeParent[__PARENT];
                        if ((node[$SIZE] = (node && node[$SIZE] || 0) - nodeSize) <= 0 && nodeParent) {
                            var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                            if (ref$3 && Array.isArray(ref$3)) {
                                destination$2 = ref$3[__CONTEXT];
                                if (destination$2) {
                                    var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                    while (++i$3 <= n$3) {
                                        destination$2[__REF + i$3] = destination$2[__REF + (i$3 + 1)];
                                    }
                                    destination$2[__REFS_LENGTH] = n$3;
                                    ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination$2 = void 0;
                                }
                            }
                            var ref$4, i$4 = -1, n$4 = node[__REFS_LENGTH] || 0;
                            while (++i$4 < n$4) {
                                if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                    ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                }
                            }
                            node[__REFS_LENGTH] = void 0;
                            if (node != null && typeof node === 'object') {
                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                                (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                                (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                                node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                                node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                                node.__next = node.__prev = void 0;
                                head$2 = tail$2 = next$2 = prev$2 = void 0;
                            }
                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                        }
                        node = nodeParent;
                    }
                    node = child;
                    nodeParent = node$2;
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                depth = depth;
                follow_path_map_8602:
                    do {
                        if ((pathMap = pathMapStack[offset = depth * 4]) != null && typeof pathMap === 'object' && (keys = pathMapStack[offset + 1] || (pathMapStack[offset + 1] = Object.keys(pathMap))) && ((index$2 = pathMapStack[offset + 2] || (pathMapStack[offset + 2] = 0)) || true) && ((key = pathMapStack[offset + 3]) || true) && ((isKeySet = keys.length > 1) || keys.length > 0)) {
                            key = keys[index$2];
                            if (key == __NULL) {
                                pathMapStack[offset = 3 * (depth + 1)] = pathMap[__NULL];
                                pathMapStack[offset + 1] = keys;
                                pathMapStack[offset + 2] = 0;
                                nodeParent = nodes[depth] = node;
                                depth = depth + 1;
                                continue follow_path_map_8602;
                            } else if (key === $SIZE || (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT))) {
                                nodeParent = node;
                                break follow_path_map_8602;
                            } else if (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') {
                                nodeParent[key] || (nodeParent[key] = pathMap[key]);
                                nodeParent = node;
                                break follow_path_map_8602;
                            } else {
                                if (isKeySet = key != null && typeof key === 'object') {
                                    if (Array.isArray(key)) {
                                        if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                            key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                        }
                                    } else {
                                        key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                }
                                if (key === __NULL) {
                                    key = null;
                                }
                                pathMapStack[offset = 4 * (depth + 1)] = pathMap = pathMap[key];
                                if (pathMap != null && typeof pathMap === 'object' && pathMap[$TYPE] === void 0 && Array.isArray(pathMap) === false && (keys = Object.keys(pathMap)) && keys.length > 0) {
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        do {
                                            if (nodeExpires !== 1) {
                                                var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                                if (node !== head$3) {
                                                    next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                                    prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                                    (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                                    root$4.__head = root$4.__next = head$3 = node;
                                                    head$3.__next = next$3;
                                                    head$3.__prev = void 0;
                                                }
                                                if (tail$3 == null || node === tail$3) {
                                                    root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                                                }
                                                root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                                            }
                                            refIndex = depth + 1;
                                            refDepth = 0;
                                            var location = (nodeValue[__CONTAINER] || nodeValue)[__CONTEXT];
                                            if (location !== void 0) {
                                                node = location;
                                                refHeight = (refLength = nodeValue.length) - 1;
                                                while (refDepth < refLength) {
                                                    optimizedPath[refDepth] = nodeValue[refDepth++];
                                                }
                                                optimizedPath.length = refLength;
                                            } else {
                                                var key$2, isKeySet$2;
                                                reference = nodeValue;
                                                refHeight = (refLength = reference.length) - 1;
                                                nodeParent = nodeRoot;
                                                nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                                nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                                if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                    node = node = nodeParent;
                                                } else {
                                                    nodeParent = nodeRoot;
                                                    refDepth = refDepth;
                                                    follow_path_8782:
                                                        do {
                                                            key$2 = reference[refDepth];
                                                            isKeySet$2 = false;
                                                            if (key$2 != null) {
                                                                if (refDepth < refHeight) {
                                                                    node = nodeParent[key$2];
                                                                    nodeType = node && node[$TYPE] || void 0;
                                                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                    nodeTimestamp = node && node[$TIMESTAMP];
                                                                    nodeExpires = node && node[$EXPIRES];
                                                                    if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                        nodeParent = node;
                                                                        break follow_path_8782;
                                                                    }
                                                                    nodeParent = node;
                                                                    refDepth = refDepth + 1;
                                                                    continue follow_path_8782;
                                                                } else if (refDepth === refHeight) {
                                                                    node = nodeParent[key$2];
                                                                    nodeType = node && node[$TYPE] || void 0;
                                                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                    nodeTimestamp = node && node[$TIMESTAMP];
                                                                    nodeExpires = node && node[$EXPIRES];
                                                                    if (node != null) {
                                                                        var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                        // Set up the hard-link so we don't have to do all
                                                                        // this work the next time we follow this reference.
                                                                        if (refContext === void 0) {
                                                                            // create a back reference
                                                                            var backRefs = node[__REFS_LENGTH] || 0;
                                                                            node[__REF + backRefs] = refContainer;
                                                                            node[__REFS_LENGTH] = backRefs + 1;
                                                                            // create a hard reference
                                                                            refContainer[__REF_INDEX] = backRefs;
                                                                            refContainer[__CONTEXT] = node;
                                                                            refContainer = backRefs = void 0;
                                                                        }
                                                                        ;
                                                                    }
                                                                    appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                    nodeParent = node;
                                                                    break follow_path_8782;
                                                                }
                                                            } else if (refDepth < refHeight) {
                                                                nodeParent = node;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_8782;
                                                            }
                                                            nodeParent = node;
                                                            break follow_path_8782;
                                                        } while (true);
                                                    node = nodeParent;
                                                }
                                            }
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeExpires = node && node[$EXPIRES];
                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                        } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                        if (node == null) {
                                            while (refDepth <= refHeight) {
                                                optimizedPath[refDepth] = reference[refDepth++];
                                            }
                                        }
                                    }
                                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                        nodeParent = node;
                                        break follow_path_map_8602;
                                    }
                                    pathMapStack[offset + 1] = keys;
                                    pathMapStack[offset + 3] = key;
                                    nodeParent = nodes[depth] = node;
                                    depth = depth + 1;
                                    continue follow_path_map_8602;
                                }
                            }
                        }
                        if (key != null) {
                            node = nodeParent[key];
                            nodeSize = (node && node[$SIZE] || 0) * -1;
                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$4, offset$3, childType$2, childValue$2, isBranch$2, stack$2 = [
                                    nodeParent,
                                    invKey$2,
                                    node
                                ], depth$3 = 0;
                            while (depth$3 > -1) {
                                nodeParent = stack$2[offset$3 = depth$3 * 8];
                                invKey$2 = stack$2[offset$3 + 1];
                                node = stack$2[offset$3 + 2];
                                if ((childType$2 = stack$2[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                    childType$2 = stack$2[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue$2 = stack$2[offset$3 + 4] || (stack$2[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                if ((isBranch$2 = stack$2[offset$3 + 5]) === void 0) {
                                    isBranch$2 = stack$2[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                }
                                if (isBranch$2 === true) {
                                    if ((keys$3 = stack$2[offset$3 + 6]) === void 0) {
                                        keys$3 = stack$2[offset$3 + 6] = [];
                                        index$4 = -1;
                                        for (invKey$2 in node) {
                                            !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$3[++index$4] = invKey$2);
                                        }
                                    }
                                    index$4 = stack$2[offset$3 + 7] || (stack$2[offset$3 + 7] = 0);
                                    if (index$4 < keys$3.length) {
                                        stack$2[offset$3 + 7] = index$4 + 1;
                                        stack$2[offset$3 = ++depth$3 * 8] = node;
                                        stack$2[offset$3 + 1] = invKey$2 = keys$3[index$4];
                                        stack$2[offset$3 + 2] = node[invKey$2];
                                        continue;
                                    }
                                }
                                var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                if (ref$5 && Array.isArray(ref$5)) {
                                    destination$3 = ref$5[__CONTEXT];
                                    if (destination$3) {
                                        var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$5 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                        while (++i$5 <= n$5) {
                                            destination$3[__REF + i$5] = destination$3[__REF + (i$5 + 1)];
                                        }
                                        destination$3[__REFS_LENGTH] = n$5;
                                        ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$3 = void 0;
                                    }
                                }
                                var ref$6, i$6 = -1, n$6 = node[__REFS_LENGTH] || 0;
                                while (++i$6 < n$6) {
                                    if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                        ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                    (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                    (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                    node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                    node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                    node.__next = node.__prev = void 0;
                                    head$4 = tail$4 = next$4 = prev$4 = void 0;
                                }
                                nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                delete stack$2[offset$3 + 0];
                                delete stack$2[offset$3 + 1];
                                delete stack$2[offset$3 + 2];
                                delete stack$2[offset$3 + 3];
                                delete stack$2[offset$3 + 4];
                                delete stack$2[offset$3 + 5];
                                delete stack$2[offset$3 + 6];
                                delete stack$2[offset$3 + 7];
                                --depth$3;
                            }
                            nodeParent = invParent$2;
                            node = invChild$2;
                            if (nodeSize > 0) {
                                var child$2 = node, node$3 = nodeParent;
                                while (node) {
                                    nodeParent = nodeParent[__PARENT];
                                    if ((node[$SIZE] = (node && node[$SIZE] || 0) - nodeSize) <= 0 && nodeParent) {
                                        var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                        if (ref$7 && Array.isArray(ref$7)) {
                                            destination$4 = ref$7[__CONTEXT];
                                            if (destination$4) {
                                                var i$7 = (ref$7[__REF_INDEX] || 0) - 1, n$7 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                while (++i$7 <= n$7) {
                                                    destination$4[__REF + i$7] = destination$4[__REF + (i$7 + 1)];
                                                }
                                                destination$4[__REFS_LENGTH] = n$7;
                                                ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$4 = void 0;
                                            }
                                        }
                                        var ref$8, i$8 = -1, n$8 = node[__REFS_LENGTH] || 0;
                                        while (++i$8 < n$8) {
                                            if ((ref$8 = node[__REF + i$8]) !== void 0) {
                                                ref$8[__CONTEXT] = node[__REF + i$8] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        if (node != null && typeof node === 'object') {
                                            var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5, prev$5;
                                            (next$5 = node.__next) && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                            (prev$5 = node.__prev) && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                            node === head$5 && (root$6.__head = root$6.__next = head$5 = next$5);
                                            node === tail$5 && (root$6.__tail = root$6.__prev = tail$5 = prev$5);
                                            node.__next = node.__prev = void 0;
                                            head$5 = tail$5 = next$5 = prev$5 = void 0;
                                        }
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    }
                                    node = nodeParent;
                                }
                                node = child$2;
                                nodeParent = node$3;
                            }
                            appendNullKey = false;
                        }
                        nodeParent = node;
                        break follow_path_map_8602;
                    } while (true);
                node = nodeParent;
            }
            var offset$4, keys$4, index$5;
            while (depth > -1 && (keys$4 = pathMapStack[(offset$4 = 4 * depth) + 1]) && ((index$5 = pathMapStack[offset$4 + 2]) || true) && (pathMapStack[offset$4 + 2] = ++index$5) >= keys$4.length) {
                delete pathMapStack[offset$4 + 0];
                delete pathMapStack[offset$4 + 1];
                delete pathMapStack[offset$4 + 2];
                delete pathMapStack[offset$4 + 3];
                --depth;
            }
        }
    }
    return {
        'values': [],
        'errors': [],
        'requestedPaths': [],
        'optimizedPaths': [],
        'requestedMissingPaths': [],
        'optimizedMissingPaths': []
    };
}
function invalidatePaths(model, pathSets, values, errorSelector) {
    var nodeRoot = model._cache || (model._cache = {}), nodeParent = getBoundContext(model), node = nodeParent, root = model._root || model, expired = root.expired || (root.expired = []), appendNullKey = false, path, length = 0, height = 0, depth = 0, refIndex = 0, refDepth = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    var nodes = pathSets.nodes || (pathSets.nodes = []);
    var optimizedPath = pathSets.optimizedPath || (pathSets.optimizedPath = []);
    nodes[-1] = nodeParent;
    var index = -1, count = pathSets.length;
    while (++index < count) {
        path = pathSets[index];
        depth = 0;
        length = path.length;
        height = length - 1;
        while (depth > -1) {
            var key, isKeySet;
            path = path;
            height = (length = path.length) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                node = nodeParent[key];
                nodeSize = (node && node[$SIZE] || 0) * -1;
                var invParent = nodeParent, invChild = node, invKey = key, keys, index$2, offset, childType, childValue, isBranch, stack = [
                        nodeParent,
                        invKey,
                        node
                    ], depth$2 = 0;
                while (depth$2 > -1) {
                    nodeParent = stack[offset = depth$2 * 8];
                    invKey = stack[offset + 1];
                    node = stack[offset + 2];
                    if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                        childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                    }
                    childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                    if ((isBranch = stack[offset + 5]) === void 0) {
                        isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                    }
                    if (isBranch === true) {
                        if ((keys = stack[offset + 6]) === void 0) {
                            keys = stack[offset + 6] = [];
                            index$2 = -1;
                            for (invKey in node) {
                                !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys[++index$2] = invKey);
                            }
                        }
                        index$2 = stack[offset + 7] || (stack[offset + 7] = 0);
                        if (index$2 < keys.length) {
                            stack[offset + 7] = index$2 + 1;
                            stack[offset = ++depth$2 * 8] = node;
                            stack[offset + 1] = invKey = keys[index$2];
                            stack[offset + 2] = node[invKey];
                            continue;
                        }
                    }
                    var ref = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                    if (ref && Array.isArray(ref)) {
                        destination = ref[__CONTEXT];
                        if (destination) {
                            var i = (ref[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                            while (++i <= n) {
                                destination[__REF + i] = destination[__REF + (i + 1)];
                            }
                            destination[__REFS_LENGTH] = n;
                            ref[__REF_INDEX] = ref[__CONTEXT] = destination = void 0;
                        }
                    }
                    var ref$2, i$2 = -1, n$2 = node[__REFS_LENGTH] || 0;
                    while (++i$2 < n$2) {
                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                            ref$2[__CONTEXT] = node[__REF + i$2] = void 0;
                        }
                    }
                    node[__REFS_LENGTH] = void 0;
                    if (node != null && typeof node === 'object') {
                        var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                        (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                        (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                        node === head && (root$2.__head = root$2.__next = head = next);
                        node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                        node.__next = node.__prev = void 0;
                        head = tail = next = prev = void 0;
                    }
                    nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                    delete stack[offset + 0];
                    delete stack[offset + 1];
                    delete stack[offset + 2];
                    delete stack[offset + 3];
                    delete stack[offset + 4];
                    delete stack[offset + 5];
                    delete stack[offset + 6];
                    delete stack[offset + 7];
                    --depth$2;
                }
                nodeParent = invParent;
                node = invChild;
                if (nodeSize > 0) {
                    var child = node, node$2 = nodeParent;
                    while (node) {
                        nodeParent = nodeParent[__PARENT];
                        if ((node[$SIZE] = (node && node[$SIZE] || 0) - nodeSize) <= 0 && nodeParent) {
                            var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                            if (ref$3 && Array.isArray(ref$3)) {
                                destination$2 = ref$3[__CONTEXT];
                                if (destination$2) {
                                    var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                    while (++i$3 <= n$3) {
                                        destination$2[__REF + i$3] = destination$2[__REF + (i$3 + 1)];
                                    }
                                    destination$2[__REFS_LENGTH] = n$3;
                                    ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination$2 = void 0;
                                }
                            }
                            var ref$4, i$4 = -1, n$4 = node[__REFS_LENGTH] || 0;
                            while (++i$4 < n$4) {
                                if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                    ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                }
                            }
                            node[__REFS_LENGTH] = void 0;
                            if (node != null && typeof node === 'object') {
                                var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                                (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                                (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                                node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                                node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                                node.__next = node.__prev = void 0;
                                head$2 = tail$2 = next$2 = prev$2 = void 0;
                            }
                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                        }
                        node = nodeParent;
                    }
                    node = child;
                    nodeParent = node$2;
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                depth = depth;
                follow_path_10043:
                    do {
                        key = path[depth];
                        if (isKeySet = key != null && typeof key === 'object') {
                            if (Array.isArray(key)) {
                                if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        if (key === __NULL) {
                            key = null;
                        }
                        if (key != null) {
                            if (depth < height) {
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    do {
                                        if (nodeExpires !== 1) {
                                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                                            if (node !== head$3) {
                                                next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                                prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                                (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                                root$4.__head = root$4.__next = head$3 = node;
                                                head$3.__next = next$3;
                                                head$3.__prev = void 0;
                                            }
                                            if (tail$3 == null || node === tail$3) {
                                                root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                                            }
                                            root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                                        }
                                        refIndex = depth + 1;
                                        refDepth = 0;
                                        var location = (nodeValue[__CONTAINER] || nodeValue)[__CONTEXT];
                                        if (location !== void 0) {
                                            node = location;
                                            refHeight = (refLength = nodeValue.length) - 1;
                                            while (refDepth < refLength) {
                                                optimizedPath[refDepth] = nodeValue[refDepth++];
                                            }
                                            optimizedPath.length = refLength;
                                        } else {
                                            var key$2, isKeySet$2;
                                            reference = nodeValue;
                                            refHeight = (refLength = reference.length) - 1;
                                            nodeParent = nodeRoot;
                                            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                node = node = nodeParent;
                                            } else {
                                                nodeParent = nodeRoot;
                                                refDepth = refDepth;
                                                follow_path_10204:
                                                    do {
                                                        key$2 = reference[refDepth];
                                                        isKeySet$2 = false;
                                                        if (key$2 != null) {
                                                            if (refDepth < refHeight) {
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                    nodeParent = node;
                                                                    break follow_path_10204;
                                                                }
                                                                nodeParent = node;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_10204;
                                                            } else if (refDepth === refHeight) {
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null) {
                                                                    var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                    // Set up the hard-link so we don't have to do all
                                                                    // this work the next time we follow this reference.
                                                                    if (refContext === void 0) {
                                                                        // create a back reference
                                                                        var backRefs = node[__REFS_LENGTH] || 0;
                                                                        node[__REF + backRefs] = refContainer;
                                                                        node[__REFS_LENGTH] = backRefs + 1;
                                                                        // create a hard reference
                                                                        refContainer[__REF_INDEX] = backRefs;
                                                                        refContainer[__CONTEXT] = node;
                                                                        refContainer = backRefs = void 0;
                                                                    }
                                                                    ;
                                                                }
                                                                appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                nodeParent = node;
                                                                break follow_path_10204;
                                                            }
                                                        } else if (refDepth < refHeight) {
                                                            nodeParent = node;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_10204;
                                                        }
                                                        nodeParent = node;
                                                        break follow_path_10204;
                                                    } while (true);
                                                node = nodeParent;
                                            }
                                        }
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        nodeExpires = node && node[$EXPIRES];
                                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                    } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                    if (node == null) {
                                        while (refDepth <= refHeight) {
                                            optimizedPath[refDepth] = reference[refDepth++];
                                        }
                                    }
                                }
                                if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                    nodeParent = node;
                                    break follow_path_10043;
                                }
                                nodeParent = nodes[depth] = node;
                                depth = depth + 1;
                                continue follow_path_10043;
                            } else if (depth === height) {
                                node = nodeParent[key];
                                nodeSize = (node && node[$SIZE] || 0) * -1;
                                var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$2, childType$2, childValue$2, isBranch$2, stack$2 = [
                                        nodeParent,
                                        invKey$2,
                                        node
                                    ], depth$3 = 0;
                                while (depth$3 > -1) {
                                    nodeParent = stack$2[offset$2 = depth$3 * 8];
                                    invKey$2 = stack$2[offset$2 + 1];
                                    node = stack$2[offset$2 + 2];
                                    if ((childType$2 = stack$2[offset$2 + 3]) === void 0 || (childType$2 = void 0)) {
                                        childType$2 = stack$2[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$2 = stack$2[offset$2 + 4] || (stack$2[offset$2 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$2 = stack$2[offset$2 + 5]) === void 0) {
                                        isBranch$2 = stack$2[offset$2 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                    }
                                    if (isBranch$2 === true) {
                                        if ((keys$2 = stack$2[offset$2 + 6]) === void 0) {
                                            keys$2 = stack$2[offset$2 + 6] = [];
                                            index$3 = -1;
                                            for (invKey$2 in node) {
                                                !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$2[++index$3] = invKey$2);
                                            }
                                        }
                                        index$3 = stack$2[offset$2 + 7] || (stack$2[offset$2 + 7] = 0);
                                        if (index$3 < keys$2.length) {
                                            stack$2[offset$2 + 7] = index$3 + 1;
                                            stack$2[offset$2 = ++depth$3 * 8] = node;
                                            stack$2[offset$2 + 1] = invKey$2 = keys$2[index$3];
                                            stack$2[offset$2 + 2] = node[invKey$2];
                                            continue;
                                        }
                                    }
                                    var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                    if (ref$5 && Array.isArray(ref$5)) {
                                        destination$3 = ref$5[__CONTEXT];
                                        if (destination$3) {
                                            var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$5 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                            while (++i$5 <= n$5) {
                                                destination$3[__REF + i$5] = destination$3[__REF + (i$5 + 1)];
                                            }
                                            destination$3[__REFS_LENGTH] = n$5;
                                            ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$3 = void 0;
                                        }
                                    }
                                    var ref$6, i$6 = -1, n$6 = node[__REFS_LENGTH] || 0;
                                    while (++i$6 < n$6) {
                                        if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                            ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    if (node != null && typeof node === 'object') {
                                        var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                        (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                        (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                        node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                        node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                        node.__next = node.__prev = void 0;
                                        head$4 = tail$4 = next$4 = prev$4 = void 0;
                                    }
                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    delete stack$2[offset$2 + 0];
                                    delete stack$2[offset$2 + 1];
                                    delete stack$2[offset$2 + 2];
                                    delete stack$2[offset$2 + 3];
                                    delete stack$2[offset$2 + 4];
                                    delete stack$2[offset$2 + 5];
                                    delete stack$2[offset$2 + 6];
                                    delete stack$2[offset$2 + 7];
                                    --depth$3;
                                }
                                nodeParent = invParent$2;
                                node = invChild$2;
                                if (nodeSize > 0) {
                                    var child$2 = node, node$3 = nodeParent;
                                    while (node) {
                                        nodeParent = nodeParent[__PARENT];
                                        if ((node[$SIZE] = (node && node[$SIZE] || 0) - nodeSize) <= 0 && nodeParent) {
                                            var ref$7 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                            if (ref$7 && Array.isArray(ref$7)) {
                                                destination$4 = ref$7[__CONTEXT];
                                                if (destination$4) {
                                                    var i$7 = (ref$7[__REF_INDEX] || 0) - 1, n$7 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$7 <= n$7) {
                                                        destination$4[__REF + i$7] = destination$4[__REF + (i$7 + 1)];
                                                    }
                                                    destination$4[__REFS_LENGTH] = n$7;
                                                    ref$7[__REF_INDEX] = ref$7[__CONTEXT] = destination$4 = void 0;
                                                }
                                            }
                                            var ref$8, i$8 = -1, n$8 = node[__REFS_LENGTH] || 0;
                                            while (++i$8 < n$8) {
                                                if ((ref$8 = node[__REF + i$8]) !== void 0) {
                                                    ref$8[__CONTEXT] = node[__REF + i$8] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            if (node != null && typeof node === 'object') {
                                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5, prev$5;
                                                (next$5 = node.__next) && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                (prev$5 = node.__prev) && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                node === head$5 && (root$6.__head = root$6.__next = head$5 = next$5);
                                                node === tail$5 && (root$6.__tail = root$6.__prev = tail$5 = prev$5);
                                                node.__next = node.__prev = void 0;
                                                head$5 = tail$5 = next$5 = prev$5 = void 0;
                                            }
                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        }
                                        node = nodeParent;
                                    }
                                    node = child$2;
                                    nodeParent = node$3;
                                }
                                appendNullKey = false;
                                nodeParent = node;
                                break follow_path_10043;
                            }
                        } else if (depth < height) {
                            nodeParent = nodeParent;
                            depth = depth + 1;
                            continue follow_path_10043;
                        }
                        nodeParent = node;
                        break follow_path_10043;
                    } while (true);
                node = nodeParent;
            }
            var key$3;
            depth = depth;
            unroll_9802:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_9802;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_9802;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_9802;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_9802;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_9802;
                    }
                    depth = path.depth = depth;
                    break unroll_9802;
                } while (true);
            depth = depth;
        }
    }
    return {
        'values': [],
        'errors': [],
        'requestedPaths': [],
        'optimizedPaths': [],
        'requestedMissingPaths': [],
        'optimizedMissingPaths': []
    };
}
function setPathsAsJSON(model, pathValues, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var boundLength = 0, nodeRoot = model._cache || (model._cache = {}), nodeParent, node;
    if (Array.isArray(boundPath)) {
        nodeParent = nodeRoot;
        boundLength = boundPath.length;
    } else {
        nodeParent = getBoundContext(model);
        boundPath = model._path || [];
    }
    var value, root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$4, y) {
        return y;
    });
    var jsonKeys = pathValues.jsonKeys || (pathValues.jsonKeys = []);
    var nodes = pathValues.nodes || (pathValues.nodes = []);
    var jsons = pathValues.jsons || (pathValues.jsons = []);
    var errors = pathValues.errors || (pathValues.errors = []);
    var refs = pathValues.refs || (pathValues.refs = []);
    var depth = pathValues.depth || (pathValues.depth = 0);
    var refIndex = pathValues.refIndex || (pathValues.refIndex = 0);
    var refDepth = pathValues.refDepth || (pathValues.refDepth = 0);
    var requestedPath = pathValues.requestedPath || (pathValues.requestedPath = []);
    var optimizedPath = pathValues.optimizedPath || (pathValues.optimizedPath = []);
    var requestedPaths = pathValues.requestedPaths || (pathValues.requestedPaths = []);
    var optimizedPaths = pathValues.optimizedPaths || (pathValues.optimizedPaths = []);
    var requestedMissingPaths = pathValues.requestedMissingPaths || (pathValues.requestedMissingPaths = []);
    var optimizedMissingPaths = pathValues.optimizedMissingPaths || (pathValues.optimizedMissingPaths = []);
    var hasValue = pathValues.hasValue || (pathValues.hasValue = false);
    var jsonRoot = pathValues.jsonRoot || (pathValues.jsonRoot = values && values[0]);
    var jsonParent = pathValues.jsonParent || (pathValues.jsonParent = jsonRoot);
    var jsonNode = pathValues.jsonNode || (pathValues.jsonNode = jsonParent);
    var path, length = 0, height = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-2] = jsons;
    jsonKeys[-1] = -1;
    var index = -1, count = pathValues.length;
    while (++index < count) {
        path = pathValues[index];
        value = path.value;
        path = path.path;
        hasValue = false;
        jsons.length = 0;
        jsons[-1] = jsonRoot = values && values[index] || void 0;
        jsonKeys.length = 0;
        jsonKeys[-1] = -1;
        depth = 0;
        length = path.length;
        height = length - 1;
        var ref;
        refs.length = 0;
        while (depth > -1) {
            refIndex = depth;
            while (--refIndex >= -1) {
                if (!!(ref = refs[refIndex])) {
                    refLength = ref.length;
                    var i = -1, j = 0;
                    while (++i < refLength) {
                        optimizedPath[j++] = ref[i];
                    }
                    i = ++refIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    optimizedPath.length = j;
                    break;
                }
            }
            var key, isKeySet;
            path = path;
            height = (length = path.length) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                node = nodeParent[key];
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                nodeTimestamp = node && node[$TIMESTAMP];
                nodeExpires = node && node[$EXPIRES];
                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                nodeType = value && value[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                nodeTimestamp = value && value[$TIMESTAMP];
                nodeExpires = value && value[$EXPIRES];
                var newNode, size_offset, leafSize = node && node[$SIZE] || 0;
                newNode = value;
                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                    nodeType = 'array';
                    newNode[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                    delete nodeValue[$SIZE];
                    nodeValue[__CONTAINER] = newNode;
                } else if (nodeType === SENTINEL) {
                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                } else if (nodeType === ERROR) {
                    newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                } else if (!(value != null && typeof value === 'object')) {
                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                    nodeType = 'sentinel';
                    newNode = { 'value': nodeValue };
                    newNode[$TYPE] = nodeType;
                    newNode[$SIZE] = nodeSize;
                } else {
                    nodeType = newNode[$TYPE] = nodeType || 'leaf';
                    newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                }
                ;
                if (node != null && node !== newNode) {
                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = newNode[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                    while (++i$2 < nodeRefsLength) {
                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                            ref$2[__CONTEXT] = newNode;
                            newNode[__REF + (destRefsLength + i$2)] = ref$2;
                            node[__REF + i$2] = void 0;
                        }
                    }
                    newNode[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                    node[__REFS_LENGTH] = ref$2 = void 0;
                    var invParent = nodeParent, invChild = node, invKey = key, keys, index$2, offset, childType, childValue, isBranch, stack = [
                            nodeParent,
                            invKey,
                            node
                        ], depth$2 = 0;
                    while (depth$2 > -1) {
                        nodeParent = stack[offset = depth$2 * 8];
                        invKey = stack[offset + 1];
                        node = stack[offset + 2];
                        if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                            childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                        }
                        childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                        if ((isBranch = stack[offset + 5]) === void 0) {
                            isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                        }
                        if (isBranch === true) {
                            if ((keys = stack[offset + 6]) === void 0) {
                                keys = stack[offset + 6] = [];
                                index$2 = -1;
                                for (invKey in node) {
                                    !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys[++index$2] = invKey);
                                }
                            }
                            index$2 = stack[offset + 7] || (stack[offset + 7] = 0);
                            if (index$2 < keys.length) {
                                stack[offset + 7] = index$2 + 1;
                                stack[offset = ++depth$2 * 8] = node;
                                stack[offset + 1] = invKey = keys[index$2];
                                stack[offset + 2] = node[invKey];
                                continue;
                            }
                        }
                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                        if (ref$3 && Array.isArray(ref$3)) {
                            destination = ref$3[__CONTEXT];
                            if (destination) {
                                var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                while (++i$3 <= n) {
                                    destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                }
                                destination[__REFS_LENGTH] = n;
                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                            }
                        }
                        var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                        while (++i$4 < n$2) {
                            if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                            (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                            (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            node === head && (root$2.__head = root$2.__next = head = next);
                            node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                            node.__next = node.__prev = void 0;
                            head = tail = next = prev = void 0;
                        }
                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                        delete stack[offset + 0];
                        delete stack[offset + 1];
                        delete stack[offset + 2];
                        delete stack[offset + 3];
                        delete stack[offset + 4];
                        delete stack[offset + 5];
                        delete stack[offset + 6];
                        delete stack[offset + 7];
                        --depth$2;
                    }
                    nodeParent = invParent;
                    node = invChild;
                }
                nodeParent[key] = node = newNode;
                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                size_offset = leafSize - nodeSize;
                var node$2 = nodeParent, child = node, stack$2 = [];
                while (node = nodeParent) {
                    nodeParent = node[__PARENT];
                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                        var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                        if (ref$5 && Array.isArray(ref$5)) {
                            destination$2 = ref$5[__CONTEXT];
                            if (destination$2) {
                                var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                while (++i$5 <= n$3) {
                                    destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                }
                                destination$2[__REFS_LENGTH] = n$3;
                                ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                            }
                        }
                        var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                        while (++i$6 < n$4) {
                            if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                            (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                            (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                            node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                            node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                            node.__next = node.__prev = void 0;
                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                        }
                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                        var depth$3 = 0, references, ref$7, i$7, k, n$5;
                        while (depth$3 > -1) {
                            if ((references = stack$2[depth$3]) === void 0) {
                                i$7 = k = -1;
                                n$5 = node[__REFS_LENGTH] || 0;
                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                node[__GENERATION] = __GENERATION_GUID++;
                                if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    stack$2[depth$3] = references = new Array(n$5 + 1);
                                    references[++k] = ref$7;
                                } else if (n$5 > 0) {
                                    stack$2[depth$3] = references = new Array(n$5);
                                }
                                while (++i$7 < n$5) {
                                    if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        references[++k] = ref$7;
                                    }
                                }
                            }
                            if ((node = references && references.pop()) !== void 0) {
                                ++depth$3;
                            } else {
                                stack$2[depth$3--] = void 0;
                            }
                        }
                    }
                }
                nodeParent = node$2;
                node = child;
                if (node != null && typeof node === 'object') {
                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    } else {
                        if (nodeExpires !== 1) {
                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                            if (node !== head$3) {
                                next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                root$4.__head = root$4.__next = head$3 = node;
                                head$3.__next = next$3;
                                head$3.__prev = void 0;
                            }
                            if (tail$3 == null || node === tail$3) {
                                root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                            }
                            root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                        }
                    }
                }
                if (depth >= boundLength) {
                    jsonKeys[depth] = isKeySet ? key : void 0;
                } else {
                    jsonKeys[depth] = void 0;
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                jsonParent = jsonNode = jsons[depth - 1];
                depth = depth;
                follow_path_6376:
                    do {
                        key = path[depth];
                        if (isKeySet = key != null && typeof key === 'object') {
                            if (Array.isArray(key)) {
                                if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        if (key === __NULL) {
                            key = null;
                        }
                        depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                        if (key != null) {
                            if (depth < height) {
                                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                    nodeType = void 0;
                                    nodeValue = Object.create(null);
                                    nodeSize = node && node[$SIZE] || 0;
                                    if (node != null && node !== nodeValue) {
                                        var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = nodeValue[__REFS_LENGTH] || 0, i$8 = -1, ref$8;
                                        while (++i$8 < nodeRefsLength$2) {
                                            if ((ref$8 = node[__REF + i$8]) !== void 0) {
                                                ref$8[__CONTEXT] = nodeValue;
                                                nodeValue[__REF + (destRefsLength$2 + i$8)] = ref$8;
                                                node[__REF + i$8] = void 0;
                                            }
                                        }
                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                        node[__REFS_LENGTH] = ref$8 = void 0;
                                        var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$2, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                nodeParent,
                                                invKey$2,
                                                node
                                            ], depth$4 = 0;
                                        while (depth$4 > -1) {
                                            nodeParent = stack$3[offset$2 = depth$4 * 8];
                                            invKey$2 = stack$3[offset$2 + 1];
                                            node = stack$3[offset$2 + 2];
                                            if ((childType$2 = stack$3[offset$2 + 3]) === void 0 || (childType$2 = void 0)) {
                                                childType$2 = stack$3[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                            }
                                            childValue$2 = stack$3[offset$2 + 4] || (stack$3[offset$2 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                            if ((isBranch$2 = stack$3[offset$2 + 5]) === void 0) {
                                                isBranch$2 = stack$3[offset$2 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                            }
                                            if (isBranch$2 === true) {
                                                if ((keys$2 = stack$3[offset$2 + 6]) === void 0) {
                                                    keys$2 = stack$3[offset$2 + 6] = [];
                                                    index$3 = -1;
                                                    for (invKey$2 in node) {
                                                        !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$2[++index$3] = invKey$2);
                                                    }
                                                }
                                                index$3 = stack$3[offset$2 + 7] || (stack$3[offset$2 + 7] = 0);
                                                if (index$3 < keys$2.length) {
                                                    stack$3[offset$2 + 7] = index$3 + 1;
                                                    stack$3[offset$2 = ++depth$4 * 8] = node;
                                                    stack$3[offset$2 + 1] = invKey$2 = keys$2[index$3];
                                                    stack$3[offset$2 + 2] = node[invKey$2];
                                                    continue;
                                                }
                                            }
                                            var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                            if (ref$9 && Array.isArray(ref$9)) {
                                                destination$3 = ref$9[__CONTEXT];
                                                if (destination$3) {
                                                    var i$9 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$9 <= n$6) {
                                                        destination$3[__REF + i$9] = destination$3[__REF + (i$9 + 1)];
                                                    }
                                                    destination$3[__REFS_LENGTH] = n$6;
                                                    ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                }
                                            }
                                            var ref$10, i$10 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                            while (++i$10 < n$7) {
                                                if ((ref$10 = node[__REF + i$10]) !== void 0) {
                                                    ref$10[__CONTEXT] = node[__REF + i$10] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            if (node != null && typeof node === 'object') {
                                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                node.__next = node.__prev = void 0;
                                                head$4 = tail$4 = next$4 = prev$4 = void 0;
                                            }
                                            nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            delete stack$3[offset$2 + 0];
                                            delete stack$3[offset$2 + 1];
                                            delete stack$3[offset$2 + 2];
                                            delete stack$3[offset$2 + 3];
                                            delete stack$3[offset$2 + 4];
                                            delete stack$3[offset$2 + 5];
                                            delete stack$3[offset$2 + 6];
                                            delete stack$3[offset$2 + 7];
                                            --depth$4;
                                        }
                                        nodeParent = invParent$2;
                                        node = invChild$2;
                                    }
                                    nodeParent[key] = node = nodeValue;
                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                    while (node = nodeParent) {
                                        nodeParent = node[__PARENT];
                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                            var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                            if (ref$11 && Array.isArray(ref$11)) {
                                                destination$4 = ref$11[__CONTEXT];
                                                if (destination$4) {
                                                    var i$11 = (ref$11[__REF_INDEX] || 0) - 1, n$8 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$11 <= n$8) {
                                                        destination$4[__REF + i$11] = destination$4[__REF + (i$11 + 1)];
                                                    }
                                                    destination$4[__REFS_LENGTH] = n$8;
                                                    ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                }
                                            }
                                            var ref$12, i$12 = -1, n$9 = node[__REFS_LENGTH] || 0;
                                            while (++i$12 < n$9) {
                                                if ((ref$12 = node[__REF + i$12]) !== void 0) {
                                                    ref$12[__CONTEXT] = node[__REF + i$12] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            if (node != null && typeof node === 'object') {
                                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5, prev$5;
                                                (next$5 = node.__next) && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                (prev$5 = node.__prev) && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                node === head$5 && (root$6.__head = root$6.__next = head$5 = next$5);
                                                node === tail$5 && (root$6.__tail = root$6.__prev = tail$5 = prev$5);
                                                node.__next = node.__prev = void 0;
                                                head$5 = tail$5 = next$5 = prev$5 = void 0;
                                            }
                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            var depth$5 = 0, references$2, ref$13, i$13, k$2, n$10;
                                            while (depth$5 > -1) {
                                                if ((references$2 = stack$4[depth$5]) === void 0) {
                                                    i$13 = k$2 = -1;
                                                    n$10 = node[__REFS_LENGTH] || 0;
                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                    if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        stack$4[depth$5] = references$2 = new Array(n$10 + 1);
                                                        references$2[++k$2] = ref$13;
                                                    } else if (n$10 > 0) {
                                                        stack$4[depth$5] = references$2 = new Array(n$10);
                                                    }
                                                    while (++i$13 < n$10) {
                                                        if ((ref$13 = node[__REF + i$13]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            references$2[++k$2] = ref$13;
                                                        }
                                                    }
                                                }
                                                if ((node = references$2 && references$2.pop()) !== void 0) {
                                                    ++depth$5;
                                                } else {
                                                    stack$4[depth$5--] = void 0;
                                                }
                                            }
                                        }
                                    }
                                    nodeParent = node$3;
                                    node = child$2;
                                }
                                if (depth >= boundLength) {
                                    jsonKeys[depth] = isKeySet ? key : void 0;
                                    if (node != null && jsonParent != null && isKeySet && (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object'))) {
                                        jsonNode = jsonParent[key] = Object.create(null);
                                    }
                                } else {
                                    jsonKeys[depth] = void 0;
                                }
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    do {
                                        if (nodeExpires !== 1) {
                                            var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                            if (node !== head$6) {
                                                next$6 && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                prev$6 && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                                root$7.__head = root$7.__next = head$6 = node;
                                                head$6.__next = next$6;
                                                head$6.__prev = void 0;
                                            }
                                            if (tail$6 == null || node === tail$6) {
                                                root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                            }
                                            root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        }
                                        refs[depth] = nodeValue;
                                        refIndex = depth + 1;
                                        refDepth = 0;
                                        var location = (nodeValue[__CONTAINER] || nodeValue)[__CONTEXT];
                                        if (location !== void 0) {
                                            node = location;
                                            refHeight = (refLength = nodeValue.length) - 1;
                                            while (refDepth < refLength) {
                                                optimizedPath[refDepth] = nodeValue[refDepth++];
                                            }
                                            optimizedPath.length = refLength;
                                        } else {
                                            var key$2, isKeySet$2;
                                            reference = nodeValue;
                                            refHeight = (refLength = reference.length) - 1;
                                            nodeParent = nodeRoot;
                                            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                node = node = nodeParent;
                                            } else {
                                                nodeParent = nodeRoot;
                                                jsonParent = jsonRoot;
                                                refDepth = refDepth;
                                                follow_path_6761:
                                                    do {
                                                        key$2 = reference[refDepth];
                                                        isKeySet$2 = false;
                                                        if (key$2 != null) {
                                                            if (refDepth < refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                    nodeType = void 0;
                                                                    nodeValue = Object.create(null);
                                                                    nodeSize = node && node[$SIZE] || 0;
                                                                    if (node != null && node !== nodeValue) {
                                                                        var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$14 = -1, ref$14;
                                                                        while (++i$14 < nodeRefsLength$3) {
                                                                            if ((ref$14 = node[__REF + i$14]) !== void 0) {
                                                                                ref$14[__CONTEXT] = nodeValue;
                                                                                nodeValue[__REF + (destRefsLength$3 + i$14)] = ref$14;
                                                                                node[__REF + i$14] = void 0;
                                                                            }
                                                                        }
                                                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                        node[__REFS_LENGTH] = ref$14 = void 0;
                                                                        var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$3, index$4, offset$3, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                nodeParent,
                                                                                invKey$3,
                                                                                node
                                                                            ], depth$6 = 0;
                                                                        while (depth$6 > -1) {
                                                                            nodeParent = stack$5[offset$3 = depth$6 * 8];
                                                                            invKey$3 = stack$5[offset$3 + 1];
                                                                            node = stack$5[offset$3 + 2];
                                                                            if ((childType$3 = stack$5[offset$3 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                childType$3 = stack$5[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                                            }
                                                                            childValue$3 = stack$5[offset$3 + 4] || (stack$5[offset$3 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                            if ((isBranch$3 = stack$5[offset$3 + 5]) === void 0) {
                                                                                isBranch$3 = stack$5[offset$3 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                            }
                                                                            if (isBranch$3 === true) {
                                                                                if ((keys$3 = stack$5[offset$3 + 6]) === void 0) {
                                                                                    keys$3 = stack$5[offset$3 + 6] = [];
                                                                                    index$4 = -1;
                                                                                    for (invKey$3 in node) {
                                                                                        !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$3[++index$4] = invKey$3);
                                                                                    }
                                                                                }
                                                                                index$4 = stack$5[offset$3 + 7] || (stack$5[offset$3 + 7] = 0);
                                                                                if (index$4 < keys$3.length) {
                                                                                    stack$5[offset$3 + 7] = index$4 + 1;
                                                                                    stack$5[offset$3 = ++depth$6 * 8] = node;
                                                                                    stack$5[offset$3 + 1] = invKey$3 = keys$3[index$4];
                                                                                    stack$5[offset$3 + 2] = node[invKey$3];
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                            if (ref$15 && Array.isArray(ref$15)) {
                                                                                destination$5 = ref$15[__CONTEXT];
                                                                                if (destination$5) {
                                                                                    var i$15 = (ref$15[__REF_INDEX] || 0) - 1, n$11 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$15 <= n$11) {
                                                                                        destination$5[__REF + i$15] = destination$5[__REF + (i$15 + 1)];
                                                                                    }
                                                                                    destination$5[__REFS_LENGTH] = n$11;
                                                                                    ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$16, i$16 = -1, n$12 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$16 < n$12) {
                                                                                if ((ref$16 = node[__REF + i$16]) !== void 0) {
                                                                                    ref$16[__CONTEXT] = node[__REF + i$16] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                            }
                                                                            nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            delete stack$5[offset$3 + 0];
                                                                            delete stack$5[offset$3 + 1];
                                                                            delete stack$5[offset$3 + 2];
                                                                            delete stack$5[offset$3 + 3];
                                                                            delete stack$5[offset$3 + 4];
                                                                            delete stack$5[offset$3 + 5];
                                                                            delete stack$5[offset$3 + 6];
                                                                            delete stack$5[offset$3 + 7];
                                                                            --depth$6;
                                                                        }
                                                                        nodeParent = invParent$3;
                                                                        node = invChild$3;
                                                                    }
                                                                    nodeParent[key$2] = node = nodeValue;
                                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                    var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                    while (node = nodeParent) {
                                                                        nodeParent = node[__PARENT];
                                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                            var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                            if (ref$17 && Array.isArray(ref$17)) {
                                                                                destination$6 = ref$17[__CONTEXT];
                                                                                if (destination$6) {
                                                                                    var i$17 = (ref$17[__REF_INDEX] || 0) - 1, n$13 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$17 <= n$13) {
                                                                                        destination$6[__REF + i$17] = destination$6[__REF + (i$17 + 1)];
                                                                                    }
                                                                                    destination$6[__REFS_LENGTH] = n$13;
                                                                                    ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$18, i$18 = -1, n$14 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$18 < n$14) {
                                                                                if ((ref$18 = node[__REF + i$18]) !== void 0) {
                                                                                    ref$18[__CONTEXT] = node[__REF + i$18] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                            }
                                                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            var depth$7 = 0, references$3, ref$19, i$19, k$3, n$15;
                                                                            while (depth$7 > -1) {
                                                                                if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                    i$19 = k$3 = -1;
                                                                                    n$15 = node[__REFS_LENGTH] || 0;
                                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                                                    if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                        stack$6[depth$7] = references$3 = new Array(n$15 + 1);
                                                                                        references$3[++k$3] = ref$19;
                                                                                    } else if (n$15 > 0) {
                                                                                        stack$6[depth$7] = references$3 = new Array(n$15);
                                                                                    }
                                                                                    while (++i$19 < n$15) {
                                                                                        if ((ref$19 = node[__REF + i$19]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            references$3[++k$3] = ref$19;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                    ++depth$7;
                                                                                } else {
                                                                                    stack$6[depth$7--] = void 0;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    nodeParent = node$4;
                                                                    node = child$3;
                                                                }
                                                                if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                    nodeParent = node;
                                                                    break follow_path_6761;
                                                                }
                                                                nodeParent = node;
                                                                jsonParent = jsonNode;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_6761;
                                                            } else if (refDepth === refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                    nodeType = void 0;
                                                                    nodeValue = Object.create(null);
                                                                    nodeSize = node && node[$SIZE] || 0;
                                                                    if (node != null && node !== nodeValue) {
                                                                        var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = nodeValue[__REFS_LENGTH] || 0, i$20 = -1, ref$20;
                                                                        while (++i$20 < nodeRefsLength$4) {
                                                                            if ((ref$20 = node[__REF + i$20]) !== void 0) {
                                                                                ref$20[__CONTEXT] = nodeValue;
                                                                                nodeValue[__REF + (destRefsLength$4 + i$20)] = ref$20;
                                                                                node[__REF + i$20] = void 0;
                                                                            }
                                                                        }
                                                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                        node[__REFS_LENGTH] = ref$20 = void 0;
                                                                        var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$4, index$5, offset$4, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                nodeParent,
                                                                                invKey$4,
                                                                                node
                                                                            ], depth$8 = 0;
                                                                        while (depth$8 > -1) {
                                                                            nodeParent = stack$7[offset$4 = depth$8 * 8];
                                                                            invKey$4 = stack$7[offset$4 + 1];
                                                                            node = stack$7[offset$4 + 2];
                                                                            if ((childType$4 = stack$7[offset$4 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                childType$4 = stack$7[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                            }
                                                                            childValue$4 = stack$7[offset$4 + 4] || (stack$7[offset$4 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                            if ((isBranch$4 = stack$7[offset$4 + 5]) === void 0) {
                                                                                isBranch$4 = stack$7[offset$4 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                            }
                                                                            if (isBranch$4 === true) {
                                                                                if ((keys$4 = stack$7[offset$4 + 6]) === void 0) {
                                                                                    keys$4 = stack$7[offset$4 + 6] = [];
                                                                                    index$5 = -1;
                                                                                    for (invKey$4 in node) {
                                                                                        !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$4[++index$5] = invKey$4);
                                                                                    }
                                                                                }
                                                                                index$5 = stack$7[offset$4 + 7] || (stack$7[offset$4 + 7] = 0);
                                                                                if (index$5 < keys$4.length) {
                                                                                    stack$7[offset$4 + 7] = index$5 + 1;
                                                                                    stack$7[offset$4 = ++depth$8 * 8] = node;
                                                                                    stack$7[offset$4 + 1] = invKey$4 = keys$4[index$5];
                                                                                    stack$7[offset$4 + 2] = node[invKey$4];
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                            if (ref$21 && Array.isArray(ref$21)) {
                                                                                destination$7 = ref$21[__CONTEXT];
                                                                                if (destination$7) {
                                                                                    var i$21 = (ref$21[__REF_INDEX] || 0) - 1, n$16 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$21 <= n$16) {
                                                                                        destination$7[__REF + i$21] = destination$7[__REF + (i$21 + 1)];
                                                                                    }
                                                                                    destination$7[__REFS_LENGTH] = n$16;
                                                                                    ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$22, i$22 = -1, n$17 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$22 < n$17) {
                                                                                if ((ref$22 = node[__REF + i$22]) !== void 0) {
                                                                                    ref$22[__CONTEXT] = node[__REF + i$22] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                            }
                                                                            nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            delete stack$7[offset$4 + 0];
                                                                            delete stack$7[offset$4 + 1];
                                                                            delete stack$7[offset$4 + 2];
                                                                            delete stack$7[offset$4 + 3];
                                                                            delete stack$7[offset$4 + 4];
                                                                            delete stack$7[offset$4 + 5];
                                                                            delete stack$7[offset$4 + 6];
                                                                            delete stack$7[offset$4 + 7];
                                                                            --depth$8;
                                                                        }
                                                                        nodeParent = invParent$4;
                                                                        node = invChild$4;
                                                                    }
                                                                    nodeParent[key$2] = node = nodeValue;
                                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                    var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                    while (node = nodeParent) {
                                                                        nodeParent = node[__PARENT];
                                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                            var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                            if (ref$23 && Array.isArray(ref$23)) {
                                                                                destination$8 = ref$23[__CONTEXT];
                                                                                if (destination$8) {
                                                                                    var i$23 = (ref$23[__REF_INDEX] || 0) - 1, n$18 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$23 <= n$18) {
                                                                                        destination$8[__REF + i$23] = destination$8[__REF + (i$23 + 1)];
                                                                                    }
                                                                                    destination$8[__REFS_LENGTH] = n$18;
                                                                                    ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$24, i$24 = -1, n$19 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$24 < n$19) {
                                                                                if ((ref$24 = node[__REF + i$24]) !== void 0) {
                                                                                    ref$24[__CONTEXT] = node[__REF + i$24] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                                                (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                                                (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                                                node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                                                node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                                            }
                                                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            var depth$9 = 0, references$4, ref$25, i$25, k$4, n$20;
                                                                            while (depth$9 > -1) {
                                                                                if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                    i$25 = k$4 = -1;
                                                                                    n$20 = node[__REFS_LENGTH] || 0;
                                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                                                    if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                        stack$8[depth$9] = references$4 = new Array(n$20 + 1);
                                                                                        references$4[++k$4] = ref$25;
                                                                                    } else if (n$20 > 0) {
                                                                                        stack$8[depth$9] = references$4 = new Array(n$20);
                                                                                    }
                                                                                    while (++i$25 < n$20) {
                                                                                        if ((ref$25 = node[__REF + i$25]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            references$4[++k$4] = ref$25;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                    ++depth$9;
                                                                                } else {
                                                                                    stack$8[depth$9--] = void 0;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    nodeParent = node$5;
                                                                    node = child$4;
                                                                }
                                                                if (node != null) {
                                                                    var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                    // Set up the hard-link so we don't have to do all
                                                                    // this work the next time we follow this reference.
                                                                    if (refContext === void 0) {
                                                                        // create a back reference
                                                                        var backRefs = node[__REFS_LENGTH] || 0;
                                                                        node[__REF + backRefs] = refContainer;
                                                                        node[__REFS_LENGTH] = backRefs + 1;
                                                                        // create a hard reference
                                                                        refContainer[__REF_INDEX] = backRefs;
                                                                        refContainer[__CONTEXT] = node;
                                                                        refContainer = backRefs = void 0;
                                                                    }
                                                                    ;
                                                                }
                                                                appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                nodeParent = node;
                                                                break follow_path_6761;
                                                            }
                                                        } else if (refDepth < refHeight) {
                                                            nodeParent = node;
                                                            jsonParent = jsonNode;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_6761;
                                                        }
                                                        nodeParent = node;
                                                        break follow_path_6761;
                                                    } while (true);
                                                node = nodeParent;
                                            }
                                        }
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        nodeExpires = node && node[$EXPIRES];
                                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                    } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                    if (node == null) {
                                        while (refDepth <= refHeight) {
                                            optimizedPath[refDepth] = reference[refDepth++];
                                        }
                                    }
                                }
                                if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                    nodeParent = node;
                                    break follow_path_6376;
                                }
                                nodeParent = nodes[depth] = node;
                                jsonParent = jsons[depth] = jsonNode;
                                depth = depth + 1;
                                continue follow_path_6376;
                            } else if (depth === height) {
                                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                nodeType = value && value[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                                nodeTimestamp = value && value[$TIMESTAMP];
                                nodeExpires = value && value[$EXPIRES];
                                var newNode$2, size_offset$2, leafSize$2 = node && node[$SIZE] || 0;
                                newNode$2 = value;
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    nodeType = 'array';
                                    newNode$2[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                                    delete nodeValue[$SIZE];
                                    nodeValue[__CONTAINER] = newNode$2;
                                } else if (nodeType === SENTINEL) {
                                    newNode$2[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                } else if (nodeType === ERROR) {
                                    newNode$2[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                                } else if (!(value != null && typeof value === 'object')) {
                                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                    nodeType = 'sentinel';
                                    newNode$2 = { 'value': nodeValue };
                                    newNode$2[$TYPE] = nodeType;
                                    newNode$2[$SIZE] = nodeSize;
                                } else {
                                    nodeType = newNode$2[$TYPE] = nodeType || 'leaf';
                                    newNode$2[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                                }
                                ;
                                if (node != null && node !== newNode$2) {
                                    var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = newNode$2[__REFS_LENGTH] || 0, i$26 = -1, ref$26;
                                    while (++i$26 < nodeRefsLength$5) {
                                        if ((ref$26 = node[__REF + i$26]) !== void 0) {
                                            ref$26[__CONTEXT] = newNode$2;
                                            newNode$2[__REF + (destRefsLength$5 + i$26)] = ref$26;
                                            node[__REF + i$26] = void 0;
                                        }
                                    }
                                    newNode$2[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                    node[__REFS_LENGTH] = ref$26 = void 0;
                                    var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$5, index$6, offset$5, childType$5, childValue$5, isBranch$5, stack$9 = [
                                            nodeParent,
                                            invKey$5,
                                            node
                                        ], depth$10 = 0;
                                    while (depth$10 > -1) {
                                        nodeParent = stack$9[offset$5 = depth$10 * 8];
                                        invKey$5 = stack$9[offset$5 + 1];
                                        node = stack$9[offset$5 + 2];
                                        if ((childType$5 = stack$9[offset$5 + 3]) === void 0 || (childType$5 = void 0)) {
                                            childType$5 = stack$9[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                        }
                                        childValue$5 = stack$9[offset$5 + 4] || (stack$9[offset$5 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                        if ((isBranch$5 = stack$9[offset$5 + 5]) === void 0) {
                                            isBranch$5 = stack$9[offset$5 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                        }
                                        if (isBranch$5 === true) {
                                            if ((keys$5 = stack$9[offset$5 + 6]) === void 0) {
                                                keys$5 = stack$9[offset$5 + 6] = [];
                                                index$6 = -1;
                                                for (invKey$5 in node) {
                                                    !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$5[++index$6] = invKey$5);
                                                }
                                            }
                                            index$6 = stack$9[offset$5 + 7] || (stack$9[offset$5 + 7] = 0);
                                            if (index$6 < keys$5.length) {
                                                stack$9[offset$5 + 7] = index$6 + 1;
                                                stack$9[offset$5 = ++depth$10 * 8] = node;
                                                stack$9[offset$5 + 1] = invKey$5 = keys$5[index$6];
                                                stack$9[offset$5 + 2] = node[invKey$5];
                                                continue;
                                            }
                                        }
                                        var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                        if (ref$27 && Array.isArray(ref$27)) {
                                            destination$9 = ref$27[__CONTEXT];
                                            if (destination$9) {
                                                var i$27 = (ref$27[__REF_INDEX] || 0) - 1, n$21 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                                while (++i$27 <= n$21) {
                                                    destination$9[__REF + i$27] = destination$9[__REF + (i$27 + 1)];
                                                }
                                                destination$9[__REFS_LENGTH] = n$21;
                                                ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                            }
                                        }
                                        var ref$28, i$28 = -1, n$22 = node[__REFS_LENGTH] || 0;
                                        while (++i$28 < n$22) {
                                            if ((ref$28 = node[__REF + i$28]) !== void 0) {
                                                ref$28[__CONTEXT] = node[__REF + i$28] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        if (node != null && typeof node === 'object') {
                                            var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                            (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                            (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                            node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                            node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                            node.__next = node.__prev = void 0;
                                            head$11 = tail$11 = next$11 = prev$11 = void 0;
                                        }
                                        nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        delete stack$9[offset$5 + 0];
                                        delete stack$9[offset$5 + 1];
                                        delete stack$9[offset$5 + 2];
                                        delete stack$9[offset$5 + 3];
                                        delete stack$9[offset$5 + 4];
                                        delete stack$9[offset$5 + 5];
                                        delete stack$9[offset$5 + 6];
                                        delete stack$9[offset$5 + 7];
                                        --depth$10;
                                    }
                                    nodeParent = invParent$5;
                                    node = invChild$5;
                                }
                                nodeParent[key] = node = newNode$2;
                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                size_offset$2 = leafSize$2 - nodeSize;
                                var node$6 = nodeParent, child$5 = node, stack$10 = [];
                                while (node = nodeParent) {
                                    nodeParent = node[__PARENT];
                                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                        var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                        if (ref$29 && Array.isArray(ref$29)) {
                                            destination$10 = ref$29[__CONTEXT];
                                            if (destination$10) {
                                                var i$29 = (ref$29[__REF_INDEX] || 0) - 1, n$23 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                                while (++i$29 <= n$23) {
                                                    destination$10[__REF + i$29] = destination$10[__REF + (i$29 + 1)];
                                                }
                                                destination$10[__REFS_LENGTH] = n$23;
                                                ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                            }
                                        }
                                        var ref$30, i$30 = -1, n$24 = node[__REFS_LENGTH] || 0;
                                        while (++i$30 < n$24) {
                                            if ((ref$30 = node[__REF + i$30]) !== void 0) {
                                                ref$30[__CONTEXT] = node[__REF + i$30] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        if (node != null && typeof node === 'object') {
                                            var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12, prev$12;
                                            (next$12 = node.__next) && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                            (prev$12 = node.__prev) && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                            node === head$12 && (root$13.__head = root$13.__next = head$12 = next$12);
                                            node === tail$12 && (root$13.__tail = root$13.__prev = tail$12 = prev$12);
                                            node.__next = node.__prev = void 0;
                                            head$12 = tail$12 = next$12 = prev$12 = void 0;
                                        }
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        var depth$11 = 0, references$5, ref$31, i$31, k$5, n$25;
                                        while (depth$11 > -1) {
                                            if ((references$5 = stack$10[depth$11]) === void 0) {
                                                i$31 = k$5 = -1;
                                                n$25 = node[__REFS_LENGTH] || 0;
                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                node[__GENERATION] = __GENERATION_GUID++;
                                                if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    stack$10[depth$11] = references$5 = new Array(n$25 + 1);
                                                    references$5[++k$5] = ref$31;
                                                } else if (n$25 > 0) {
                                                    stack$10[depth$11] = references$5 = new Array(n$25);
                                                }
                                                while (++i$31 < n$25) {
                                                    if ((ref$31 = node[__REF + i$31]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        references$5[++k$5] = ref$31;
                                                    }
                                                }
                                            }
                                            if ((node = references$5 && references$5.pop()) !== void 0) {
                                                ++depth$11;
                                            } else {
                                                stack$10[depth$11--] = void 0;
                                            }
                                        }
                                    }
                                }
                                nodeParent = node$6;
                                node = child$5;
                                if (node != null && typeof node === 'object') {
                                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    } else {
                                        if (nodeExpires !== 1) {
                                            var root$14 = root, head$13 = root$14.__head, tail$13 = root$14.__tail, next$13 = node.__next, prev$13 = node.__prev;
                                            if (node !== head$13) {
                                                next$13 && (next$13 != null && typeof next$13 === 'object') && (next$13.__prev = prev$13);
                                                prev$13 && (prev$13 != null && typeof prev$13 === 'object') && (prev$13.__next = next$13);
                                                (next$13 = head$13) && (head$13 != null && typeof head$13 === 'object') && (head$13.__prev = node);
                                                root$14.__head = root$14.__next = head$13 = node;
                                                head$13.__next = next$13;
                                                head$13.__prev = void 0;
                                            }
                                            if (tail$13 == null || node === tail$13) {
                                                root$14.__tail = root$14.__prev = tail$13 = prev$13 || node;
                                            }
                                            root$14 = head$13 = tail$13 = next$13 = prev$13 = void 0;
                                        }
                                    }
                                }
                                if (depth >= boundLength) {
                                    jsonKeys[depth] = isKeySet ? key : void 0;
                                } else {
                                    jsonKeys[depth] = void 0;
                                }
                                appendNullKey = false;
                                nodeParent = node;
                                break follow_path_6376;
                            }
                        } else if (depth < height) {
                            nodeParent = nodeParent;
                            jsonParent = jsonParent;
                            depth = depth + 1;
                            continue follow_path_6376;
                        }
                        nodeParent = node;
                        break follow_path_6376;
                    } while (true);
                node = nodeParent;
            }
            if (node != null || boxed === true) {
                if (nodeType === ERROR) {
                    if (nodeExpires !== 1) {
                        var root$15 = root, head$14 = root$15.__head, tail$14 = root$15.__tail, next$14 = node.__next, prev$14 = node.__prev;
                        if (node !== head$14) {
                            next$14 && (next$14 != null && typeof next$14 === 'object') && (next$14.__prev = prev$14);
                            prev$14 && (prev$14 != null && typeof prev$14 === 'object') && (prev$14.__next = next$14);
                            (next$14 = head$14) && (head$14 != null && typeof head$14 === 'object') && (head$14.__prev = node);
                            root$15.__head = root$15.__next = head$14 = node;
                            head$14.__next = next$14;
                            head$14.__prev = void 0;
                        }
                        if (tail$14 == null || node === tail$14) {
                            root$15.__tail = root$15.__prev = tail$14 = prev$14 || node;
                        }
                        root$15 = head$14 = tail$14 = next$14 = prev$14 = void 0;
                    }
                    var nodeType$2 = node && node[$TYPE] || void 0;
                    nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                    var pbv = Object.create(null);
                    var src = requestedPath, i$32 = -1, n$26 = src.length, req = new Array(n$26);
                    while (++i$32 < n$26) {
                        req[i$32] = src[i$32];
                    }
                    if (appendNullKey === true) {
                        req[req.length] = null;
                    }
                    pbv.path = req;
                    if (boxed === true) {
                        pbv.value = node;
                    } else {
                        var dest = nodeValue, src$2 = dest, x;
                        if (dest != null && typeof dest === 'object') {
                            dest = Array.isArray(src$2) && [] || Object.create(null);
                            for (x in src$2) {
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src$2[x]);
                            }
                        }
                        pbv.value = dest;
                    }
                    errors[errors.length] = pbv;
                }
                if (jsonParent != null) {
                    hasValue = true;
                    var jsonKey, jsonDepth = depth;
                    do {
                        jsonKey = jsonKeys[jsonDepth];
                        jsonParent = jsons[--jsonDepth];
                    } while (jsonKey == null);
                    if (boxed === true) {
                        jsonParent[jsonKey] = node;
                    } else {
                        var dest$2 = nodeValue, src$3 = dest$2, x$2;
                        if (dest$2 != null && typeof dest$2 === 'object') {
                            dest$2 = Array.isArray(src$3) && [] || Object.create(null);
                            for (x$2 in src$3) {
                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT) || x$2[0] === '$') && (dest$2[x$2] = src$3[x$2]);
                            }
                        }
                        jsonParent[jsonKey] = dest$2;
                    }
                }
                var src$4 = optimizedPath, i$33 = -1, n$27 = src$4.length, opt = new Array(n$27);
                while (++i$33 < n$27) {
                    opt[i$33] = src$4[i$33];
                }
                var src$5 = requestedPath, i$34 = -1, n$28 = src$5.length, req$2 = new Array(n$28);
                while (++i$34 < n$28) {
                    req$2[i$34] = src$5[i$34];
                }
                if (appendNullKey === true) {
                    req$2[req$2.length] = null;
                }
                requestedPaths[requestedPaths.length] = req$2;
                optimizedPaths[optimizedPaths.length] = opt;
            }
            if (boxed === false && node == null || refreshing === true) {
                var src$6 = boundPath, i$35 = -1, n$29 = src$6.length, req$3 = new Array(n$29);
                while (++i$35 < n$29) {
                    req$3[i$35] = src$6[i$35];
                }
                var src$7 = optimizedPath, i$36 = -1, n$30 = src$7.length, opt$2 = new Array(n$30);
                while (++i$36 < n$30) {
                    opt$2[i$36] = src$7[i$36];
                }
                var reqLen = req$3.length - 1, optLen = opt$2.length - 1, i$37 = -1, n$31 = requestedPath.length, j$2 = depth, k$6 = height, x$3;
                while (++i$37 < n$31) {
                    req$3[++reqLen] = path[i$37 + boundLength] != null && typeof path[i$37 + boundLength] === 'object' && [requestedPath[i$37]] || requestedPath[i$37];
                }
                i$37 = -1;
                n$31 = height - depth;
                while (++i$37 < n$31) {
                    x$3 = req$3[++reqLen] = path[++j$2 + boundLength];
                    x$3 != null && (opt$2[++optLen] = x$3);
                }
                req$3.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req$3;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
            }
            appendNullKey = false;
            jsonRoot != null && (values[index] = hasValue && { json: jsons[-1] } || void 0);
            var key$3;
            depth = depth;
            unroll_6011:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_6011;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_6011;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_6011;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_6011;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_6011;
                    }
                    depth = path.depth = depth;
                    break unroll_6011;
                } while (true);
            depth = depth;
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathsAsJSONG(model, pathValues, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var nodeRoot = model._cache || (model._cache = {}), nodeParent = nodeRoot, node = nodeParent, boundLength = 0;
    boundPath = model._path || [];
    var value, root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$7, y) {
        return y;
    });
    var nodes = pathValues.nodes || (pathValues.nodes = []);
    var jsons = pathValues.jsons || (pathValues.jsons = []);
    var errors = pathValues.errors || (pathValues.errors = []);
    var refs = pathValues.refs || (pathValues.refs = []);
    var depth = pathValues.depth || (pathValues.depth = 0);
    var refIndex = pathValues.refIndex || (pathValues.refIndex = 0);
    var refDepth = pathValues.refDepth || (pathValues.refDepth = 0);
    var requestedPath = pathValues.requestedPath || (pathValues.requestedPath = []);
    var optimizedPath = pathValues.optimizedPath || (pathValues.optimizedPath = []);
    var requestedPaths = pathValues.requestedPaths || (pathValues.requestedPaths = []);
    var optimizedPaths = pathValues.optimizedPaths || (pathValues.optimizedPaths = []);
    var requestedMissingPaths = pathValues.requestedMissingPaths || (pathValues.requestedMissingPaths = []);
    var optimizedMissingPaths = pathValues.optimizedMissingPaths || (pathValues.optimizedMissingPaths = []);
    var hasValue = pathValues.hasValue || (pathValues.hasValue = false);
    var jsonRoot = pathValues.jsonRoot || (pathValues.jsonRoot = values && values[0]);
    var jsonParent = pathValues.jsonParent || (pathValues.jsonParent = jsonRoot);
    var jsonNode = pathValues.jsonNode || (pathValues.jsonNode = jsonParent);
    var path, length = 0, height = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-1] = jsonParent;
    jsons[-2] = jsons;
    var index = -1, count = pathValues.length;
    while (++index < count) {
        path = pathValues[index];
        value = path.value;
        path = path.path;
        depth = 0;
        length = path.length;
        height = length - 1;
        var ref;
        refs.length = 0;
        while (depth > -1) {
            refIndex = depth;
            while (--refIndex >= -1) {
                if (!!(ref = refs[refIndex])) {
                    refLength = ref.length;
                    var i = -1, j = 0;
                    while (++i < refLength) {
                        optimizedPath[j++] = ref[i];
                    }
                    i = ++refIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    optimizedPath.length = j;
                    break;
                }
            }
            var key, isKeySet;
            path = path;
            height = (length = path.length) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                node = nodeParent[key];
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                nodeTimestamp = node && node[$TIMESTAMP];
                nodeExpires = node && node[$EXPIRES];
                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                nodeType = value && value[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                nodeTimestamp = value && value[$TIMESTAMP];
                nodeExpires = value && value[$EXPIRES];
                var newNode, size_offset, leafSize = node && node[$SIZE] || 0;
                newNode = value;
                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                    nodeType = 'array';
                    newNode[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                    delete nodeValue[$SIZE];
                    nodeValue[__CONTAINER] = newNode;
                } else if (nodeType === SENTINEL) {
                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                } else if (nodeType === ERROR) {
                    newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                } else if (!(value != null && typeof value === 'object')) {
                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                    nodeType = 'sentinel';
                    newNode = { 'value': nodeValue };
                    newNode[$TYPE] = nodeType;
                    newNode[$SIZE] = nodeSize;
                } else {
                    nodeType = newNode[$TYPE] = nodeType || 'leaf';
                    newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                }
                ;
                if (node != null && node !== newNode) {
                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = newNode[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                    while (++i$2 < nodeRefsLength) {
                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                            ref$2[__CONTEXT] = newNode;
                            newNode[__REF + (destRefsLength + i$2)] = ref$2;
                            node[__REF + i$2] = void 0;
                        }
                    }
                    newNode[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                    node[__REFS_LENGTH] = ref$2 = void 0;
                    var invParent = nodeParent, invChild = node, invKey = key, keys, index$2, offset, childType, childValue, isBranch, stack = [
                            nodeParent,
                            invKey,
                            node
                        ], depth$2 = 0;
                    while (depth$2 > -1) {
                        nodeParent = stack[offset = depth$2 * 8];
                        invKey = stack[offset + 1];
                        node = stack[offset + 2];
                        if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                            childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                        }
                        childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                        if ((isBranch = stack[offset + 5]) === void 0) {
                            isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                        }
                        if (isBranch === true) {
                            if ((keys = stack[offset + 6]) === void 0) {
                                keys = stack[offset + 6] = [];
                                index$2 = -1;
                                for (invKey in node) {
                                    !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys[++index$2] = invKey);
                                }
                            }
                            index$2 = stack[offset + 7] || (stack[offset + 7] = 0);
                            if (index$2 < keys.length) {
                                stack[offset + 7] = index$2 + 1;
                                stack[offset = ++depth$2 * 8] = node;
                                stack[offset + 1] = invKey = keys[index$2];
                                stack[offset + 2] = node[invKey];
                                continue;
                            }
                        }
                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                        if (ref$3 && Array.isArray(ref$3)) {
                            destination = ref$3[__CONTEXT];
                            if (destination) {
                                var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                while (++i$3 <= n) {
                                    destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                }
                                destination[__REFS_LENGTH] = n;
                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                            }
                        }
                        var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                        while (++i$4 < n$2) {
                            if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                            (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                            (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            node === head && (root$2.__head = root$2.__next = head = next);
                            node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                            node.__next = node.__prev = void 0;
                            head = tail = next = prev = void 0;
                        }
                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                        delete stack[offset + 0];
                        delete stack[offset + 1];
                        delete stack[offset + 2];
                        delete stack[offset + 3];
                        delete stack[offset + 4];
                        delete stack[offset + 5];
                        delete stack[offset + 6];
                        delete stack[offset + 7];
                        --depth$2;
                    }
                    nodeParent = invParent;
                    node = invChild;
                }
                nodeParent[key] = node = newNode;
                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                size_offset = leafSize - nodeSize;
                var node$2 = nodeParent, child = node, stack$2 = [];
                while (node = nodeParent) {
                    nodeParent = node[__PARENT];
                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                        var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                        if (ref$5 && Array.isArray(ref$5)) {
                            destination$2 = ref$5[__CONTEXT];
                            if (destination$2) {
                                var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                while (++i$5 <= n$3) {
                                    destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                }
                                destination$2[__REFS_LENGTH] = n$3;
                                ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                            }
                        }
                        var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                        while (++i$6 < n$4) {
                            if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                            (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                            (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                            node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                            node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                            node.__next = node.__prev = void 0;
                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                        }
                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                        var depth$3 = 0, references, ref$7, i$7, k, n$5;
                        while (depth$3 > -1) {
                            if ((references = stack$2[depth$3]) === void 0) {
                                i$7 = k = -1;
                                n$5 = node[__REFS_LENGTH] || 0;
                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                node[__GENERATION] = __GENERATION_GUID++;
                                if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    stack$2[depth$3] = references = new Array(n$5 + 1);
                                    references[++k] = ref$7;
                                } else if (n$5 > 0) {
                                    stack$2[depth$3] = references = new Array(n$5);
                                }
                                while (++i$7 < n$5) {
                                    if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        references[++k] = ref$7;
                                    }
                                }
                            }
                            if ((node = references && references.pop()) !== void 0) {
                                ++depth$3;
                            } else {
                                stack$2[depth$3--] = void 0;
                            }
                        }
                    }
                }
                nodeParent = node$2;
                node = child;
                if (node != null && typeof node === 'object') {
                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    } else {
                        if (nodeExpires !== 1) {
                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                            if (node !== head$3) {
                                next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                root$4.__head = root$4.__next = head$3 = node;
                                head$3.__next = next$3;
                                head$3.__prev = void 0;
                            }
                            if (tail$3 == null || node === tail$3) {
                                root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                            }
                            root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                        }
                    }
                }
                if (node != null && jsonParent != null) {
                    if (boxed === true) {
                        jsonParent[key] = node;
                    } else {
                        var val = nodeValue;
                        if (val != null && typeof val === 'object') {
                            var src = val, keys$2 = Object.keys(src), x, i$8 = -1, n$6 = keys$2.length;
                            val = Array.isArray(src) && new Array(src.length) || Object.create(null);
                            while (++i$8 < n$6) {
                                x = keys$2[i$8];
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (val[x] = src[x]);
                            }
                        }
                        if (!nodeType && (val != null && typeof val === 'object') && !Array.isArray(val)) {
                            val[$TYPE] = LEAF;
                        }
                        jsonParent[key] = val;
                    }
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                jsonParent = jsonNode = jsons[depth - 1];
                depth = depth;
                follow_path_10199:
                    do {
                        key = path[depth];
                        if (isKeySet = key != null && typeof key === 'object') {
                            if (Array.isArray(key)) {
                                if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        if (key === __NULL) {
                            key = null;
                        }
                        depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                        if (key != null) {
                            if (depth < height) {
                                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                    nodeType = void 0;
                                    nodeValue = Object.create(null);
                                    nodeSize = node && node[$SIZE] || 0;
                                    if (node != null && node !== nodeValue) {
                                        var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = nodeValue[__REFS_LENGTH] || 0, i$9 = -1, ref$8;
                                        while (++i$9 < nodeRefsLength$2) {
                                            if ((ref$8 = node[__REF + i$9]) !== void 0) {
                                                ref$8[__CONTEXT] = nodeValue;
                                                nodeValue[__REF + (destRefsLength$2 + i$9)] = ref$8;
                                                node[__REF + i$9] = void 0;
                                            }
                                        }
                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                        node[__REFS_LENGTH] = ref$8 = void 0;
                                        var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$3, offset$2, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                nodeParent,
                                                invKey$2,
                                                node
                                            ], depth$4 = 0;
                                        while (depth$4 > -1) {
                                            nodeParent = stack$3[offset$2 = depth$4 * 8];
                                            invKey$2 = stack$3[offset$2 + 1];
                                            node = stack$3[offset$2 + 2];
                                            if ((childType$2 = stack$3[offset$2 + 3]) === void 0 || (childType$2 = void 0)) {
                                                childType$2 = stack$3[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                            }
                                            childValue$2 = stack$3[offset$2 + 4] || (stack$3[offset$2 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                            if ((isBranch$2 = stack$3[offset$2 + 5]) === void 0) {
                                                isBranch$2 = stack$3[offset$2 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                            }
                                            if (isBranch$2 === true) {
                                                if ((keys$3 = stack$3[offset$2 + 6]) === void 0) {
                                                    keys$3 = stack$3[offset$2 + 6] = [];
                                                    index$3 = -1;
                                                    for (invKey$2 in node) {
                                                        !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$3[++index$3] = invKey$2);
                                                    }
                                                }
                                                index$3 = stack$3[offset$2 + 7] || (stack$3[offset$2 + 7] = 0);
                                                if (index$3 < keys$3.length) {
                                                    stack$3[offset$2 + 7] = index$3 + 1;
                                                    stack$3[offset$2 = ++depth$4 * 8] = node;
                                                    stack$3[offset$2 + 1] = invKey$2 = keys$3[index$3];
                                                    stack$3[offset$2 + 2] = node[invKey$2];
                                                    continue;
                                                }
                                            }
                                            var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                            if (ref$9 && Array.isArray(ref$9)) {
                                                destination$3 = ref$9[__CONTEXT];
                                                if (destination$3) {
                                                    var i$10 = (ref$9[__REF_INDEX] || 0) - 1, n$7 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$10 <= n$7) {
                                                        destination$3[__REF + i$10] = destination$3[__REF + (i$10 + 1)];
                                                    }
                                                    destination$3[__REFS_LENGTH] = n$7;
                                                    ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                }
                                            }
                                            var ref$10, i$11 = -1, n$8 = node[__REFS_LENGTH] || 0;
                                            while (++i$11 < n$8) {
                                                if ((ref$10 = node[__REF + i$11]) !== void 0) {
                                                    ref$10[__CONTEXT] = node[__REF + i$11] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            if (node != null && typeof node === 'object') {
                                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                node.__next = node.__prev = void 0;
                                                head$4 = tail$4 = next$4 = prev$4 = void 0;
                                            }
                                            nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            delete stack$3[offset$2 + 0];
                                            delete stack$3[offset$2 + 1];
                                            delete stack$3[offset$2 + 2];
                                            delete stack$3[offset$2 + 3];
                                            delete stack$3[offset$2 + 4];
                                            delete stack$3[offset$2 + 5];
                                            delete stack$3[offset$2 + 6];
                                            delete stack$3[offset$2 + 7];
                                            --depth$4;
                                        }
                                        nodeParent = invParent$2;
                                        node = invChild$2;
                                    }
                                    nodeParent[key] = node = nodeValue;
                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                    while (node = nodeParent) {
                                        nodeParent = node[__PARENT];
                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                            var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                            if (ref$11 && Array.isArray(ref$11)) {
                                                destination$4 = ref$11[__CONTEXT];
                                                if (destination$4) {
                                                    var i$12 = (ref$11[__REF_INDEX] || 0) - 1, n$9 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$12 <= n$9) {
                                                        destination$4[__REF + i$12] = destination$4[__REF + (i$12 + 1)];
                                                    }
                                                    destination$4[__REFS_LENGTH] = n$9;
                                                    ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                }
                                            }
                                            var ref$12, i$13 = -1, n$10 = node[__REFS_LENGTH] || 0;
                                            while (++i$13 < n$10) {
                                                if ((ref$12 = node[__REF + i$13]) !== void 0) {
                                                    ref$12[__CONTEXT] = node[__REF + i$13] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            if (node != null && typeof node === 'object') {
                                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5, prev$5;
                                                (next$5 = node.__next) && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                (prev$5 = node.__prev) && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                node === head$5 && (root$6.__head = root$6.__next = head$5 = next$5);
                                                node === tail$5 && (root$6.__tail = root$6.__prev = tail$5 = prev$5);
                                                node.__next = node.__prev = void 0;
                                                head$5 = tail$5 = next$5 = prev$5 = void 0;
                                            }
                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            var depth$5 = 0, references$2, ref$13, i$14, k$2, n$11;
                                            while (depth$5 > -1) {
                                                if ((references$2 = stack$4[depth$5]) === void 0) {
                                                    i$14 = k$2 = -1;
                                                    n$11 = node[__REFS_LENGTH] || 0;
                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                    if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        stack$4[depth$5] = references$2 = new Array(n$11 + 1);
                                                        references$2[++k$2] = ref$13;
                                                    } else if (n$11 > 0) {
                                                        stack$4[depth$5] = references$2 = new Array(n$11);
                                                    }
                                                    while (++i$14 < n$11) {
                                                        if ((ref$13 = node[__REF + i$14]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            references$2[++k$2] = ref$13;
                                                        }
                                                    }
                                                }
                                                if ((node = references$2 && references$2.pop()) !== void 0) {
                                                    ++depth$5;
                                                } else {
                                                    stack$4[depth$5--] = void 0;
                                                }
                                            }
                                        }
                                    }
                                    nodeParent = node$3;
                                    node = child$2;
                                }
                                if (node != null && jsonParent != null) {
                                    if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                        if (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                            jsonNode = jsonParent[key] = Object.create(null);
                                        }
                                    } else {
                                        if (boxed === true) {
                                            jsonParent[key] = node;
                                        } else {
                                            var val$2 = nodeValue;
                                            if (val$2 != null && typeof val$2 === 'object') {
                                                var src$2 = val$2, keys$4 = Object.keys(src$2), x$2, i$15 = -1, n$12 = keys$4.length;
                                                val$2 = Array.isArray(src$2) && new Array(src$2.length) || Object.create(null);
                                                while (++i$15 < n$12) {
                                                    x$2 = keys$4[i$15];
                                                    !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (val$2[x$2] = src$2[x$2]);
                                                }
                                            }
                                            if (!nodeType && (val$2 != null && typeof val$2 === 'object') && !Array.isArray(val$2)) {
                                                val$2[$TYPE] = LEAF;
                                            }
                                            jsonParent[key] = val$2;
                                        }
                                    }
                                }
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    do {
                                        if (nodeExpires !== 1) {
                                            var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                            if (node !== head$6) {
                                                next$6 && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                prev$6 && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                                root$7.__head = root$7.__next = head$6 = node;
                                                head$6.__next = next$6;
                                                head$6.__prev = void 0;
                                            }
                                            if (tail$6 == null || node === tail$6) {
                                                root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                            }
                                            root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        }
                                        refs[depth] = nodeValue;
                                        refIndex = depth + 1;
                                        refDepth = 0;
                                        var key$2, isKeySet$2;
                                        reference = nodeValue;
                                        refHeight = (refLength = reference.length) - 1;
                                        nodeParent = nodeRoot;
                                        nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                        if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                            node = node = nodeParent;
                                        } else {
                                            nodeParent = nodeRoot;
                                            jsonParent = jsonRoot;
                                            refDepth = refDepth;
                                            follow_path_10599:
                                                do {
                                                    key$2 = reference[refDepth];
                                                    isKeySet$2 = false;
                                                    if (key$2 != null) {
                                                        if (refDepth < refHeight) {
                                                            optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                            node = nodeParent[key$2];
                                                            nodeType = node && node[$TYPE] || void 0;
                                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                            nodeTimestamp = node && node[$TIMESTAMP];
                                                            nodeExpires = node && node[$EXPIRES];
                                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                            }
                                                            if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                nodeType = void 0;
                                                                nodeValue = Object.create(null);
                                                                nodeSize = node && node[$SIZE] || 0;
                                                                if (node != null && node !== nodeValue) {
                                                                    var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$16 = -1, ref$14;
                                                                    while (++i$16 < nodeRefsLength$3) {
                                                                        if ((ref$14 = node[__REF + i$16]) !== void 0) {
                                                                            ref$14[__CONTEXT] = nodeValue;
                                                                            nodeValue[__REF + (destRefsLength$3 + i$16)] = ref$14;
                                                                            node[__REF + i$16] = void 0;
                                                                        }
                                                                    }
                                                                    nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                    node[__REFS_LENGTH] = ref$14 = void 0;
                                                                    var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$5, index$4, offset$3, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                            nodeParent,
                                                                            invKey$3,
                                                                            node
                                                                        ], depth$6 = 0;
                                                                    while (depth$6 > -1) {
                                                                        nodeParent = stack$5[offset$3 = depth$6 * 8];
                                                                        invKey$3 = stack$5[offset$3 + 1];
                                                                        node = stack$5[offset$3 + 2];
                                                                        if ((childType$3 = stack$5[offset$3 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                            childType$3 = stack$5[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                                        }
                                                                        childValue$3 = stack$5[offset$3 + 4] || (stack$5[offset$3 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                        if ((isBranch$3 = stack$5[offset$3 + 5]) === void 0) {
                                                                            isBranch$3 = stack$5[offset$3 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                        }
                                                                        if (isBranch$3 === true) {
                                                                            if ((keys$5 = stack$5[offset$3 + 6]) === void 0) {
                                                                                keys$5 = stack$5[offset$3 + 6] = [];
                                                                                index$4 = -1;
                                                                                for (invKey$3 in node) {
                                                                                    !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$5[++index$4] = invKey$3);
                                                                                }
                                                                            }
                                                                            index$4 = stack$5[offset$3 + 7] || (stack$5[offset$3 + 7] = 0);
                                                                            if (index$4 < keys$5.length) {
                                                                                stack$5[offset$3 + 7] = index$4 + 1;
                                                                                stack$5[offset$3 = ++depth$6 * 8] = node;
                                                                                stack$5[offset$3 + 1] = invKey$3 = keys$5[index$4];
                                                                                stack$5[offset$3 + 2] = node[invKey$3];
                                                                                continue;
                                                                            }
                                                                        }
                                                                        var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                        if (ref$15 && Array.isArray(ref$15)) {
                                                                            destination$5 = ref$15[__CONTEXT];
                                                                            if (destination$5) {
                                                                                var i$17 = (ref$15[__REF_INDEX] || 0) - 1, n$13 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i$17 <= n$13) {
                                                                                    destination$5[__REF + i$17] = destination$5[__REF + (i$17 + 1)];
                                                                                }
                                                                                destination$5[__REFS_LENGTH] = n$13;
                                                                                ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                            }
                                                                        }
                                                                        var ref$16, i$18 = -1, n$14 = node[__REFS_LENGTH] || 0;
                                                                        while (++i$18 < n$14) {
                                                                            if ((ref$16 = node[__REF + i$18]) !== void 0) {
                                                                                ref$16[__CONTEXT] = node[__REF + i$18] = void 0;
                                                                            }
                                                                        }
                                                                        node[__REFS_LENGTH] = void 0;
                                                                        if (node != null && typeof node === 'object') {
                                                                            var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                            (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                            (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                            node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                            node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                            node.__next = node.__prev = void 0;
                                                                            head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                        }
                                                                        nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                        delete stack$5[offset$3 + 0];
                                                                        delete stack$5[offset$3 + 1];
                                                                        delete stack$5[offset$3 + 2];
                                                                        delete stack$5[offset$3 + 3];
                                                                        delete stack$5[offset$3 + 4];
                                                                        delete stack$5[offset$3 + 5];
                                                                        delete stack$5[offset$3 + 6];
                                                                        delete stack$5[offset$3 + 7];
                                                                        --depth$6;
                                                                    }
                                                                    nodeParent = invParent$3;
                                                                    node = invChild$3;
                                                                }
                                                                nodeParent[key$2] = node = nodeValue;
                                                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                while (node = nodeParent) {
                                                                    nodeParent = node[__PARENT];
                                                                    if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                        var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                        if (ref$17 && Array.isArray(ref$17)) {
                                                                            destination$6 = ref$17[__CONTEXT];
                                                                            if (destination$6) {
                                                                                var i$19 = (ref$17[__REF_INDEX] || 0) - 1, n$15 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i$19 <= n$15) {
                                                                                    destination$6[__REF + i$19] = destination$6[__REF + (i$19 + 1)];
                                                                                }
                                                                                destination$6[__REFS_LENGTH] = n$15;
                                                                                ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                            }
                                                                        }
                                                                        var ref$18, i$20 = -1, n$16 = node[__REFS_LENGTH] || 0;
                                                                        while (++i$20 < n$16) {
                                                                            if ((ref$18 = node[__REF + i$20]) !== void 0) {
                                                                                ref$18[__CONTEXT] = node[__REF + i$20] = void 0;
                                                                            }
                                                                        }
                                                                        node[__REFS_LENGTH] = void 0;
                                                                        if (node != null && typeof node === 'object') {
                                                                            var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                            (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                            (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                            node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                            node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                            node.__next = node.__prev = void 0;
                                                                            head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                        }
                                                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                        var depth$7 = 0, references$3, ref$19, i$21, k$3, n$17;
                                                                        while (depth$7 > -1) {
                                                                            if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                i$21 = k$3 = -1;
                                                                                n$17 = node[__REFS_LENGTH] || 0;
                                                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                node[__GENERATION] = __GENERATION_GUID++;
                                                                                if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                    stack$6[depth$7] = references$3 = new Array(n$17 + 1);
                                                                                    references$3[++k$3] = ref$19;
                                                                                } else if (n$17 > 0) {
                                                                                    stack$6[depth$7] = references$3 = new Array(n$17);
                                                                                }
                                                                                while (++i$21 < n$17) {
                                                                                    if ((ref$19 = node[__REF + i$21]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                        references$3[++k$3] = ref$19;
                                                                                    }
                                                                                }
                                                                            }
                                                                            if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                ++depth$7;
                                                                            } else {
                                                                                stack$6[depth$7--] = void 0;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                nodeParent = node$4;
                                                                node = child$3;
                                                            }
                                                            if (node != null && jsonParent != null) {
                                                                if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                                    if (!(jsonNode = jsonParent[key$2]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                                        jsonNode = jsonParent[key$2] = Object.create(null);
                                                                    }
                                                                } else {
                                                                    if (boxed === true) {
                                                                        jsonParent[key$2] = node;
                                                                    } else {
                                                                        var val$3 = nodeValue;
                                                                        if (val$3 != null && typeof val$3 === 'object') {
                                                                            var src$3 = val$3, keys$6 = Object.keys(src$3), x$3, i$22 = -1, n$18 = keys$6.length;
                                                                            val$3 = Array.isArray(src$3) && new Array(src$3.length) || Object.create(null);
                                                                            while (++i$22 < n$18) {
                                                                                x$3 = keys$6[i$22];
                                                                                !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (val$3[x$3] = src$3[x$3]);
                                                                            }
                                                                        }
                                                                        if (!nodeType && (val$3 != null && typeof val$3 === 'object') && !Array.isArray(val$3)) {
                                                                            val$3[$TYPE] = LEAF;
                                                                        }
                                                                        jsonParent[key$2] = val$3;
                                                                    }
                                                                }
                                                            }
                                                            if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                nodeParent = node;
                                                                break follow_path_10599;
                                                            }
                                                            nodeParent = node;
                                                            jsonParent = jsonNode;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_10599;
                                                        } else if (refDepth === refHeight) {
                                                            optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                            node = nodeParent[key$2];
                                                            nodeType = node && node[$TYPE] || void 0;
                                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                            nodeTimestamp = node && node[$TIMESTAMP];
                                                            nodeExpires = node && node[$EXPIRES];
                                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                            }
                                                            if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                nodeType = void 0;
                                                                nodeValue = Object.create(null);
                                                                nodeSize = node && node[$SIZE] || 0;
                                                                if (node != null && node !== nodeValue) {
                                                                    var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = nodeValue[__REFS_LENGTH] || 0, i$23 = -1, ref$20;
                                                                    while (++i$23 < nodeRefsLength$4) {
                                                                        if ((ref$20 = node[__REF + i$23]) !== void 0) {
                                                                            ref$20[__CONTEXT] = nodeValue;
                                                                            nodeValue[__REF + (destRefsLength$4 + i$23)] = ref$20;
                                                                            node[__REF + i$23] = void 0;
                                                                        }
                                                                    }
                                                                    nodeValue[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                    node[__REFS_LENGTH] = ref$20 = void 0;
                                                                    var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$7, index$5, offset$4, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                            nodeParent,
                                                                            invKey$4,
                                                                            node
                                                                        ], depth$8 = 0;
                                                                    while (depth$8 > -1) {
                                                                        nodeParent = stack$7[offset$4 = depth$8 * 8];
                                                                        invKey$4 = stack$7[offset$4 + 1];
                                                                        node = stack$7[offset$4 + 2];
                                                                        if ((childType$4 = stack$7[offset$4 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                            childType$4 = stack$7[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                        }
                                                                        childValue$4 = stack$7[offset$4 + 4] || (stack$7[offset$4 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                        if ((isBranch$4 = stack$7[offset$4 + 5]) === void 0) {
                                                                            isBranch$4 = stack$7[offset$4 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                        }
                                                                        if (isBranch$4 === true) {
                                                                            if ((keys$7 = stack$7[offset$4 + 6]) === void 0) {
                                                                                keys$7 = stack$7[offset$4 + 6] = [];
                                                                                index$5 = -1;
                                                                                for (invKey$4 in node) {
                                                                                    !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$7[++index$5] = invKey$4);
                                                                                }
                                                                            }
                                                                            index$5 = stack$7[offset$4 + 7] || (stack$7[offset$4 + 7] = 0);
                                                                            if (index$5 < keys$7.length) {
                                                                                stack$7[offset$4 + 7] = index$5 + 1;
                                                                                stack$7[offset$4 = ++depth$8 * 8] = node;
                                                                                stack$7[offset$4 + 1] = invKey$4 = keys$7[index$5];
                                                                                stack$7[offset$4 + 2] = node[invKey$4];
                                                                                continue;
                                                                            }
                                                                        }
                                                                        var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                        if (ref$21 && Array.isArray(ref$21)) {
                                                                            destination$7 = ref$21[__CONTEXT];
                                                                            if (destination$7) {
                                                                                var i$24 = (ref$21[__REF_INDEX] || 0) - 1, n$19 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i$24 <= n$19) {
                                                                                    destination$7[__REF + i$24] = destination$7[__REF + (i$24 + 1)];
                                                                                }
                                                                                destination$7[__REFS_LENGTH] = n$19;
                                                                                ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                            }
                                                                        }
                                                                        var ref$22, i$25 = -1, n$20 = node[__REFS_LENGTH] || 0;
                                                                        while (++i$25 < n$20) {
                                                                            if ((ref$22 = node[__REF + i$25]) !== void 0) {
                                                                                ref$22[__CONTEXT] = node[__REF + i$25] = void 0;
                                                                            }
                                                                        }
                                                                        node[__REFS_LENGTH] = void 0;
                                                                        if (node != null && typeof node === 'object') {
                                                                            var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                            (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                            (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                            node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                            node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                            node.__next = node.__prev = void 0;
                                                                            head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                        }
                                                                        nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                        delete stack$7[offset$4 + 0];
                                                                        delete stack$7[offset$4 + 1];
                                                                        delete stack$7[offset$4 + 2];
                                                                        delete stack$7[offset$4 + 3];
                                                                        delete stack$7[offset$4 + 4];
                                                                        delete stack$7[offset$4 + 5];
                                                                        delete stack$7[offset$4 + 6];
                                                                        delete stack$7[offset$4 + 7];
                                                                        --depth$8;
                                                                    }
                                                                    nodeParent = invParent$4;
                                                                    node = invChild$4;
                                                                }
                                                                nodeParent[key$2] = node = nodeValue;
                                                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                while (node = nodeParent) {
                                                                    nodeParent = node[__PARENT];
                                                                    if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                        var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                        if (ref$23 && Array.isArray(ref$23)) {
                                                                            destination$8 = ref$23[__CONTEXT];
                                                                            if (destination$8) {
                                                                                var i$26 = (ref$23[__REF_INDEX] || 0) - 1, n$21 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                while (++i$26 <= n$21) {
                                                                                    destination$8[__REF + i$26] = destination$8[__REF + (i$26 + 1)];
                                                                                }
                                                                                destination$8[__REFS_LENGTH] = n$21;
                                                                                ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                            }
                                                                        }
                                                                        var ref$24, i$27 = -1, n$22 = node[__REFS_LENGTH] || 0;
                                                                        while (++i$27 < n$22) {
                                                                            if ((ref$24 = node[__REF + i$27]) !== void 0) {
                                                                                ref$24[__CONTEXT] = node[__REF + i$27] = void 0;
                                                                            }
                                                                        }
                                                                        node[__REFS_LENGTH] = void 0;
                                                                        if (node != null && typeof node === 'object') {
                                                                            var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                                            (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                                            (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                                            node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                                            node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                                            node.__next = node.__prev = void 0;
                                                                            head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                                        }
                                                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                        var depth$9 = 0, references$4, ref$25, i$28, k$4, n$23;
                                                                        while (depth$9 > -1) {
                                                                            if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                i$28 = k$4 = -1;
                                                                                n$23 = node[__REFS_LENGTH] || 0;
                                                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                node[__GENERATION] = __GENERATION_GUID++;
                                                                                if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                    stack$8[depth$9] = references$4 = new Array(n$23 + 1);
                                                                                    references$4[++k$4] = ref$25;
                                                                                } else if (n$23 > 0) {
                                                                                    stack$8[depth$9] = references$4 = new Array(n$23);
                                                                                }
                                                                                while (++i$28 < n$23) {
                                                                                    if ((ref$25 = node[__REF + i$28]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                        references$4[++k$4] = ref$25;
                                                                                    }
                                                                                }
                                                                            }
                                                                            if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                ++depth$9;
                                                                            } else {
                                                                                stack$8[depth$9--] = void 0;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                nodeParent = node$5;
                                                                node = child$4;
                                                            }
                                                            if (node != null && jsonParent != null) {
                                                                if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                                    if (!(jsonNode = jsonParent[key$2]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                                        jsonNode = jsonParent[key$2] = Object.create(null);
                                                                    }
                                                                } else {
                                                                    if (boxed === true) {
                                                                        jsonParent[key$2] = node;
                                                                    } else {
                                                                        var val$4 = nodeValue;
                                                                        if (val$4 != null && typeof val$4 === 'object') {
                                                                            var src$4 = val$4, keys$8 = Object.keys(src$4), x$4, i$29 = -1, n$24 = keys$8.length;
                                                                            val$4 = Array.isArray(src$4) && new Array(src$4.length) || Object.create(null);
                                                                            while (++i$29 < n$24) {
                                                                                x$4 = keys$8[i$29];
                                                                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (val$4[x$4] = src$4[x$4]);
                                                                            }
                                                                        }
                                                                        if (!nodeType && (val$4 != null && typeof val$4 === 'object') && !Array.isArray(val$4)) {
                                                                            val$4[$TYPE] = LEAF;
                                                                        }
                                                                        jsonParent[key$2] = val$4;
                                                                    }
                                                                }
                                                            }
                                                            if (node != null) {
                                                                var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                // Set up the hard-link so we don't have to do all
                                                                // this work the next time we follow this reference.
                                                                if (refContext === void 0) {
                                                                    // create a back reference
                                                                    var backRefs = node[__REFS_LENGTH] || 0;
                                                                    node[__REF + backRefs] = refContainer;
                                                                    node[__REFS_LENGTH] = backRefs + 1;
                                                                    // create a hard reference
                                                                    refContainer[__REF_INDEX] = backRefs;
                                                                    refContainer[__CONTEXT] = node;
                                                                    refContainer = backRefs = void 0;
                                                                }
                                                                ;
                                                            }
                                                            appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                            nodeParent = node;
                                                            break follow_path_10599;
                                                        }
                                                    } else if (refDepth < refHeight) {
                                                        nodeParent = node;
                                                        jsonParent = jsonNode;
                                                        refDepth = refDepth + 1;
                                                        continue follow_path_10599;
                                                    }
                                                    nodeParent = node;
                                                    break follow_path_10599;
                                                } while (true);
                                            node = nodeParent;
                                        }
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        nodeExpires = node && node[$EXPIRES];
                                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                    } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                    if (node == null) {
                                        while (refDepth <= refHeight) {
                                            optimizedPath[refDepth] = reference[refDepth++];
                                        }
                                    }
                                }
                                if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                    nodeParent = node;
                                    break follow_path_10199;
                                }
                                nodeParent = nodes[depth] = node;
                                jsonParent = jsons[depth] = jsonNode;
                                depth = depth + 1;
                                continue follow_path_10199;
                            } else if (depth === height) {
                                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                nodeType = value && value[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                                nodeTimestamp = value && value[$TIMESTAMP];
                                nodeExpires = value && value[$EXPIRES];
                                var newNode$2, size_offset$2, leafSize$2 = node && node[$SIZE] || 0;
                                newNode$2 = value;
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    nodeType = 'array';
                                    newNode$2[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                                    delete nodeValue[$SIZE];
                                    nodeValue[__CONTAINER] = newNode$2;
                                } else if (nodeType === SENTINEL) {
                                    newNode$2[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                } else if (nodeType === ERROR) {
                                    newNode$2[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                                } else if (!(value != null && typeof value === 'object')) {
                                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                    nodeType = 'sentinel';
                                    newNode$2 = { 'value': nodeValue };
                                    newNode$2[$TYPE] = nodeType;
                                    newNode$2[$SIZE] = nodeSize;
                                } else {
                                    nodeType = newNode$2[$TYPE] = nodeType || 'leaf';
                                    newNode$2[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                                }
                                ;
                                if (node != null && node !== newNode$2) {
                                    var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = newNode$2[__REFS_LENGTH] || 0, i$30 = -1, ref$26;
                                    while (++i$30 < nodeRefsLength$5) {
                                        if ((ref$26 = node[__REF + i$30]) !== void 0) {
                                            ref$26[__CONTEXT] = newNode$2;
                                            newNode$2[__REF + (destRefsLength$5 + i$30)] = ref$26;
                                            node[__REF + i$30] = void 0;
                                        }
                                    }
                                    newNode$2[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                    node[__REFS_LENGTH] = ref$26 = void 0;
                                    var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$9, index$6, offset$5, childType$5, childValue$5, isBranch$5, stack$9 = [
                                            nodeParent,
                                            invKey$5,
                                            node
                                        ], depth$10 = 0;
                                    while (depth$10 > -1) {
                                        nodeParent = stack$9[offset$5 = depth$10 * 8];
                                        invKey$5 = stack$9[offset$5 + 1];
                                        node = stack$9[offset$5 + 2];
                                        if ((childType$5 = stack$9[offset$5 + 3]) === void 0 || (childType$5 = void 0)) {
                                            childType$5 = stack$9[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                        }
                                        childValue$5 = stack$9[offset$5 + 4] || (stack$9[offset$5 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                        if ((isBranch$5 = stack$9[offset$5 + 5]) === void 0) {
                                            isBranch$5 = stack$9[offset$5 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                        }
                                        if (isBranch$5 === true) {
                                            if ((keys$9 = stack$9[offset$5 + 6]) === void 0) {
                                                keys$9 = stack$9[offset$5 + 6] = [];
                                                index$6 = -1;
                                                for (invKey$5 in node) {
                                                    !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$9[++index$6] = invKey$5);
                                                }
                                            }
                                            index$6 = stack$9[offset$5 + 7] || (stack$9[offset$5 + 7] = 0);
                                            if (index$6 < keys$9.length) {
                                                stack$9[offset$5 + 7] = index$6 + 1;
                                                stack$9[offset$5 = ++depth$10 * 8] = node;
                                                stack$9[offset$5 + 1] = invKey$5 = keys$9[index$6];
                                                stack$9[offset$5 + 2] = node[invKey$5];
                                                continue;
                                            }
                                        }
                                        var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                        if (ref$27 && Array.isArray(ref$27)) {
                                            destination$9 = ref$27[__CONTEXT];
                                            if (destination$9) {
                                                var i$31 = (ref$27[__REF_INDEX] || 0) - 1, n$25 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                                while (++i$31 <= n$25) {
                                                    destination$9[__REF + i$31] = destination$9[__REF + (i$31 + 1)];
                                                }
                                                destination$9[__REFS_LENGTH] = n$25;
                                                ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                            }
                                        }
                                        var ref$28, i$32 = -1, n$26 = node[__REFS_LENGTH] || 0;
                                        while (++i$32 < n$26) {
                                            if ((ref$28 = node[__REF + i$32]) !== void 0) {
                                                ref$28[__CONTEXT] = node[__REF + i$32] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        if (node != null && typeof node === 'object') {
                                            var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                            (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                            (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                            node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                            node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                            node.__next = node.__prev = void 0;
                                            head$11 = tail$11 = next$11 = prev$11 = void 0;
                                        }
                                        nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        delete stack$9[offset$5 + 0];
                                        delete stack$9[offset$5 + 1];
                                        delete stack$9[offset$5 + 2];
                                        delete stack$9[offset$5 + 3];
                                        delete stack$9[offset$5 + 4];
                                        delete stack$9[offset$5 + 5];
                                        delete stack$9[offset$5 + 6];
                                        delete stack$9[offset$5 + 7];
                                        --depth$10;
                                    }
                                    nodeParent = invParent$5;
                                    node = invChild$5;
                                }
                                nodeParent[key] = node = newNode$2;
                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                size_offset$2 = leafSize$2 - nodeSize;
                                var node$6 = nodeParent, child$5 = node, stack$10 = [];
                                while (node = nodeParent) {
                                    nodeParent = node[__PARENT];
                                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                        var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                        if (ref$29 && Array.isArray(ref$29)) {
                                            destination$10 = ref$29[__CONTEXT];
                                            if (destination$10) {
                                                var i$33 = (ref$29[__REF_INDEX] || 0) - 1, n$27 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                                while (++i$33 <= n$27) {
                                                    destination$10[__REF + i$33] = destination$10[__REF + (i$33 + 1)];
                                                }
                                                destination$10[__REFS_LENGTH] = n$27;
                                                ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                            }
                                        }
                                        var ref$30, i$34 = -1, n$28 = node[__REFS_LENGTH] || 0;
                                        while (++i$34 < n$28) {
                                            if ((ref$30 = node[__REF + i$34]) !== void 0) {
                                                ref$30[__CONTEXT] = node[__REF + i$34] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        if (node != null && typeof node === 'object') {
                                            var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12, prev$12;
                                            (next$12 = node.__next) && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                            (prev$12 = node.__prev) && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                            node === head$12 && (root$13.__head = root$13.__next = head$12 = next$12);
                                            node === tail$12 && (root$13.__tail = root$13.__prev = tail$12 = prev$12);
                                            node.__next = node.__prev = void 0;
                                            head$12 = tail$12 = next$12 = prev$12 = void 0;
                                        }
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        var depth$11 = 0, references$5, ref$31, i$35, k$5, n$29;
                                        while (depth$11 > -1) {
                                            if ((references$5 = stack$10[depth$11]) === void 0) {
                                                i$35 = k$5 = -1;
                                                n$29 = node[__REFS_LENGTH] || 0;
                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                node[__GENERATION] = __GENERATION_GUID++;
                                                if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    stack$10[depth$11] = references$5 = new Array(n$29 + 1);
                                                    references$5[++k$5] = ref$31;
                                                } else if (n$29 > 0) {
                                                    stack$10[depth$11] = references$5 = new Array(n$29);
                                                }
                                                while (++i$35 < n$29) {
                                                    if ((ref$31 = node[__REF + i$35]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        references$5[++k$5] = ref$31;
                                                    }
                                                }
                                            }
                                            if ((node = references$5 && references$5.pop()) !== void 0) {
                                                ++depth$11;
                                            } else {
                                                stack$10[depth$11--] = void 0;
                                            }
                                        }
                                    }
                                }
                                nodeParent = node$6;
                                node = child$5;
                                if (node != null && typeof node === 'object') {
                                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    } else {
                                        if (nodeExpires !== 1) {
                                            var root$14 = root, head$13 = root$14.__head, tail$13 = root$14.__tail, next$13 = node.__next, prev$13 = node.__prev;
                                            if (node !== head$13) {
                                                next$13 && (next$13 != null && typeof next$13 === 'object') && (next$13.__prev = prev$13);
                                                prev$13 && (prev$13 != null && typeof prev$13 === 'object') && (prev$13.__next = next$13);
                                                (next$13 = head$13) && (head$13 != null && typeof head$13 === 'object') && (head$13.__prev = node);
                                                root$14.__head = root$14.__next = head$13 = node;
                                                head$13.__next = next$13;
                                                head$13.__prev = void 0;
                                            }
                                            if (tail$13 == null || node === tail$13) {
                                                root$14.__tail = root$14.__prev = tail$13 = prev$13 || node;
                                            }
                                            root$14 = head$13 = tail$13 = next$13 = prev$13 = void 0;
                                        }
                                    }
                                }
                                if (node != null && jsonParent != null) {
                                    if (boxed === true) {
                                        jsonParent[key] = node;
                                    } else {
                                        var val$5 = nodeValue;
                                        if (val$5 != null && typeof val$5 === 'object') {
                                            var src$5 = val$5, keys$10 = Object.keys(src$5), x$5, i$36 = -1, n$30 = keys$10.length;
                                            val$5 = Array.isArray(src$5) && new Array(src$5.length) || Object.create(null);
                                            while (++i$36 < n$30) {
                                                x$5 = keys$10[i$36];
                                                !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (val$5[x$5] = src$5[x$5]);
                                            }
                                        }
                                        if (!nodeType && (val$5 != null && typeof val$5 === 'object') && !Array.isArray(val$5)) {
                                            val$5[$TYPE] = LEAF;
                                        }
                                        jsonParent[key] = val$5;
                                    }
                                }
                                appendNullKey = false;
                                nodeParent = node;
                                break follow_path_10199;
                            }
                        } else if (depth < height) {
                            nodeParent = nodeParent;
                            jsonParent = jsonParent;
                            depth = depth + 1;
                            continue follow_path_10199;
                        }
                        nodeParent = node;
                        break follow_path_10199;
                    } while (true);
                node = nodeParent;
            }
            if (node != null || boxed === true) {
                if (nodeType === ERROR) {
                    if (nodeExpires !== 1) {
                        var root$15 = root, head$14 = root$15.__head, tail$14 = root$15.__tail, next$14 = node.__next, prev$14 = node.__prev;
                        if (node !== head$14) {
                            next$14 && (next$14 != null && typeof next$14 === 'object') && (next$14.__prev = prev$14);
                            prev$14 && (prev$14 != null && typeof prev$14 === 'object') && (prev$14.__next = next$14);
                            (next$14 = head$14) && (head$14 != null && typeof head$14 === 'object') && (head$14.__prev = node);
                            root$15.__head = root$15.__next = head$14 = node;
                            head$14.__next = next$14;
                            head$14.__prev = void 0;
                        }
                        if (tail$14 == null || node === tail$14) {
                            root$15.__tail = root$15.__prev = tail$14 = prev$14 || node;
                        }
                        root$15 = head$14 = tail$14 = next$14 = prev$14 = void 0;
                    }
                    node = onErrorAsJSONG(errors, boxed, requestedPath, index, node, nodeValue);
                }
                hasValue || (hasValue = jsonParent != null);
                var src$6 = optimizedPath, i$37 = -1, n$31 = src$6.length, opt = new Array(n$31);
                while (++i$37 < n$31) {
                    opt[i$37] = src$6[i$37];
                }
                var src$7 = requestedPath, i$38 = -1, n$32 = src$7.length, req = new Array(n$32);
                while (++i$38 < n$32) {
                    req[i$38] = src$7[i$38];
                }
                if (appendNullKey === true) {
                    req[req.length] = null;
                }
                requestedPaths[requestedPaths.length] = req;
                optimizedPaths[optimizedPaths.length] = opt;
            }
            if (boxed === false && node == null || refreshing === true) {
                var src$8 = boundPath, i$39 = -1, n$33 = src$8.length, req$2 = new Array(n$33);
                while (++i$39 < n$33) {
                    req$2[i$39] = src$8[i$39];
                }
                var src$9 = optimizedPath, i$40 = -1, n$34 = src$9.length, opt$2 = new Array(n$34);
                while (++i$40 < n$34) {
                    opt$2[i$40] = src$9[i$40];
                }
                var reqLen = req$2.length - 1, optLen = opt$2.length - 1, i$41 = -1, n$35 = requestedPath.length, j$2 = depth, k$6 = height, x$6;
                while (++i$41 < n$35) {
                    req$2[++reqLen] = path[i$41 + boundLength] != null && typeof path[i$41 + boundLength] === 'object' && [requestedPath[i$41]] || requestedPath[i$41];
                }
                i$41 = -1;
                n$35 = height - depth;
                while (++i$41 < n$35) {
                    x$6 = req$2[++reqLen] = path[++j$2 + boundLength];
                    x$6 != null && (opt$2[++optLen] = x$6);
                }
                req$2.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req$2;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
            }
            appendNullKey = false;
            var key$3;
            depth = depth;
            unroll_9816:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_9816;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_9816;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_9816;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_9816;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_9816;
                    }
                    depth = path.depth = depth;
                    break unroll_9816;
                } while (true);
            depth = depth;
        }
    }
    values && (values[0] = hasValue && {
        paths: requestedPaths,
        jsong: jsons[-1]
    } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathsAsPathMap(model, pathValues, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var boundLength = 0, nodeRoot = model._cache || (model._cache = {}), nodeParent, node;
    if (Array.isArray(boundPath)) {
        nodeParent = nodeRoot;
        boundLength = boundPath.length;
    } else {
        nodeParent = getBoundContext(model);
        boundPath = model._path || [];
    }
    var value, root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$6, y) {
        return y;
    });
    var nodes = pathValues.nodes || (pathValues.nodes = []);
    var jsons = pathValues.jsons || (pathValues.jsons = []);
    var errors = pathValues.errors || (pathValues.errors = []);
    var refs = pathValues.refs || (pathValues.refs = []);
    var depth = pathValues.depth || (pathValues.depth = 0);
    var refIndex = pathValues.refIndex || (pathValues.refIndex = 0);
    var refDepth = pathValues.refDepth || (pathValues.refDepth = 0);
    var requestedPath = pathValues.requestedPath || (pathValues.requestedPath = []);
    var optimizedPath = pathValues.optimizedPath || (pathValues.optimizedPath = []);
    var requestedPaths = pathValues.requestedPaths || (pathValues.requestedPaths = []);
    var optimizedPaths = pathValues.optimizedPaths || (pathValues.optimizedPaths = []);
    var requestedMissingPaths = pathValues.requestedMissingPaths || (pathValues.requestedMissingPaths = []);
    var optimizedMissingPaths = pathValues.optimizedMissingPaths || (pathValues.optimizedMissingPaths = []);
    var hasValue = pathValues.hasValue || (pathValues.hasValue = false);
    var jsonRoot = pathValues.jsonRoot || (pathValues.jsonRoot = values && values[0]);
    var jsonParent = pathValues.jsonParent || (pathValues.jsonParent = jsonRoot);
    var jsonNode = pathValues.jsonNode || (pathValues.jsonNode = jsonParent);
    var path, length = 0, height = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-1] = jsonParent;
    jsons[-2] = jsons;
    var index = -1, count = pathValues.length;
    while (++index < count) {
        path = pathValues[index];
        value = path.value;
        path = path.path;
        depth = 0;
        length = path.length;
        height = length - 1;
        var ref;
        refs.length = 0;
        while (depth > -1) {
            refIndex = depth;
            while (--refIndex >= -1) {
                if (!!(ref = refs[refIndex])) {
                    refLength = ref.length;
                    var i = -1, j = 0;
                    while (++i < refLength) {
                        optimizedPath[j++] = ref[i];
                    }
                    i = ++refIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    optimizedPath.length = j;
                    break;
                }
            }
            var key, isKeySet;
            path = path;
            height = (length = path.length) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                node = nodeParent[key];
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                nodeTimestamp = node && node[$TIMESTAMP];
                nodeExpires = node && node[$EXPIRES];
                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                nodeType = value && value[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                nodeTimestamp = value && value[$TIMESTAMP];
                nodeExpires = value && value[$EXPIRES];
                var newNode, size_offset, leafSize = node && node[$SIZE] || 0;
                newNode = value;
                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                    nodeType = 'array';
                    newNode[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                    delete nodeValue[$SIZE];
                    nodeValue[__CONTAINER] = newNode;
                } else if (nodeType === SENTINEL) {
                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                } else if (nodeType === ERROR) {
                    newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                } else if (!(value != null && typeof value === 'object')) {
                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                    nodeType = 'sentinel';
                    newNode = { 'value': nodeValue };
                    newNode[$TYPE] = nodeType;
                    newNode[$SIZE] = nodeSize;
                } else {
                    nodeType = newNode[$TYPE] = nodeType || 'leaf';
                    newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                }
                ;
                if (node != null && node !== newNode) {
                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = newNode[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                    while (++i$2 < nodeRefsLength) {
                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                            ref$2[__CONTEXT] = newNode;
                            newNode[__REF + (destRefsLength + i$2)] = ref$2;
                            node[__REF + i$2] = void 0;
                        }
                    }
                    newNode[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                    node[__REFS_LENGTH] = ref$2 = void 0;
                    var invParent = nodeParent, invChild = node, invKey = key, keys, index$2, offset, childType, childValue, isBranch, stack = [
                            nodeParent,
                            invKey,
                            node
                        ], depth$2 = 0;
                    while (depth$2 > -1) {
                        nodeParent = stack[offset = depth$2 * 8];
                        invKey = stack[offset + 1];
                        node = stack[offset + 2];
                        if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                            childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                        }
                        childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                        if ((isBranch = stack[offset + 5]) === void 0) {
                            isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                        }
                        if (isBranch === true) {
                            if ((keys = stack[offset + 6]) === void 0) {
                                keys = stack[offset + 6] = [];
                                index$2 = -1;
                                for (invKey in node) {
                                    !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys[++index$2] = invKey);
                                }
                            }
                            index$2 = stack[offset + 7] || (stack[offset + 7] = 0);
                            if (index$2 < keys.length) {
                                stack[offset + 7] = index$2 + 1;
                                stack[offset = ++depth$2 * 8] = node;
                                stack[offset + 1] = invKey = keys[index$2];
                                stack[offset + 2] = node[invKey];
                                continue;
                            }
                        }
                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                        if (ref$3 && Array.isArray(ref$3)) {
                            destination = ref$3[__CONTEXT];
                            if (destination) {
                                var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                while (++i$3 <= n) {
                                    destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                }
                                destination[__REFS_LENGTH] = n;
                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                            }
                        }
                        var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                        while (++i$4 < n$2) {
                            if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                            (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                            (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            node === head && (root$2.__head = root$2.__next = head = next);
                            node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                            node.__next = node.__prev = void 0;
                            head = tail = next = prev = void 0;
                        }
                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                        delete stack[offset + 0];
                        delete stack[offset + 1];
                        delete stack[offset + 2];
                        delete stack[offset + 3];
                        delete stack[offset + 4];
                        delete stack[offset + 5];
                        delete stack[offset + 6];
                        delete stack[offset + 7];
                        --depth$2;
                    }
                    nodeParent = invParent;
                    node = invChild;
                }
                nodeParent[key] = node = newNode;
                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                size_offset = leafSize - nodeSize;
                var node$2 = nodeParent, child = node, stack$2 = [];
                while (node = nodeParent) {
                    nodeParent = node[__PARENT];
                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                        var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                        if (ref$5 && Array.isArray(ref$5)) {
                            destination$2 = ref$5[__CONTEXT];
                            if (destination$2) {
                                var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                while (++i$5 <= n$3) {
                                    destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                }
                                destination$2[__REFS_LENGTH] = n$3;
                                ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                            }
                        }
                        var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                        while (++i$6 < n$4) {
                            if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                            (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                            (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                            node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                            node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                            node.__next = node.__prev = void 0;
                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                        }
                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                        var depth$3 = 0, references, ref$7, i$7, k, n$5;
                        while (depth$3 > -1) {
                            if ((references = stack$2[depth$3]) === void 0) {
                                i$7 = k = -1;
                                n$5 = node[__REFS_LENGTH] || 0;
                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                node[__GENERATION] = __GENERATION_GUID++;
                                if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    stack$2[depth$3] = references = new Array(n$5 + 1);
                                    references[++k] = ref$7;
                                } else if (n$5 > 0) {
                                    stack$2[depth$3] = references = new Array(n$5);
                                }
                                while (++i$7 < n$5) {
                                    if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        references[++k] = ref$7;
                                    }
                                }
                            }
                            if ((node = references && references.pop()) !== void 0) {
                                ++depth$3;
                            } else {
                                stack$2[depth$3--] = void 0;
                            }
                        }
                    }
                }
                nodeParent = node$2;
                node = child;
                if (node != null && typeof node === 'object') {
                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    } else {
                        if (nodeExpires !== 1) {
                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                            if (node !== head$3) {
                                next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                root$4.__head = root$4.__next = head$3 = node;
                                head$3.__next = next$3;
                                head$3.__prev = void 0;
                            }
                            if (tail$3 == null || node === tail$3) {
                                root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                            }
                            root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                        }
                    }
                }
                if (depth >= boundLength) {
                    if (node != null && jsonParent != null) {
                        if (boxed === true) {
                            jsonParent[key] = node;
                        } else {
                            var val = nodeValue;
                            if (val != null && typeof val === 'object') {
                                var src = val, keys$2 = Object.keys(src), x, i$8 = -1, n$6 = keys$2.length;
                                val = Array.isArray(src) && new Array(src.length) || Object.create(null);
                                while (++i$8 < n$6) {
                                    x = keys$2[i$8];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (val[x] = src[x]);
                                }
                            }
                            if (val != null && typeof val === 'object' && !Array.isArray(val)) {
                                val[$TYPE] = LEAF;
                            }
                            jsonParent[key] = val;
                        }
                    }
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                jsonParent = jsonNode = jsons[depth - 1];
                depth = depth;
                follow_path_14084:
                    do {
                        key = path[depth];
                        if (isKeySet = key != null && typeof key === 'object') {
                            if (Array.isArray(key)) {
                                if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        if (key === __NULL) {
                            key = null;
                        }
                        depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                        if (key != null) {
                            if (depth < height) {
                                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                    nodeType = void 0;
                                    nodeValue = Object.create(null);
                                    nodeSize = node && node[$SIZE] || 0;
                                    if (node != null && node !== nodeValue) {
                                        var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = nodeValue[__REFS_LENGTH] || 0, i$9 = -1, ref$8;
                                        while (++i$9 < nodeRefsLength$2) {
                                            if ((ref$8 = node[__REF + i$9]) !== void 0) {
                                                ref$8[__CONTEXT] = nodeValue;
                                                nodeValue[__REF + (destRefsLength$2 + i$9)] = ref$8;
                                                node[__REF + i$9] = void 0;
                                            }
                                        }
                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                        node[__REFS_LENGTH] = ref$8 = void 0;
                                        var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$3, offset$2, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                nodeParent,
                                                invKey$2,
                                                node
                                            ], depth$4 = 0;
                                        while (depth$4 > -1) {
                                            nodeParent = stack$3[offset$2 = depth$4 * 8];
                                            invKey$2 = stack$3[offset$2 + 1];
                                            node = stack$3[offset$2 + 2];
                                            if ((childType$2 = stack$3[offset$2 + 3]) === void 0 || (childType$2 = void 0)) {
                                                childType$2 = stack$3[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                            }
                                            childValue$2 = stack$3[offset$2 + 4] || (stack$3[offset$2 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                            if ((isBranch$2 = stack$3[offset$2 + 5]) === void 0) {
                                                isBranch$2 = stack$3[offset$2 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                            }
                                            if (isBranch$2 === true) {
                                                if ((keys$3 = stack$3[offset$2 + 6]) === void 0) {
                                                    keys$3 = stack$3[offset$2 + 6] = [];
                                                    index$3 = -1;
                                                    for (invKey$2 in node) {
                                                        !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$3[++index$3] = invKey$2);
                                                    }
                                                }
                                                index$3 = stack$3[offset$2 + 7] || (stack$3[offset$2 + 7] = 0);
                                                if (index$3 < keys$3.length) {
                                                    stack$3[offset$2 + 7] = index$3 + 1;
                                                    stack$3[offset$2 = ++depth$4 * 8] = node;
                                                    stack$3[offset$2 + 1] = invKey$2 = keys$3[index$3];
                                                    stack$3[offset$2 + 2] = node[invKey$2];
                                                    continue;
                                                }
                                            }
                                            var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                            if (ref$9 && Array.isArray(ref$9)) {
                                                destination$3 = ref$9[__CONTEXT];
                                                if (destination$3) {
                                                    var i$10 = (ref$9[__REF_INDEX] || 0) - 1, n$7 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$10 <= n$7) {
                                                        destination$3[__REF + i$10] = destination$3[__REF + (i$10 + 1)];
                                                    }
                                                    destination$3[__REFS_LENGTH] = n$7;
                                                    ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                }
                                            }
                                            var ref$10, i$11 = -1, n$8 = node[__REFS_LENGTH] || 0;
                                            while (++i$11 < n$8) {
                                                if ((ref$10 = node[__REF + i$11]) !== void 0) {
                                                    ref$10[__CONTEXT] = node[__REF + i$11] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            if (node != null && typeof node === 'object') {
                                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                node.__next = node.__prev = void 0;
                                                head$4 = tail$4 = next$4 = prev$4 = void 0;
                                            }
                                            nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            delete stack$3[offset$2 + 0];
                                            delete stack$3[offset$2 + 1];
                                            delete stack$3[offset$2 + 2];
                                            delete stack$3[offset$2 + 3];
                                            delete stack$3[offset$2 + 4];
                                            delete stack$3[offset$2 + 5];
                                            delete stack$3[offset$2 + 6];
                                            delete stack$3[offset$2 + 7];
                                            --depth$4;
                                        }
                                        nodeParent = invParent$2;
                                        node = invChild$2;
                                    }
                                    nodeParent[key] = node = nodeValue;
                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                    while (node = nodeParent) {
                                        nodeParent = node[__PARENT];
                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                            var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                            if (ref$11 && Array.isArray(ref$11)) {
                                                destination$4 = ref$11[__CONTEXT];
                                                if (destination$4) {
                                                    var i$12 = (ref$11[__REF_INDEX] || 0) - 1, n$9 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$12 <= n$9) {
                                                        destination$4[__REF + i$12] = destination$4[__REF + (i$12 + 1)];
                                                    }
                                                    destination$4[__REFS_LENGTH] = n$9;
                                                    ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                }
                                            }
                                            var ref$12, i$13 = -1, n$10 = node[__REFS_LENGTH] || 0;
                                            while (++i$13 < n$10) {
                                                if ((ref$12 = node[__REF + i$13]) !== void 0) {
                                                    ref$12[__CONTEXT] = node[__REF + i$13] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            if (node != null && typeof node === 'object') {
                                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5, prev$5;
                                                (next$5 = node.__next) && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                (prev$5 = node.__prev) && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                node === head$5 && (root$6.__head = root$6.__next = head$5 = next$5);
                                                node === tail$5 && (root$6.__tail = root$6.__prev = tail$5 = prev$5);
                                                node.__next = node.__prev = void 0;
                                                head$5 = tail$5 = next$5 = prev$5 = void 0;
                                            }
                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            var depth$5 = 0, references$2, ref$13, i$14, k$2, n$11;
                                            while (depth$5 > -1) {
                                                if ((references$2 = stack$4[depth$5]) === void 0) {
                                                    i$14 = k$2 = -1;
                                                    n$11 = node[__REFS_LENGTH] || 0;
                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                    if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        stack$4[depth$5] = references$2 = new Array(n$11 + 1);
                                                        references$2[++k$2] = ref$13;
                                                    } else if (n$11 > 0) {
                                                        stack$4[depth$5] = references$2 = new Array(n$11);
                                                    }
                                                    while (++i$14 < n$11) {
                                                        if ((ref$13 = node[__REF + i$14]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            references$2[++k$2] = ref$13;
                                                        }
                                                    }
                                                }
                                                if ((node = references$2 && references$2.pop()) !== void 0) {
                                                    ++depth$5;
                                                } else {
                                                    stack$4[depth$5--] = void 0;
                                                }
                                            }
                                        }
                                    }
                                    nodeParent = node$3;
                                    node = child$2;
                                }
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    do {
                                        if (nodeExpires !== 1) {
                                            var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                            if (node !== head$6) {
                                                next$6 && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                prev$6 && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                                root$7.__head = root$7.__next = head$6 = node;
                                                head$6.__next = next$6;
                                                head$6.__prev = void 0;
                                            }
                                            if (tail$6 == null || node === tail$6) {
                                                root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                            }
                                            root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        }
                                        refs[depth] = nodeValue;
                                        refIndex = depth + 1;
                                        refDepth = 0;
                                        var location = (nodeValue[__CONTAINER] || nodeValue)[__CONTEXT];
                                        if (location !== void 0) {
                                            node = location;
                                            refHeight = (refLength = nodeValue.length) - 1;
                                            while (refDepth < refLength) {
                                                optimizedPath[refDepth] = nodeValue[refDepth++];
                                            }
                                            optimizedPath.length = refLength;
                                        } else {
                                            var key$2, isKeySet$2;
                                            reference = nodeValue;
                                            refHeight = (refLength = reference.length) - 1;
                                            nodeParent = nodeRoot;
                                            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                node = node = nodeParent;
                                            } else {
                                                nodeParent = nodeRoot;
                                                jsonParent = jsonRoot;
                                                refDepth = refDepth;
                                                follow_path_14457:
                                                    do {
                                                        key$2 = reference[refDepth];
                                                        isKeySet$2 = false;
                                                        if (key$2 != null) {
                                                            if (refDepth < refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                    nodeType = void 0;
                                                                    nodeValue = Object.create(null);
                                                                    nodeSize = node && node[$SIZE] || 0;
                                                                    if (node != null && node !== nodeValue) {
                                                                        var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$15 = -1, ref$14;
                                                                        while (++i$15 < nodeRefsLength$3) {
                                                                            if ((ref$14 = node[__REF + i$15]) !== void 0) {
                                                                                ref$14[__CONTEXT] = nodeValue;
                                                                                nodeValue[__REF + (destRefsLength$3 + i$15)] = ref$14;
                                                                                node[__REF + i$15] = void 0;
                                                                            }
                                                                        }
                                                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                        node[__REFS_LENGTH] = ref$14 = void 0;
                                                                        var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$4, index$4, offset$3, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                nodeParent,
                                                                                invKey$3,
                                                                                node
                                                                            ], depth$6 = 0;
                                                                        while (depth$6 > -1) {
                                                                            nodeParent = stack$5[offset$3 = depth$6 * 8];
                                                                            invKey$3 = stack$5[offset$3 + 1];
                                                                            node = stack$5[offset$3 + 2];
                                                                            if ((childType$3 = stack$5[offset$3 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                childType$3 = stack$5[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                                            }
                                                                            childValue$3 = stack$5[offset$3 + 4] || (stack$5[offset$3 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                            if ((isBranch$3 = stack$5[offset$3 + 5]) === void 0) {
                                                                                isBranch$3 = stack$5[offset$3 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                            }
                                                                            if (isBranch$3 === true) {
                                                                                if ((keys$4 = stack$5[offset$3 + 6]) === void 0) {
                                                                                    keys$4 = stack$5[offset$3 + 6] = [];
                                                                                    index$4 = -1;
                                                                                    for (invKey$3 in node) {
                                                                                        !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$4[++index$4] = invKey$3);
                                                                                    }
                                                                                }
                                                                                index$4 = stack$5[offset$3 + 7] || (stack$5[offset$3 + 7] = 0);
                                                                                if (index$4 < keys$4.length) {
                                                                                    stack$5[offset$3 + 7] = index$4 + 1;
                                                                                    stack$5[offset$3 = ++depth$6 * 8] = node;
                                                                                    stack$5[offset$3 + 1] = invKey$3 = keys$4[index$4];
                                                                                    stack$5[offset$3 + 2] = node[invKey$3];
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                            if (ref$15 && Array.isArray(ref$15)) {
                                                                                destination$5 = ref$15[__CONTEXT];
                                                                                if (destination$5) {
                                                                                    var i$16 = (ref$15[__REF_INDEX] || 0) - 1, n$12 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$16 <= n$12) {
                                                                                        destination$5[__REF + i$16] = destination$5[__REF + (i$16 + 1)];
                                                                                    }
                                                                                    destination$5[__REFS_LENGTH] = n$12;
                                                                                    ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$16, i$17 = -1, n$13 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$17 < n$13) {
                                                                                if ((ref$16 = node[__REF + i$17]) !== void 0) {
                                                                                    ref$16[__CONTEXT] = node[__REF + i$17] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                            }
                                                                            nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            delete stack$5[offset$3 + 0];
                                                                            delete stack$5[offset$3 + 1];
                                                                            delete stack$5[offset$3 + 2];
                                                                            delete stack$5[offset$3 + 3];
                                                                            delete stack$5[offset$3 + 4];
                                                                            delete stack$5[offset$3 + 5];
                                                                            delete stack$5[offset$3 + 6];
                                                                            delete stack$5[offset$3 + 7];
                                                                            --depth$6;
                                                                        }
                                                                        nodeParent = invParent$3;
                                                                        node = invChild$3;
                                                                    }
                                                                    nodeParent[key$2] = node = nodeValue;
                                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                    var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                    while (node = nodeParent) {
                                                                        nodeParent = node[__PARENT];
                                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                            var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                            if (ref$17 && Array.isArray(ref$17)) {
                                                                                destination$6 = ref$17[__CONTEXT];
                                                                                if (destination$6) {
                                                                                    var i$18 = (ref$17[__REF_INDEX] || 0) - 1, n$14 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$18 <= n$14) {
                                                                                        destination$6[__REF + i$18] = destination$6[__REF + (i$18 + 1)];
                                                                                    }
                                                                                    destination$6[__REFS_LENGTH] = n$14;
                                                                                    ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$18, i$19 = -1, n$15 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$19 < n$15) {
                                                                                if ((ref$18 = node[__REF + i$19]) !== void 0) {
                                                                                    ref$18[__CONTEXT] = node[__REF + i$19] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                            }
                                                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            var depth$7 = 0, references$3, ref$19, i$20, k$3, n$16;
                                                                            while (depth$7 > -1) {
                                                                                if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                    i$20 = k$3 = -1;
                                                                                    n$16 = node[__REFS_LENGTH] || 0;
                                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                                                    if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                        stack$6[depth$7] = references$3 = new Array(n$16 + 1);
                                                                                        references$3[++k$3] = ref$19;
                                                                                    } else if (n$16 > 0) {
                                                                                        stack$6[depth$7] = references$3 = new Array(n$16);
                                                                                    }
                                                                                    while (++i$20 < n$16) {
                                                                                        if ((ref$19 = node[__REF + i$20]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            references$3[++k$3] = ref$19;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                    ++depth$7;
                                                                                } else {
                                                                                    stack$6[depth$7--] = void 0;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    nodeParent = node$4;
                                                                    node = child$3;
                                                                }
                                                                if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                    nodeParent = node;
                                                                    break follow_path_14457;
                                                                }
                                                                nodeParent = node;
                                                                jsonParent = jsonNode;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_14457;
                                                            } else if (refDepth === refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                    nodeType = void 0;
                                                                    nodeValue = Object.create(null);
                                                                    nodeSize = node && node[$SIZE] || 0;
                                                                    if (node != null && node !== nodeValue) {
                                                                        var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = nodeValue[__REFS_LENGTH] || 0, i$21 = -1, ref$20;
                                                                        while (++i$21 < nodeRefsLength$4) {
                                                                            if ((ref$20 = node[__REF + i$21]) !== void 0) {
                                                                                ref$20[__CONTEXT] = nodeValue;
                                                                                nodeValue[__REF + (destRefsLength$4 + i$21)] = ref$20;
                                                                                node[__REF + i$21] = void 0;
                                                                            }
                                                                        }
                                                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                        node[__REFS_LENGTH] = ref$20 = void 0;
                                                                        var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$5, index$5, offset$4, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                nodeParent,
                                                                                invKey$4,
                                                                                node
                                                                            ], depth$8 = 0;
                                                                        while (depth$8 > -1) {
                                                                            nodeParent = stack$7[offset$4 = depth$8 * 8];
                                                                            invKey$4 = stack$7[offset$4 + 1];
                                                                            node = stack$7[offset$4 + 2];
                                                                            if ((childType$4 = stack$7[offset$4 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                childType$4 = stack$7[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                            }
                                                                            childValue$4 = stack$7[offset$4 + 4] || (stack$7[offset$4 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                            if ((isBranch$4 = stack$7[offset$4 + 5]) === void 0) {
                                                                                isBranch$4 = stack$7[offset$4 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                            }
                                                                            if (isBranch$4 === true) {
                                                                                if ((keys$5 = stack$7[offset$4 + 6]) === void 0) {
                                                                                    keys$5 = stack$7[offset$4 + 6] = [];
                                                                                    index$5 = -1;
                                                                                    for (invKey$4 in node) {
                                                                                        !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$5[++index$5] = invKey$4);
                                                                                    }
                                                                                }
                                                                                index$5 = stack$7[offset$4 + 7] || (stack$7[offset$4 + 7] = 0);
                                                                                if (index$5 < keys$5.length) {
                                                                                    stack$7[offset$4 + 7] = index$5 + 1;
                                                                                    stack$7[offset$4 = ++depth$8 * 8] = node;
                                                                                    stack$7[offset$4 + 1] = invKey$4 = keys$5[index$5];
                                                                                    stack$7[offset$4 + 2] = node[invKey$4];
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                            if (ref$21 && Array.isArray(ref$21)) {
                                                                                destination$7 = ref$21[__CONTEXT];
                                                                                if (destination$7) {
                                                                                    var i$22 = (ref$21[__REF_INDEX] || 0) - 1, n$17 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$22 <= n$17) {
                                                                                        destination$7[__REF + i$22] = destination$7[__REF + (i$22 + 1)];
                                                                                    }
                                                                                    destination$7[__REFS_LENGTH] = n$17;
                                                                                    ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$22, i$23 = -1, n$18 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$23 < n$18) {
                                                                                if ((ref$22 = node[__REF + i$23]) !== void 0) {
                                                                                    ref$22[__CONTEXT] = node[__REF + i$23] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                            }
                                                                            nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            delete stack$7[offset$4 + 0];
                                                                            delete stack$7[offset$4 + 1];
                                                                            delete stack$7[offset$4 + 2];
                                                                            delete stack$7[offset$4 + 3];
                                                                            delete stack$7[offset$4 + 4];
                                                                            delete stack$7[offset$4 + 5];
                                                                            delete stack$7[offset$4 + 6];
                                                                            delete stack$7[offset$4 + 7];
                                                                            --depth$8;
                                                                        }
                                                                        nodeParent = invParent$4;
                                                                        node = invChild$4;
                                                                    }
                                                                    nodeParent[key$2] = node = nodeValue;
                                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                    var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                    while (node = nodeParent) {
                                                                        nodeParent = node[__PARENT];
                                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                            var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                            if (ref$23 && Array.isArray(ref$23)) {
                                                                                destination$8 = ref$23[__CONTEXT];
                                                                                if (destination$8) {
                                                                                    var i$24 = (ref$23[__REF_INDEX] || 0) - 1, n$19 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$24 <= n$19) {
                                                                                        destination$8[__REF + i$24] = destination$8[__REF + (i$24 + 1)];
                                                                                    }
                                                                                    destination$8[__REFS_LENGTH] = n$19;
                                                                                    ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$24, i$25 = -1, n$20 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$25 < n$20) {
                                                                                if ((ref$24 = node[__REF + i$25]) !== void 0) {
                                                                                    ref$24[__CONTEXT] = node[__REF + i$25] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                                                (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                                                (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                                                node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                                                node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                                            }
                                                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            var depth$9 = 0, references$4, ref$25, i$26, k$4, n$21;
                                                                            while (depth$9 > -1) {
                                                                                if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                    i$26 = k$4 = -1;
                                                                                    n$21 = node[__REFS_LENGTH] || 0;
                                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                                                    if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                        stack$8[depth$9] = references$4 = new Array(n$21 + 1);
                                                                                        references$4[++k$4] = ref$25;
                                                                                    } else if (n$21 > 0) {
                                                                                        stack$8[depth$9] = references$4 = new Array(n$21);
                                                                                    }
                                                                                    while (++i$26 < n$21) {
                                                                                        if ((ref$25 = node[__REF + i$26]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            references$4[++k$4] = ref$25;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                    ++depth$9;
                                                                                } else {
                                                                                    stack$8[depth$9--] = void 0;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    nodeParent = node$5;
                                                                    node = child$4;
                                                                }
                                                                if (node != null) {
                                                                    var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                    // Set up the hard-link so we don't have to do all
                                                                    // this work the next time we follow this reference.
                                                                    if (refContext === void 0) {
                                                                        // create a back reference
                                                                        var backRefs = node[__REFS_LENGTH] || 0;
                                                                        node[__REF + backRefs] = refContainer;
                                                                        node[__REFS_LENGTH] = backRefs + 1;
                                                                        // create a hard reference
                                                                        refContainer[__REF_INDEX] = backRefs;
                                                                        refContainer[__CONTEXT] = node;
                                                                        refContainer = backRefs = void 0;
                                                                    }
                                                                    ;
                                                                }
                                                                appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                nodeParent = node;
                                                                break follow_path_14457;
                                                            }
                                                        } else if (refDepth < refHeight) {
                                                            nodeParent = node;
                                                            jsonParent = jsonNode;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_14457;
                                                        }
                                                        nodeParent = node;
                                                        break follow_path_14457;
                                                    } while (true);
                                                node = nodeParent;
                                            }
                                        }
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        nodeExpires = node && node[$EXPIRES];
                                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                    } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                    if (node == null) {
                                        while (refDepth <= refHeight) {
                                            optimizedPath[refDepth] = reference[refDepth++];
                                        }
                                    }
                                }
                                if (depth >= boundLength) {
                                    if (node != null && jsonParent != null) {
                                        if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                            if (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                jsonNode = jsonParent[key] = Object.create(null);
                                            }
                                            jsonNode[__KEY] = key;
                                            jsonNode[__GENERATION] = node[__GENERATION] || 0;
                                        } else {
                                            if (boxed === true) {
                                                jsonParent[key] = node;
                                            } else {
                                                var val$2 = nodeValue;
                                                if (val$2 != null && typeof val$2 === 'object') {
                                                    var src$2 = val$2, keys$6 = Object.keys(src$2), x$2, i$27 = -1, n$22 = keys$6.length;
                                                    val$2 = Array.isArray(src$2) && new Array(src$2.length) || Object.create(null);
                                                    while (++i$27 < n$22) {
                                                        x$2 = keys$6[i$27];
                                                        !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT) || x$2[0] === '$') && (val$2[x$2] = src$2[x$2]);
                                                    }
                                                }
                                                if (val$2 != null && typeof val$2 === 'object' && !Array.isArray(val$2)) {
                                                    val$2[$TYPE] = LEAF;
                                                }
                                                jsonParent[key] = val$2;
                                            }
                                        }
                                    }
                                }
                                if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                    nodeParent = node;
                                    break follow_path_14084;
                                }
                                nodeParent = nodes[depth] = node;
                                jsonParent = jsons[depth] = jsonNode;
                                depth = depth + 1;
                                continue follow_path_14084;
                            } else if (depth === height) {
                                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                nodeType = value && value[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                                nodeTimestamp = value && value[$TIMESTAMP];
                                nodeExpires = value && value[$EXPIRES];
                                var newNode$2, size_offset$2, leafSize$2 = node && node[$SIZE] || 0;
                                newNode$2 = value;
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    nodeType = 'array';
                                    newNode$2[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                                    delete nodeValue[$SIZE];
                                    nodeValue[__CONTAINER] = newNode$2;
                                } else if (nodeType === SENTINEL) {
                                    newNode$2[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                } else if (nodeType === ERROR) {
                                    newNode$2[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                                } else if (!(value != null && typeof value === 'object')) {
                                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                    nodeType = 'sentinel';
                                    newNode$2 = { 'value': nodeValue };
                                    newNode$2[$TYPE] = nodeType;
                                    newNode$2[$SIZE] = nodeSize;
                                } else {
                                    nodeType = newNode$2[$TYPE] = nodeType || 'leaf';
                                    newNode$2[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                                }
                                ;
                                if (node != null && node !== newNode$2) {
                                    var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = newNode$2[__REFS_LENGTH] || 0, i$28 = -1, ref$26;
                                    while (++i$28 < nodeRefsLength$5) {
                                        if ((ref$26 = node[__REF + i$28]) !== void 0) {
                                            ref$26[__CONTEXT] = newNode$2;
                                            newNode$2[__REF + (destRefsLength$5 + i$28)] = ref$26;
                                            node[__REF + i$28] = void 0;
                                        }
                                    }
                                    newNode$2[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                    node[__REFS_LENGTH] = ref$26 = void 0;
                                    var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$7, index$6, offset$5, childType$5, childValue$5, isBranch$5, stack$9 = [
                                            nodeParent,
                                            invKey$5,
                                            node
                                        ], depth$10 = 0;
                                    while (depth$10 > -1) {
                                        nodeParent = stack$9[offset$5 = depth$10 * 8];
                                        invKey$5 = stack$9[offset$5 + 1];
                                        node = stack$9[offset$5 + 2];
                                        if ((childType$5 = stack$9[offset$5 + 3]) === void 0 || (childType$5 = void 0)) {
                                            childType$5 = stack$9[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                        }
                                        childValue$5 = stack$9[offset$5 + 4] || (stack$9[offset$5 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                        if ((isBranch$5 = stack$9[offset$5 + 5]) === void 0) {
                                            isBranch$5 = stack$9[offset$5 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                        }
                                        if (isBranch$5 === true) {
                                            if ((keys$7 = stack$9[offset$5 + 6]) === void 0) {
                                                keys$7 = stack$9[offset$5 + 6] = [];
                                                index$6 = -1;
                                                for (invKey$5 in node) {
                                                    !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$7[++index$6] = invKey$5);
                                                }
                                            }
                                            index$6 = stack$9[offset$5 + 7] || (stack$9[offset$5 + 7] = 0);
                                            if (index$6 < keys$7.length) {
                                                stack$9[offset$5 + 7] = index$6 + 1;
                                                stack$9[offset$5 = ++depth$10 * 8] = node;
                                                stack$9[offset$5 + 1] = invKey$5 = keys$7[index$6];
                                                stack$9[offset$5 + 2] = node[invKey$5];
                                                continue;
                                            }
                                        }
                                        var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                        if (ref$27 && Array.isArray(ref$27)) {
                                            destination$9 = ref$27[__CONTEXT];
                                            if (destination$9) {
                                                var i$29 = (ref$27[__REF_INDEX] || 0) - 1, n$23 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                                while (++i$29 <= n$23) {
                                                    destination$9[__REF + i$29] = destination$9[__REF + (i$29 + 1)];
                                                }
                                                destination$9[__REFS_LENGTH] = n$23;
                                                ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                            }
                                        }
                                        var ref$28, i$30 = -1, n$24 = node[__REFS_LENGTH] || 0;
                                        while (++i$30 < n$24) {
                                            if ((ref$28 = node[__REF + i$30]) !== void 0) {
                                                ref$28[__CONTEXT] = node[__REF + i$30] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        if (node != null && typeof node === 'object') {
                                            var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                            (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                            (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                            node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                            node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                            node.__next = node.__prev = void 0;
                                            head$11 = tail$11 = next$11 = prev$11 = void 0;
                                        }
                                        nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        delete stack$9[offset$5 + 0];
                                        delete stack$9[offset$5 + 1];
                                        delete stack$9[offset$5 + 2];
                                        delete stack$9[offset$5 + 3];
                                        delete stack$9[offset$5 + 4];
                                        delete stack$9[offset$5 + 5];
                                        delete stack$9[offset$5 + 6];
                                        delete stack$9[offset$5 + 7];
                                        --depth$10;
                                    }
                                    nodeParent = invParent$5;
                                    node = invChild$5;
                                }
                                nodeParent[key] = node = newNode$2;
                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                size_offset$2 = leafSize$2 - nodeSize;
                                var node$6 = nodeParent, child$5 = node, stack$10 = [];
                                while (node = nodeParent) {
                                    nodeParent = node[__PARENT];
                                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                        var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                        if (ref$29 && Array.isArray(ref$29)) {
                                            destination$10 = ref$29[__CONTEXT];
                                            if (destination$10) {
                                                var i$31 = (ref$29[__REF_INDEX] || 0) - 1, n$25 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                                while (++i$31 <= n$25) {
                                                    destination$10[__REF + i$31] = destination$10[__REF + (i$31 + 1)];
                                                }
                                                destination$10[__REFS_LENGTH] = n$25;
                                                ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                            }
                                        }
                                        var ref$30, i$32 = -1, n$26 = node[__REFS_LENGTH] || 0;
                                        while (++i$32 < n$26) {
                                            if ((ref$30 = node[__REF + i$32]) !== void 0) {
                                                ref$30[__CONTEXT] = node[__REF + i$32] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        if (node != null && typeof node === 'object') {
                                            var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12, prev$12;
                                            (next$12 = node.__next) && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                            (prev$12 = node.__prev) && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                            node === head$12 && (root$13.__head = root$13.__next = head$12 = next$12);
                                            node === tail$12 && (root$13.__tail = root$13.__prev = tail$12 = prev$12);
                                            node.__next = node.__prev = void 0;
                                            head$12 = tail$12 = next$12 = prev$12 = void 0;
                                        }
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        var depth$11 = 0, references$5, ref$31, i$33, k$5, n$27;
                                        while (depth$11 > -1) {
                                            if ((references$5 = stack$10[depth$11]) === void 0) {
                                                i$33 = k$5 = -1;
                                                n$27 = node[__REFS_LENGTH] || 0;
                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                node[__GENERATION] = __GENERATION_GUID++;
                                                if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    stack$10[depth$11] = references$5 = new Array(n$27 + 1);
                                                    references$5[++k$5] = ref$31;
                                                } else if (n$27 > 0) {
                                                    stack$10[depth$11] = references$5 = new Array(n$27);
                                                }
                                                while (++i$33 < n$27) {
                                                    if ((ref$31 = node[__REF + i$33]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        references$5[++k$5] = ref$31;
                                                    }
                                                }
                                            }
                                            if ((node = references$5 && references$5.pop()) !== void 0) {
                                                ++depth$11;
                                            } else {
                                                stack$10[depth$11--] = void 0;
                                            }
                                        }
                                    }
                                }
                                nodeParent = node$6;
                                node = child$5;
                                if (node != null && typeof node === 'object') {
                                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    } else {
                                        if (nodeExpires !== 1) {
                                            var root$14 = root, head$13 = root$14.__head, tail$13 = root$14.__tail, next$13 = node.__next, prev$13 = node.__prev;
                                            if (node !== head$13) {
                                                next$13 && (next$13 != null && typeof next$13 === 'object') && (next$13.__prev = prev$13);
                                                prev$13 && (prev$13 != null && typeof prev$13 === 'object') && (prev$13.__next = next$13);
                                                (next$13 = head$13) && (head$13 != null && typeof head$13 === 'object') && (head$13.__prev = node);
                                                root$14.__head = root$14.__next = head$13 = node;
                                                head$13.__next = next$13;
                                                head$13.__prev = void 0;
                                            }
                                            if (tail$13 == null || node === tail$13) {
                                                root$14.__tail = root$14.__prev = tail$13 = prev$13 || node;
                                            }
                                            root$14 = head$13 = tail$13 = next$13 = prev$13 = void 0;
                                        }
                                    }
                                }
                                if (depth >= boundLength) {
                                    if (node != null && jsonParent != null) {
                                        if (boxed === true) {
                                            jsonParent[key] = node;
                                        } else {
                                            var val$3 = nodeValue;
                                            if (val$3 != null && typeof val$3 === 'object') {
                                                var src$3 = val$3, keys$8 = Object.keys(src$3), x$3, i$34 = -1, n$28 = keys$8.length;
                                                val$3 = Array.isArray(src$3) && new Array(src$3.length) || Object.create(null);
                                                while (++i$34 < n$28) {
                                                    x$3 = keys$8[i$34];
                                                    !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT) || x$3[0] === '$') && (val$3[x$3] = src$3[x$3]);
                                                }
                                            }
                                            if (val$3 != null && typeof val$3 === 'object' && !Array.isArray(val$3)) {
                                                val$3[$TYPE] = LEAF;
                                            }
                                            jsonParent[key] = val$3;
                                        }
                                    }
                                }
                                appendNullKey = false;
                                nodeParent = node;
                                break follow_path_14084;
                            }
                        } else if (depth < height) {
                            nodeParent = nodeParent;
                            jsonParent = jsonParent;
                            depth = depth + 1;
                            continue follow_path_14084;
                        }
                        nodeParent = node;
                        break follow_path_14084;
                    } while (true);
                node = nodeParent;
            }
            if (node != null || boxed === true) {
                if (nodeType === ERROR) {
                    if (nodeExpires !== 1) {
                        var root$15 = root, head$14 = root$15.__head, tail$14 = root$15.__tail, next$14 = node.__next, prev$14 = node.__prev;
                        if (node !== head$14) {
                            next$14 && (next$14 != null && typeof next$14 === 'object') && (next$14.__prev = prev$14);
                            prev$14 && (prev$14 != null && typeof prev$14 === 'object') && (prev$14.__next = next$14);
                            (next$14 = head$14) && (head$14 != null && typeof head$14 === 'object') && (head$14.__prev = node);
                            root$15.__head = root$15.__next = head$14 = node;
                            head$14.__next = next$14;
                            head$14.__prev = void 0;
                        }
                        if (tail$14 == null || node === tail$14) {
                            root$15.__tail = root$15.__prev = tail$14 = prev$14 || node;
                        }
                        root$15 = head$14 = tail$14 = next$14 = prev$14 = void 0;
                    }
                    var nodeType$2 = node && node[$TYPE] || void 0;
                    nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                    var pbv = Object.create(null);
                    var src$4 = requestedPath, i$35 = -1, n$29 = src$4.length, req = new Array(n$29);
                    while (++i$35 < n$29) {
                        req[i$35] = src$4[i$35];
                    }
                    if (appendNullKey === true) {
                        req[req.length] = null;
                    }
                    pbv.path = req;
                    if (boxed === true) {
                        pbv.value = node;
                    } else {
                        var dest = nodeValue, src$5 = dest, x$4;
                        if (dest != null && typeof dest === 'object') {
                            dest = Array.isArray(src$5) && [] || Object.create(null);
                            for (x$4 in src$5) {
                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT) || x$4[0] === '$') && (dest[x$4] = src$5[x$4]);
                            }
                        }
                        pbv.value = dest;
                    }
                    errors[errors.length] = pbv;
                }
                hasValue || (hasValue = jsonParent != null);
                var src$6 = optimizedPath, i$36 = -1, n$30 = src$6.length, opt = new Array(n$30);
                while (++i$36 < n$30) {
                    opt[i$36] = src$6[i$36];
                }
                var src$7 = requestedPath, i$37 = -1, n$31 = src$7.length, req$2 = new Array(n$31);
                while (++i$37 < n$31) {
                    req$2[i$37] = src$7[i$37];
                }
                if (appendNullKey === true) {
                    req$2[req$2.length] = null;
                }
                requestedPaths[requestedPaths.length] = req$2;
                optimizedPaths[optimizedPaths.length] = opt;
            }
            if (boxed === false && node == null || refreshing === true) {
                var src$8 = boundPath, i$38 = -1, n$32 = src$8.length, req$3 = new Array(n$32);
                while (++i$38 < n$32) {
                    req$3[i$38] = src$8[i$38];
                }
                var src$9 = optimizedPath, i$39 = -1, n$33 = src$9.length, opt$2 = new Array(n$33);
                while (++i$39 < n$33) {
                    opt$2[i$39] = src$9[i$39];
                }
                var reqLen = req$3.length - 1, optLen = opt$2.length - 1, i$40 = -1, n$34 = requestedPath.length, j$2 = depth, k$6 = height, x$5;
                while (++i$40 < n$34) {
                    req$3[++reqLen] = path[i$40 + boundLength] != null && typeof path[i$40 + boundLength] === 'object' && [requestedPath[i$40]] || requestedPath[i$40];
                }
                i$40 = -1;
                n$34 = height - depth;
                while (++i$40 < n$34) {
                    x$5 = req$3[++reqLen] = path[++j$2 + boundLength];
                    x$5 != null && (opt$2[++optLen] = x$5);
                }
                req$3.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req$3;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
            }
            appendNullKey = false;
            var key$3;
            depth = depth;
            unroll_13700:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_13700;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_13700;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_13700;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_13700;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_13700;
                    }
                    depth = path.depth = depth;
                    break unroll_13700;
                } while (true);
            depth = depth;
        }
    }
    values && (values[0] = hasValue && { json: jsons[-1] } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathsAsValues(model, pathValues, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    Array.isArray(values) && (values.length = 0);
    var boundLength = 0, nodeRoot = model._cache || (model._cache = {}), nodeParent, node;
    if (Array.isArray(boundPath)) {
        nodeParent = nodeRoot;
        boundLength = boundPath.length;
    } else {
        nodeParent = getBoundContext(model);
        boundPath = model._path || [];
    }
    var value, root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$4, y) {
        return y;
    });
    var nodes = pathValues.nodes || (pathValues.nodes = []);
    var errors = pathValues.errors || (pathValues.errors = []);
    var refs = pathValues.refs || (pathValues.refs = []);
    var depth = pathValues.depth || (pathValues.depth = 0);
    var refIndex = pathValues.refIndex || (pathValues.refIndex = 0);
    var refDepth = pathValues.refDepth || (pathValues.refDepth = 0);
    var requestedPath = pathValues.requestedPath || (pathValues.requestedPath = []);
    var optimizedPath = pathValues.optimizedPath || (pathValues.optimizedPath = []);
    var requestedPaths = pathValues.requestedPaths || (pathValues.requestedPaths = []);
    var optimizedPaths = pathValues.optimizedPaths || (pathValues.optimizedPaths = []);
    var requestedMissingPaths = pathValues.requestedMissingPaths || (pathValues.requestedMissingPaths = []);
    var optimizedMissingPaths = pathValues.optimizedMissingPaths || (pathValues.optimizedMissingPaths = []);
    var path, length = 0, height = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    var index = -1, count = pathValues.length;
    while (++index < count) {
        path = pathValues[index];
        value = path.value;
        path = path.path;
        depth = 0;
        length = path.length;
        height = length - 1;
        var ref;
        refs.length = 0;
        while (depth > -1) {
            refIndex = depth;
            while (--refIndex >= -1) {
                if (!!(ref = refs[refIndex])) {
                    refLength = ref.length;
                    var i = -1, j = 0;
                    while (++i < refLength) {
                        optimizedPath[j++] = ref[i];
                    }
                    i = ++refIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    optimizedPath.length = j;
                    break;
                }
            }
            var key, isKeySet;
            path = path;
            height = (length = path.length) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                node = nodeParent[key];
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                nodeTimestamp = node && node[$TIMESTAMP];
                nodeExpires = node && node[$EXPIRES];
                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                nodeType = value && value[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                nodeTimestamp = value && value[$TIMESTAMP];
                nodeExpires = value && value[$EXPIRES];
                var newNode, size_offset, leafSize = node && node[$SIZE] || 0;
                newNode = value;
                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                    nodeType = 'array';
                    newNode[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                    delete nodeValue[$SIZE];
                    nodeValue[__CONTAINER] = newNode;
                } else if (nodeType === SENTINEL) {
                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                } else if (nodeType === ERROR) {
                    newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                } else if (!(value != null && typeof value === 'object')) {
                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                    nodeType = 'sentinel';
                    newNode = { 'value': nodeValue };
                    newNode[$TYPE] = nodeType;
                    newNode[$SIZE] = nodeSize;
                } else {
                    nodeType = newNode[$TYPE] = nodeType || 'leaf';
                    newNode[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                }
                ;
                if (node != null && node !== newNode) {
                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = newNode[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                    while (++i$2 < nodeRefsLength) {
                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                            ref$2[__CONTEXT] = newNode;
                            newNode[__REF + (destRefsLength + i$2)] = ref$2;
                            node[__REF + i$2] = void 0;
                        }
                    }
                    newNode[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                    node[__REFS_LENGTH] = ref$2 = void 0;
                    var invParent = nodeParent, invChild = node, invKey = key, keys, index$2, offset, childType, childValue, isBranch, stack = [
                            nodeParent,
                            invKey,
                            node
                        ], depth$2 = 0;
                    while (depth$2 > -1) {
                        nodeParent = stack[offset = depth$2 * 8];
                        invKey = stack[offset + 1];
                        node = stack[offset + 2];
                        if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                            childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                        }
                        childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                        if ((isBranch = stack[offset + 5]) === void 0) {
                            isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                        }
                        if (isBranch === true) {
                            if ((keys = stack[offset + 6]) === void 0) {
                                keys = stack[offset + 6] = [];
                                index$2 = -1;
                                for (invKey in node) {
                                    !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys[++index$2] = invKey);
                                }
                            }
                            index$2 = stack[offset + 7] || (stack[offset + 7] = 0);
                            if (index$2 < keys.length) {
                                stack[offset + 7] = index$2 + 1;
                                stack[offset = ++depth$2 * 8] = node;
                                stack[offset + 1] = invKey = keys[index$2];
                                stack[offset + 2] = node[invKey];
                                continue;
                            }
                        }
                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                        if (ref$3 && Array.isArray(ref$3)) {
                            destination = ref$3[__CONTEXT];
                            if (destination) {
                                var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                while (++i$3 <= n) {
                                    destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                }
                                destination[__REFS_LENGTH] = n;
                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                            }
                        }
                        var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                        while (++i$4 < n$2) {
                            if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                            (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                            (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            node === head && (root$2.__head = root$2.__next = head = next);
                            node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                            node.__next = node.__prev = void 0;
                            head = tail = next = prev = void 0;
                        }
                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                        delete stack[offset + 0];
                        delete stack[offset + 1];
                        delete stack[offset + 2];
                        delete stack[offset + 3];
                        delete stack[offset + 4];
                        delete stack[offset + 5];
                        delete stack[offset + 6];
                        delete stack[offset + 7];
                        --depth$2;
                    }
                    nodeParent = invParent;
                    node = invChild;
                }
                nodeParent[key] = node = newNode;
                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                size_offset = leafSize - nodeSize;
                var node$2 = nodeParent, child = node, stack$2 = [];
                while (node = nodeParent) {
                    nodeParent = node[__PARENT];
                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                        var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                        if (ref$5 && Array.isArray(ref$5)) {
                            destination$2 = ref$5[__CONTEXT];
                            if (destination$2) {
                                var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                while (++i$5 <= n$3) {
                                    destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                }
                                destination$2[__REFS_LENGTH] = n$3;
                                ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                            }
                        }
                        var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                        while (++i$6 < n$4) {
                            if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                            (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                            (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                            node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                            node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                            node.__next = node.__prev = void 0;
                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                        }
                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                        var depth$3 = 0, references, ref$7, i$7, k, n$5;
                        while (depth$3 > -1) {
                            if ((references = stack$2[depth$3]) === void 0) {
                                i$7 = k = -1;
                                n$5 = node[__REFS_LENGTH] || 0;
                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                node[__GENERATION] = __GENERATION_GUID++;
                                if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    stack$2[depth$3] = references = new Array(n$5 + 1);
                                    references[++k] = ref$7;
                                } else if (n$5 > 0) {
                                    stack$2[depth$3] = references = new Array(n$5);
                                }
                                while (++i$7 < n$5) {
                                    if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        references[++k] = ref$7;
                                    }
                                }
                            }
                            if ((node = references && references.pop()) !== void 0) {
                                ++depth$3;
                            } else {
                                stack$2[depth$3--] = void 0;
                            }
                        }
                    }
                }
                nodeParent = node$2;
                node = child;
                if (node != null && typeof node === 'object') {
                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    } else {
                        if (nodeExpires !== 1) {
                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                            if (node !== head$3) {
                                next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                root$4.__head = root$4.__next = head$3 = node;
                                head$3.__next = next$3;
                                head$3.__prev = void 0;
                            }
                            if (tail$3 == null || node === tail$3) {
                                root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                            }
                            root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                        }
                    }
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                depth = depth;
                follow_path_17223:
                    do {
                        key = path[depth];
                        if (isKeySet = key != null && typeof key === 'object') {
                            if (Array.isArray(key)) {
                                if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            } else {
                                key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                            }
                        }
                        if (key === __NULL) {
                            key = null;
                        }
                        depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                        if (key != null) {
                            if (depth < height) {
                                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                    nodeType = void 0;
                                    nodeValue = Object.create(null);
                                    nodeSize = node && node[$SIZE] || 0;
                                    if (node != null && node !== nodeValue) {
                                        var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = nodeValue[__REFS_LENGTH] || 0, i$8 = -1, ref$8;
                                        while (++i$8 < nodeRefsLength$2) {
                                            if ((ref$8 = node[__REF + i$8]) !== void 0) {
                                                ref$8[__CONTEXT] = nodeValue;
                                                nodeValue[__REF + (destRefsLength$2 + i$8)] = ref$8;
                                                node[__REF + i$8] = void 0;
                                            }
                                        }
                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                        node[__REFS_LENGTH] = ref$8 = void 0;
                                        var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$3, offset$2, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                nodeParent,
                                                invKey$2,
                                                node
                                            ], depth$4 = 0;
                                        while (depth$4 > -1) {
                                            nodeParent = stack$3[offset$2 = depth$4 * 8];
                                            invKey$2 = stack$3[offset$2 + 1];
                                            node = stack$3[offset$2 + 2];
                                            if ((childType$2 = stack$3[offset$2 + 3]) === void 0 || (childType$2 = void 0)) {
                                                childType$2 = stack$3[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                            }
                                            childValue$2 = stack$3[offset$2 + 4] || (stack$3[offset$2 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                            if ((isBranch$2 = stack$3[offset$2 + 5]) === void 0) {
                                                isBranch$2 = stack$3[offset$2 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                            }
                                            if (isBranch$2 === true) {
                                                if ((keys$2 = stack$3[offset$2 + 6]) === void 0) {
                                                    keys$2 = stack$3[offset$2 + 6] = [];
                                                    index$3 = -1;
                                                    for (invKey$2 in node) {
                                                        !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$2[++index$3] = invKey$2);
                                                    }
                                                }
                                                index$3 = stack$3[offset$2 + 7] || (stack$3[offset$2 + 7] = 0);
                                                if (index$3 < keys$2.length) {
                                                    stack$3[offset$2 + 7] = index$3 + 1;
                                                    stack$3[offset$2 = ++depth$4 * 8] = node;
                                                    stack$3[offset$2 + 1] = invKey$2 = keys$2[index$3];
                                                    stack$3[offset$2 + 2] = node[invKey$2];
                                                    continue;
                                                }
                                            }
                                            var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                            if (ref$9 && Array.isArray(ref$9)) {
                                                destination$3 = ref$9[__CONTEXT];
                                                if (destination$3) {
                                                    var i$9 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$9 <= n$6) {
                                                        destination$3[__REF + i$9] = destination$3[__REF + (i$9 + 1)];
                                                    }
                                                    destination$3[__REFS_LENGTH] = n$6;
                                                    ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                }
                                            }
                                            var ref$10, i$10 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                            while (++i$10 < n$7) {
                                                if ((ref$10 = node[__REF + i$10]) !== void 0) {
                                                    ref$10[__CONTEXT] = node[__REF + i$10] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            if (node != null && typeof node === 'object') {
                                                var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                node.__next = node.__prev = void 0;
                                                head$4 = tail$4 = next$4 = prev$4 = void 0;
                                            }
                                            nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            delete stack$3[offset$2 + 0];
                                            delete stack$3[offset$2 + 1];
                                            delete stack$3[offset$2 + 2];
                                            delete stack$3[offset$2 + 3];
                                            delete stack$3[offset$2 + 4];
                                            delete stack$3[offset$2 + 5];
                                            delete stack$3[offset$2 + 6];
                                            delete stack$3[offset$2 + 7];
                                            --depth$4;
                                        }
                                        nodeParent = invParent$2;
                                        node = invChild$2;
                                    }
                                    nodeParent[key] = node = nodeValue;
                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                    var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                    while (node = nodeParent) {
                                        nodeParent = node[__PARENT];
                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                            var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                            if (ref$11 && Array.isArray(ref$11)) {
                                                destination$4 = ref$11[__CONTEXT];
                                                if (destination$4) {
                                                    var i$11 = (ref$11[__REF_INDEX] || 0) - 1, n$8 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                    while (++i$11 <= n$8) {
                                                        destination$4[__REF + i$11] = destination$4[__REF + (i$11 + 1)];
                                                    }
                                                    destination$4[__REFS_LENGTH] = n$8;
                                                    ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                }
                                            }
                                            var ref$12, i$12 = -1, n$9 = node[__REFS_LENGTH] || 0;
                                            while (++i$12 < n$9) {
                                                if ((ref$12 = node[__REF + i$12]) !== void 0) {
                                                    ref$12[__CONTEXT] = node[__REF + i$12] = void 0;
                                                }
                                            }
                                            node[__REFS_LENGTH] = void 0;
                                            if (node != null && typeof node === 'object') {
                                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5, prev$5;
                                                (next$5 = node.__next) && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                (prev$5 = node.__prev) && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                node === head$5 && (root$6.__head = root$6.__next = head$5 = next$5);
                                                node === tail$5 && (root$6.__tail = root$6.__prev = tail$5 = prev$5);
                                                node.__next = node.__prev = void 0;
                                                head$5 = tail$5 = next$5 = prev$5 = void 0;
                                            }
                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            var depth$5 = 0, references$2, ref$13, i$13, k$2, n$10;
                                            while (depth$5 > -1) {
                                                if ((references$2 = stack$4[depth$5]) === void 0) {
                                                    i$13 = k$2 = -1;
                                                    n$10 = node[__REFS_LENGTH] || 0;
                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                    if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        stack$4[depth$5] = references$2 = new Array(n$10 + 1);
                                                        references$2[++k$2] = ref$13;
                                                    } else if (n$10 > 0) {
                                                        stack$4[depth$5] = references$2 = new Array(n$10);
                                                    }
                                                    while (++i$13 < n$10) {
                                                        if ((ref$13 = node[__REF + i$13]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            references$2[++k$2] = ref$13;
                                                        }
                                                    }
                                                }
                                                if ((node = references$2 && references$2.pop()) !== void 0) {
                                                    ++depth$5;
                                                } else {
                                                    stack$4[depth$5--] = void 0;
                                                }
                                            }
                                        }
                                    }
                                    nodeParent = node$3;
                                    node = child$2;
                                }
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    do {
                                        if (nodeExpires !== 1) {
                                            var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                            if (node !== head$6) {
                                                next$6 && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                prev$6 && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                                root$7.__head = root$7.__next = head$6 = node;
                                                head$6.__next = next$6;
                                                head$6.__prev = void 0;
                                            }
                                            if (tail$6 == null || node === tail$6) {
                                                root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                            }
                                            root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                        }
                                        refs[depth] = nodeValue;
                                        refIndex = depth + 1;
                                        refDepth = 0;
                                        var location = (nodeValue[__CONTAINER] || nodeValue)[__CONTEXT];
                                        if (location !== void 0) {
                                            node = location;
                                            refHeight = (refLength = nodeValue.length) - 1;
                                            while (refDepth < refLength) {
                                                optimizedPath[refDepth] = nodeValue[refDepth++];
                                            }
                                            optimizedPath.length = refLength;
                                        } else {
                                            var key$2, isKeySet$2;
                                            reference = nodeValue;
                                            refHeight = (refLength = reference.length) - 1;
                                            nodeParent = nodeRoot;
                                            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                node = node = nodeParent;
                                            } else {
                                                nodeParent = nodeRoot;
                                                refDepth = refDepth;
                                                follow_path_17590:
                                                    do {
                                                        key$2 = reference[refDepth];
                                                        isKeySet$2 = false;
                                                        if (key$2 != null) {
                                                            if (refDepth < refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                    nodeType = void 0;
                                                                    nodeValue = Object.create(null);
                                                                    nodeSize = node && node[$SIZE] || 0;
                                                                    if (node != null && node !== nodeValue) {
                                                                        var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$14 = -1, ref$14;
                                                                        while (++i$14 < nodeRefsLength$3) {
                                                                            if ((ref$14 = node[__REF + i$14]) !== void 0) {
                                                                                ref$14[__CONTEXT] = nodeValue;
                                                                                nodeValue[__REF + (destRefsLength$3 + i$14)] = ref$14;
                                                                                node[__REF + i$14] = void 0;
                                                                            }
                                                                        }
                                                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                        node[__REFS_LENGTH] = ref$14 = void 0;
                                                                        var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$3, index$4, offset$3, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                nodeParent,
                                                                                invKey$3,
                                                                                node
                                                                            ], depth$6 = 0;
                                                                        while (depth$6 > -1) {
                                                                            nodeParent = stack$5[offset$3 = depth$6 * 8];
                                                                            invKey$3 = stack$5[offset$3 + 1];
                                                                            node = stack$5[offset$3 + 2];
                                                                            if ((childType$3 = stack$5[offset$3 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                childType$3 = stack$5[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                                            }
                                                                            childValue$3 = stack$5[offset$3 + 4] || (stack$5[offset$3 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                            if ((isBranch$3 = stack$5[offset$3 + 5]) === void 0) {
                                                                                isBranch$3 = stack$5[offset$3 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                            }
                                                                            if (isBranch$3 === true) {
                                                                                if ((keys$3 = stack$5[offset$3 + 6]) === void 0) {
                                                                                    keys$3 = stack$5[offset$3 + 6] = [];
                                                                                    index$4 = -1;
                                                                                    for (invKey$3 in node) {
                                                                                        !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$3[++index$4] = invKey$3);
                                                                                    }
                                                                                }
                                                                                index$4 = stack$5[offset$3 + 7] || (stack$5[offset$3 + 7] = 0);
                                                                                if (index$4 < keys$3.length) {
                                                                                    stack$5[offset$3 + 7] = index$4 + 1;
                                                                                    stack$5[offset$3 = ++depth$6 * 8] = node;
                                                                                    stack$5[offset$3 + 1] = invKey$3 = keys$3[index$4];
                                                                                    stack$5[offset$3 + 2] = node[invKey$3];
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                            if (ref$15 && Array.isArray(ref$15)) {
                                                                                destination$5 = ref$15[__CONTEXT];
                                                                                if (destination$5) {
                                                                                    var i$15 = (ref$15[__REF_INDEX] || 0) - 1, n$11 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$15 <= n$11) {
                                                                                        destination$5[__REF + i$15] = destination$5[__REF + (i$15 + 1)];
                                                                                    }
                                                                                    destination$5[__REFS_LENGTH] = n$11;
                                                                                    ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$16, i$16 = -1, n$12 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$16 < n$12) {
                                                                                if ((ref$16 = node[__REF + i$16]) !== void 0) {
                                                                                    ref$16[__CONTEXT] = node[__REF + i$16] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                            }
                                                                            nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            delete stack$5[offset$3 + 0];
                                                                            delete stack$5[offset$3 + 1];
                                                                            delete stack$5[offset$3 + 2];
                                                                            delete stack$5[offset$3 + 3];
                                                                            delete stack$5[offset$3 + 4];
                                                                            delete stack$5[offset$3 + 5];
                                                                            delete stack$5[offset$3 + 6];
                                                                            delete stack$5[offset$3 + 7];
                                                                            --depth$6;
                                                                        }
                                                                        nodeParent = invParent$3;
                                                                        node = invChild$3;
                                                                    }
                                                                    nodeParent[key$2] = node = nodeValue;
                                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                    var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                    while (node = nodeParent) {
                                                                        nodeParent = node[__PARENT];
                                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                            var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                            if (ref$17 && Array.isArray(ref$17)) {
                                                                                destination$6 = ref$17[__CONTEXT];
                                                                                if (destination$6) {
                                                                                    var i$17 = (ref$17[__REF_INDEX] || 0) - 1, n$13 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$17 <= n$13) {
                                                                                        destination$6[__REF + i$17] = destination$6[__REF + (i$17 + 1)];
                                                                                    }
                                                                                    destination$6[__REFS_LENGTH] = n$13;
                                                                                    ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$18, i$18 = -1, n$14 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$18 < n$14) {
                                                                                if ((ref$18 = node[__REF + i$18]) !== void 0) {
                                                                                    ref$18[__CONTEXT] = node[__REF + i$18] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                            }
                                                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            var depth$7 = 0, references$3, ref$19, i$19, k$3, n$15;
                                                                            while (depth$7 > -1) {
                                                                                if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                    i$19 = k$3 = -1;
                                                                                    n$15 = node[__REFS_LENGTH] || 0;
                                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                                                    if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                        stack$6[depth$7] = references$3 = new Array(n$15 + 1);
                                                                                        references$3[++k$3] = ref$19;
                                                                                    } else if (n$15 > 0) {
                                                                                        stack$6[depth$7] = references$3 = new Array(n$15);
                                                                                    }
                                                                                    while (++i$19 < n$15) {
                                                                                        if ((ref$19 = node[__REF + i$19]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            references$3[++k$3] = ref$19;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                    ++depth$7;
                                                                                } else {
                                                                                    stack$6[depth$7--] = void 0;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    nodeParent = node$4;
                                                                    node = child$3;
                                                                }
                                                                if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                    nodeParent = node;
                                                                    break follow_path_17590;
                                                                }
                                                                nodeParent = node;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_17590;
                                                            } else if (refDepth === refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                    nodeType = void 0;
                                                                    nodeValue = Object.create(null);
                                                                    nodeSize = node && node[$SIZE] || 0;
                                                                    if (node != null && node !== nodeValue) {
                                                                        var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = nodeValue[__REFS_LENGTH] || 0, i$20 = -1, ref$20;
                                                                        while (++i$20 < nodeRefsLength$4) {
                                                                            if ((ref$20 = node[__REF + i$20]) !== void 0) {
                                                                                ref$20[__CONTEXT] = nodeValue;
                                                                                nodeValue[__REF + (destRefsLength$4 + i$20)] = ref$20;
                                                                                node[__REF + i$20] = void 0;
                                                                            }
                                                                        }
                                                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                        node[__REFS_LENGTH] = ref$20 = void 0;
                                                                        var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$4, index$5, offset$4, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                nodeParent,
                                                                                invKey$4,
                                                                                node
                                                                            ], depth$8 = 0;
                                                                        while (depth$8 > -1) {
                                                                            nodeParent = stack$7[offset$4 = depth$8 * 8];
                                                                            invKey$4 = stack$7[offset$4 + 1];
                                                                            node = stack$7[offset$4 + 2];
                                                                            if ((childType$4 = stack$7[offset$4 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                childType$4 = stack$7[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                            }
                                                                            childValue$4 = stack$7[offset$4 + 4] || (stack$7[offset$4 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                            if ((isBranch$4 = stack$7[offset$4 + 5]) === void 0) {
                                                                                isBranch$4 = stack$7[offset$4 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                            }
                                                                            if (isBranch$4 === true) {
                                                                                if ((keys$4 = stack$7[offset$4 + 6]) === void 0) {
                                                                                    keys$4 = stack$7[offset$4 + 6] = [];
                                                                                    index$5 = -1;
                                                                                    for (invKey$4 in node) {
                                                                                        !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$4[++index$5] = invKey$4);
                                                                                    }
                                                                                }
                                                                                index$5 = stack$7[offset$4 + 7] || (stack$7[offset$4 + 7] = 0);
                                                                                if (index$5 < keys$4.length) {
                                                                                    stack$7[offset$4 + 7] = index$5 + 1;
                                                                                    stack$7[offset$4 = ++depth$8 * 8] = node;
                                                                                    stack$7[offset$4 + 1] = invKey$4 = keys$4[index$5];
                                                                                    stack$7[offset$4 + 2] = node[invKey$4];
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                            if (ref$21 && Array.isArray(ref$21)) {
                                                                                destination$7 = ref$21[__CONTEXT];
                                                                                if (destination$7) {
                                                                                    var i$21 = (ref$21[__REF_INDEX] || 0) - 1, n$16 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$21 <= n$16) {
                                                                                        destination$7[__REF + i$21] = destination$7[__REF + (i$21 + 1)];
                                                                                    }
                                                                                    destination$7[__REFS_LENGTH] = n$16;
                                                                                    ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$22, i$22 = -1, n$17 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$22 < n$17) {
                                                                                if ((ref$22 = node[__REF + i$22]) !== void 0) {
                                                                                    ref$22[__CONTEXT] = node[__REF + i$22] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                            }
                                                                            nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            delete stack$7[offset$4 + 0];
                                                                            delete stack$7[offset$4 + 1];
                                                                            delete stack$7[offset$4 + 2];
                                                                            delete stack$7[offset$4 + 3];
                                                                            delete stack$7[offset$4 + 4];
                                                                            delete stack$7[offset$4 + 5];
                                                                            delete stack$7[offset$4 + 6];
                                                                            delete stack$7[offset$4 + 7];
                                                                            --depth$8;
                                                                        }
                                                                        nodeParent = invParent$4;
                                                                        node = invChild$4;
                                                                    }
                                                                    nodeParent[key$2] = node = nodeValue;
                                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                    var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                    while (node = nodeParent) {
                                                                        nodeParent = node[__PARENT];
                                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                            var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                            if (ref$23 && Array.isArray(ref$23)) {
                                                                                destination$8 = ref$23[__CONTEXT];
                                                                                if (destination$8) {
                                                                                    var i$23 = (ref$23[__REF_INDEX] || 0) - 1, n$18 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$23 <= n$18) {
                                                                                        destination$8[__REF + i$23] = destination$8[__REF + (i$23 + 1)];
                                                                                    }
                                                                                    destination$8[__REFS_LENGTH] = n$18;
                                                                                    ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$24, i$24 = -1, n$19 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$24 < n$19) {
                                                                                if ((ref$24 = node[__REF + i$24]) !== void 0) {
                                                                                    ref$24[__CONTEXT] = node[__REF + i$24] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                                                (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                                                (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                                                node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                                                node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                                            }
                                                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            var depth$9 = 0, references$4, ref$25, i$25, k$4, n$20;
                                                                            while (depth$9 > -1) {
                                                                                if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                    i$25 = k$4 = -1;
                                                                                    n$20 = node[__REFS_LENGTH] || 0;
                                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                                                    if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                        stack$8[depth$9] = references$4 = new Array(n$20 + 1);
                                                                                        references$4[++k$4] = ref$25;
                                                                                    } else if (n$20 > 0) {
                                                                                        stack$8[depth$9] = references$4 = new Array(n$20);
                                                                                    }
                                                                                    while (++i$25 < n$20) {
                                                                                        if ((ref$25 = node[__REF + i$25]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            references$4[++k$4] = ref$25;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                    ++depth$9;
                                                                                } else {
                                                                                    stack$8[depth$9--] = void 0;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    nodeParent = node$5;
                                                                    node = child$4;
                                                                }
                                                                if (node != null) {
                                                                    var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                    // Set up the hard-link so we don't have to do all
                                                                    // this work the next time we follow this reference.
                                                                    if (refContext === void 0) {
                                                                        // create a back reference
                                                                        var backRefs = node[__REFS_LENGTH] || 0;
                                                                        node[__REF + backRefs] = refContainer;
                                                                        node[__REFS_LENGTH] = backRefs + 1;
                                                                        // create a hard reference
                                                                        refContainer[__REF_INDEX] = backRefs;
                                                                        refContainer[__CONTEXT] = node;
                                                                        refContainer = backRefs = void 0;
                                                                    }
                                                                    ;
                                                                }
                                                                appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                nodeParent = node;
                                                                break follow_path_17590;
                                                            }
                                                        } else if (refDepth < refHeight) {
                                                            nodeParent = node;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_17590;
                                                        }
                                                        nodeParent = node;
                                                        break follow_path_17590;
                                                    } while (true);
                                                node = nodeParent;
                                            }
                                        }
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        nodeExpires = node && node[$EXPIRES];
                                        if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                            node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                        }
                                    } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                    if (node == null) {
                                        while (refDepth <= refHeight) {
                                            optimizedPath[refDepth] = reference[refDepth++];
                                        }
                                    }
                                }
                                if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                    nodeParent = node;
                                    break follow_path_17223;
                                }
                                nodeParent = nodes[depth] = node;
                                depth = depth + 1;
                                continue follow_path_17223;
                            } else if (depth === height) {
                                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                node = nodeParent[key];
                                nodeType = node && node[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                nodeTimestamp = node && node[$TIMESTAMP];
                                nodeExpires = node && node[$EXPIRES];
                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                }
                                nodeType = value && value[$TYPE] || void 0;
                                nodeValue = nodeType === SENTINEL ? value[VALUE] : value;
                                nodeTimestamp = value && value[$TIMESTAMP];
                                nodeExpires = value && value[$EXPIRES];
                                var newNode$2, size_offset$2, leafSize$2 = node && node[$SIZE] || 0;
                                newNode$2 = value;
                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                    nodeType = 'array';
                                    newNode$2[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                                    delete nodeValue[$SIZE];
                                    nodeValue[__CONTAINER] = newNode$2;
                                } else if (nodeType === SENTINEL) {
                                    newNode$2[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                } else if (nodeType === ERROR) {
                                    newNode$2[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                                } else if (!(value != null && typeof value === 'object')) {
                                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                    nodeType = 'sentinel';
                                    newNode$2 = { 'value': nodeValue };
                                    newNode$2[$TYPE] = nodeType;
                                    newNode$2[$SIZE] = nodeSize;
                                } else {
                                    nodeType = newNode$2[$TYPE] = nodeType || 'leaf';
                                    newNode$2[$SIZE] = nodeSize = value && value[$SIZE] || 0 || 50 + 1;
                                }
                                ;
                                if (node != null && node !== newNode$2) {
                                    var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = newNode$2[__REFS_LENGTH] || 0, i$26 = -1, ref$26;
                                    while (++i$26 < nodeRefsLength$5) {
                                        if ((ref$26 = node[__REF + i$26]) !== void 0) {
                                            ref$26[__CONTEXT] = newNode$2;
                                            newNode$2[__REF + (destRefsLength$5 + i$26)] = ref$26;
                                            node[__REF + i$26] = void 0;
                                        }
                                    }
                                    newNode$2[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                    node[__REFS_LENGTH] = ref$26 = void 0;
                                    var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$5, index$6, offset$5, childType$5, childValue$5, isBranch$5, stack$9 = [
                                            nodeParent,
                                            invKey$5,
                                            node
                                        ], depth$10 = 0;
                                    while (depth$10 > -1) {
                                        nodeParent = stack$9[offset$5 = depth$10 * 8];
                                        invKey$5 = stack$9[offset$5 + 1];
                                        node = stack$9[offset$5 + 2];
                                        if ((childType$5 = stack$9[offset$5 + 3]) === void 0 || (childType$5 = void 0)) {
                                            childType$5 = stack$9[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                        }
                                        childValue$5 = stack$9[offset$5 + 4] || (stack$9[offset$5 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                        if ((isBranch$5 = stack$9[offset$5 + 5]) === void 0) {
                                            isBranch$5 = stack$9[offset$5 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                        }
                                        if (isBranch$5 === true) {
                                            if ((keys$5 = stack$9[offset$5 + 6]) === void 0) {
                                                keys$5 = stack$9[offset$5 + 6] = [];
                                                index$6 = -1;
                                                for (invKey$5 in node) {
                                                    !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$5[++index$6] = invKey$5);
                                                }
                                            }
                                            index$6 = stack$9[offset$5 + 7] || (stack$9[offset$5 + 7] = 0);
                                            if (index$6 < keys$5.length) {
                                                stack$9[offset$5 + 7] = index$6 + 1;
                                                stack$9[offset$5 = ++depth$10 * 8] = node;
                                                stack$9[offset$5 + 1] = invKey$5 = keys$5[index$6];
                                                stack$9[offset$5 + 2] = node[invKey$5];
                                                continue;
                                            }
                                        }
                                        var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                        if (ref$27 && Array.isArray(ref$27)) {
                                            destination$9 = ref$27[__CONTEXT];
                                            if (destination$9) {
                                                var i$27 = (ref$27[__REF_INDEX] || 0) - 1, n$21 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                                while (++i$27 <= n$21) {
                                                    destination$9[__REF + i$27] = destination$9[__REF + (i$27 + 1)];
                                                }
                                                destination$9[__REFS_LENGTH] = n$21;
                                                ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                            }
                                        }
                                        var ref$28, i$28 = -1, n$22 = node[__REFS_LENGTH] || 0;
                                        while (++i$28 < n$22) {
                                            if ((ref$28 = node[__REF + i$28]) !== void 0) {
                                                ref$28[__CONTEXT] = node[__REF + i$28] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        if (node != null && typeof node === 'object') {
                                            var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                            (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                            (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                            node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                            node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                            node.__next = node.__prev = void 0;
                                            head$11 = tail$11 = next$11 = prev$11 = void 0;
                                        }
                                        nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                        delete stack$9[offset$5 + 0];
                                        delete stack$9[offset$5 + 1];
                                        delete stack$9[offset$5 + 2];
                                        delete stack$9[offset$5 + 3];
                                        delete stack$9[offset$5 + 4];
                                        delete stack$9[offset$5 + 5];
                                        delete stack$9[offset$5 + 6];
                                        delete stack$9[offset$5 + 7];
                                        --depth$10;
                                    }
                                    nodeParent = invParent$5;
                                    node = invChild$5;
                                }
                                nodeParent[key] = node = newNode$2;
                                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                size_offset$2 = leafSize$2 - nodeSize;
                                var node$6 = nodeParent, child$5 = node, stack$10 = [];
                                while (node = nodeParent) {
                                    nodeParent = node[__PARENT];
                                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                        var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                        if (ref$29 && Array.isArray(ref$29)) {
                                            destination$10 = ref$29[__CONTEXT];
                                            if (destination$10) {
                                                var i$29 = (ref$29[__REF_INDEX] || 0) - 1, n$23 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                                while (++i$29 <= n$23) {
                                                    destination$10[__REF + i$29] = destination$10[__REF + (i$29 + 1)];
                                                }
                                                destination$10[__REFS_LENGTH] = n$23;
                                                ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                            }
                                        }
                                        var ref$30, i$30 = -1, n$24 = node[__REFS_LENGTH] || 0;
                                        while (++i$30 < n$24) {
                                            if ((ref$30 = node[__REF + i$30]) !== void 0) {
                                                ref$30[__CONTEXT] = node[__REF + i$30] = void 0;
                                            }
                                        }
                                        node[__REFS_LENGTH] = void 0;
                                        if (node != null && typeof node === 'object') {
                                            var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12, prev$12;
                                            (next$12 = node.__next) && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                            (prev$12 = node.__prev) && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                            node === head$12 && (root$13.__head = root$13.__next = head$12 = next$12);
                                            node === tail$12 && (root$13.__tail = root$13.__prev = tail$12 = prev$12);
                                            node.__next = node.__prev = void 0;
                                            head$12 = tail$12 = next$12 = prev$12 = void 0;
                                        }
                                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        var depth$11 = 0, references$5, ref$31, i$31, k$5, n$25;
                                        while (depth$11 > -1) {
                                            if ((references$5 = stack$10[depth$11]) === void 0) {
                                                i$31 = k$5 = -1;
                                                n$25 = node[__REFS_LENGTH] || 0;
                                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                node[__GENERATION] = __GENERATION_GUID++;
                                                if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    stack$10[depth$11] = references$5 = new Array(n$25 + 1);
                                                    references$5[++k$5] = ref$31;
                                                } else if (n$25 > 0) {
                                                    stack$10[depth$11] = references$5 = new Array(n$25);
                                                }
                                                while (++i$31 < n$25) {
                                                    if ((ref$31 = node[__REF + i$31]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                        references$5[++k$5] = ref$31;
                                                    }
                                                }
                                            }
                                            if ((node = references$5 && references$5.pop()) !== void 0) {
                                                ++depth$11;
                                            } else {
                                                stack$10[depth$11--] = void 0;
                                            }
                                        }
                                    }
                                }
                                nodeParent = node$6;
                                node = child$5;
                                if (node != null && typeof node === 'object') {
                                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    } else {
                                        if (nodeExpires !== 1) {
                                            var root$14 = root, head$13 = root$14.__head, tail$13 = root$14.__tail, next$13 = node.__next, prev$13 = node.__prev;
                                            if (node !== head$13) {
                                                next$13 && (next$13 != null && typeof next$13 === 'object') && (next$13.__prev = prev$13);
                                                prev$13 && (prev$13 != null && typeof prev$13 === 'object') && (prev$13.__next = next$13);
                                                (next$13 = head$13) && (head$13 != null && typeof head$13 === 'object') && (head$13.__prev = node);
                                                root$14.__head = root$14.__next = head$13 = node;
                                                head$13.__next = next$13;
                                                head$13.__prev = void 0;
                                            }
                                            if (tail$13 == null || node === tail$13) {
                                                root$14.__tail = root$14.__prev = tail$13 = prev$13 || node;
                                            }
                                            root$14 = head$13 = tail$13 = next$13 = prev$13 = void 0;
                                        }
                                    }
                                }
                                appendNullKey = false;
                                nodeParent = node;
                                break follow_path_17223;
                            }
                        } else if (depth < height) {
                            nodeParent = nodeParent;
                            depth = depth + 1;
                            continue follow_path_17223;
                        }
                        nodeParent = node;
                        break follow_path_17223;
                    } while (true);
                node = nodeParent;
            }
            if (node != null || boxed === true) {
                if (nodeType === ERROR) {
                    if (nodeExpires !== 1) {
                        var root$15 = root, head$14 = root$15.__head, tail$14 = root$15.__tail, next$14 = node.__next, prev$14 = node.__prev;
                        if (node !== head$14) {
                            next$14 && (next$14 != null && typeof next$14 === 'object') && (next$14.__prev = prev$14);
                            prev$14 && (prev$14 != null && typeof prev$14 === 'object') && (prev$14.__next = next$14);
                            (next$14 = head$14) && (head$14 != null && typeof head$14 === 'object') && (head$14.__prev = node);
                            root$15.__head = root$15.__next = head$14 = node;
                            head$14.__next = next$14;
                            head$14.__prev = void 0;
                        }
                        if (tail$14 == null || node === tail$14) {
                            root$15.__tail = root$15.__prev = tail$14 = prev$14 || node;
                        }
                        root$15 = head$14 = tail$14 = next$14 = prev$14 = void 0;
                    }
                    var nodeType$2 = node && node[$TYPE] || void 0;
                    nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                    var pbv = Object.create(null);
                    var src = requestedPath, i$32 = -1, n$26 = src.length, req = new Array(n$26);
                    while (++i$32 < n$26) {
                        req[i$32] = src[i$32];
                    }
                    if (appendNullKey === true) {
                        req[req.length] = null;
                    }
                    pbv.path = req;
                    if (boxed === true) {
                        pbv.value = node;
                    } else {
                        var dest = nodeValue, src$2 = dest, x;
                        if (dest != null && typeof dest === 'object') {
                            dest = Array.isArray(src$2) && [] || Object.create(null);
                            for (x in src$2) {
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src$2[x]);
                            }
                        }
                        pbv.value = dest;
                    }
                    errors[errors.length] = pbv;
                }
                var src$3 = optimizedPath, i$33 = -1, n$27 = src$3.length, opt = new Array(n$27);
                while (++i$33 < n$27) {
                    opt[i$33] = src$3[i$33];
                }
                var src$4 = requestedPath, i$34 = -1, n$28 = src$4.length, req$2 = new Array(n$28);
                while (++i$34 < n$28) {
                    req$2[i$34] = src$4[i$34];
                }
                if (appendNullKey === true) {
                    req$2[req$2.length] = null;
                }
                requestedPaths[requestedPaths.length] = req$2;
                optimizedPaths[optimizedPaths.length] = opt;
                if (values != null) {
                    var pbv$2 = Object.create(null);
                    var src$5 = requestedPath, i$35 = -1, n$29 = src$5.length, req$3 = new Array(n$29);
                    while (++i$35 < n$29) {
                        req$3[i$35] = src$5[i$35];
                    }
                    if (appendNullKey === true) {
                        req$3[req$3.length] = null;
                    }
                    pbv$2.path = req$3;
                    if (boxed === true) {
                        pbv$2.value = node;
                    } else {
                        var dest$2 = nodeValue, src$6 = dest$2, x$2;
                        if (dest$2 != null && typeof dest$2 === 'object') {
                            dest$2 = Array.isArray(src$6) && [] || Object.create(null);
                            for (x$2 in src$6) {
                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT) || x$2[0] === '$') && (dest$2[x$2] = src$6[x$2]);
                            }
                        }
                        pbv$2.value = dest$2;
                    }
                    typeof values === 'function' && (values(pbv$2) || true) || Array.isArray(values) && (values[values.length] = pbv$2);
                }
            }
            if (boxed === false && node == null || refreshing === true) {
                var src$7 = boundPath, i$36 = -1, n$30 = src$7.length, req$4 = new Array(n$30);
                while (++i$36 < n$30) {
                    req$4[i$36] = src$7[i$36];
                }
                var src$8 = optimizedPath, i$37 = -1, n$31 = src$8.length, opt$2 = new Array(n$31);
                while (++i$37 < n$31) {
                    opt$2[i$37] = src$8[i$37];
                }
                var reqLen = req$4.length - 1, optLen = opt$2.length - 1, i$38 = -1, n$32 = requestedPath.length, j$2 = depth, k$6 = height, x$3;
                while (++i$38 < n$32) {
                    req$4[++reqLen] = path[i$38 + boundLength] != null && typeof path[i$38 + boundLength] === 'object' && [requestedPath[i$38]] || requestedPath[i$38];
                }
                i$38 = -1;
                n$32 = height - depth;
                while (++i$38 < n$32) {
                    x$3 = req$4[++reqLen] = path[++j$2 + boundLength];
                    x$3 != null && (opt$2[++optLen] = x$3);
                }
                req$4.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req$4;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
            }
            appendNullKey = false;
            var key$3;
            depth = depth;
            unroll_16864:
                do {
                    if (depth < 0) {
                        depth = (path.depth = 0) - 1;
                        break unroll_16864;
                    }
                    if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                        depth = path.depth = depth - 1;
                        continue unroll_16864;
                    }
                    if (Array.isArray(key$3)) {
                        if (++key$3.index === key$3.length) {
                            if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                depth = path.depth = depth - 1;
                                continue unroll_16864;
                            }
                        } else {
                            depth = path.depth = depth;
                            break unroll_16864;
                        }
                    }
                    if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                        key$3[__OFFSET] = key$3.from;
                        depth = path.depth = depth - 1;
                        continue unroll_16864;
                    }
                    depth = path.depth = depth;
                    break unroll_16864;
                } while (true);
            depth = depth;
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathMapsAsJSON(model, pathMaps, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var boundLength = 0, nodeRoot = model._cache || (model._cache = {}), nodeParent, node;
    if (Array.isArray(boundPath)) {
        nodeParent = nodeRoot;
        boundLength = boundPath.length;
    } else {
        nodeParent = getBoundContext(model);
        boundPath = model._path || [];
    }
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$4, y$2) {
        return y$2;
    });
    var jsonKeys = pathMaps.jsonKeys || (pathMaps.jsonKeys = []);
    var pathMapStack = pathMaps.pathMapStack || (pathMaps.pathMapStack = []);
    var nodes = pathMaps.nodes || (pathMaps.nodes = []);
    var jsons = pathMaps.jsons || (pathMaps.jsons = []);
    var errors = pathMaps.errors || (pathMaps.errors = []);
    var refs = pathMaps.refs || (pathMaps.refs = []);
    var depth = pathMaps.depth || (pathMaps.depth = 0);
    var refIndex = pathMaps.refIndex || (pathMaps.refIndex = 0);
    var refDepth = pathMaps.refDepth || (pathMaps.refDepth = 0);
    var requestedPath = pathMaps.requestedPath || (pathMaps.requestedPath = []);
    var optimizedPath = pathMaps.optimizedPath || (pathMaps.optimizedPath = []);
    var requestedPaths = pathMaps.requestedPaths || (pathMaps.requestedPaths = []);
    var optimizedPaths = pathMaps.optimizedPaths || (pathMaps.optimizedPaths = []);
    var requestedMissingPaths = pathMaps.requestedMissingPaths || (pathMaps.requestedMissingPaths = []);
    var optimizedMissingPaths = pathMaps.optimizedMissingPaths || (pathMaps.optimizedMissingPaths = []);
    var hasValue = pathMaps.hasValue || (pathMaps.hasValue = false);
    var jsonRoot = pathMaps.jsonRoot || (pathMaps.jsonRoot = values && values[0]);
    var jsonParent = pathMaps.jsonParent || (pathMaps.jsonParent = jsonRoot);
    var jsonNode = pathMaps.jsonNode || (pathMaps.jsonNode = jsonParent);
    var pathMap, length = 0, height = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-2] = jsons;
    jsonKeys[-1] = -1;
    var index = -1, count = pathMaps.length;
    while (++index < count) {
        pathMap = pathMaps[index];
        pathMapStack[0] = pathMap;
        hasValue = false;
        jsons.length = 0;
        jsons[-1] = jsonRoot = values && values[index] || void 0;
        jsonKeys.length = 0;
        jsonKeys[-1] = -1;
        depth = 0;
        length = pathMap.length;
        height = length - 1;
        var ref;
        refs.length = 0;
        while (depth > -1) {
            refIndex = depth;
            while (--refIndex >= -1) {
                if (!!(ref = refs[refIndex])) {
                    refLength = ref.length;
                    var i = -1, j = 0;
                    while (++i < refLength) {
                        optimizedPath[j++] = ref[i];
                    }
                    i = ++refIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    optimizedPath.length = j;
                    break;
                }
            }
            var offset, keys, index$2, key, isKeySet;
            pathMap = pathMap;
            height = (length = depth) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                node = nodeParent[key];
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                nodeTimestamp = node && node[$TIMESTAMP];
                nodeExpires = node && node[$EXPIRES];
                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                nodeType = pathMap && pathMap[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? pathMap[VALUE] : pathMap;
                nodeTimestamp = pathMap && pathMap[$TIMESTAMP];
                nodeExpires = pathMap && pathMap[$EXPIRES];
                var newNode, size_offset, leafSize = node && node[$SIZE] || 0;
                newNode = pathMap;
                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                    nodeType = 'array';
                    newNode[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                    delete nodeValue[$SIZE];
                    nodeValue[__CONTAINER] = newNode;
                } else if (nodeType === SENTINEL) {
                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                } else if (nodeType === ERROR) {
                    newNode[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                } else if (!(pathMap != null && typeof pathMap === 'object')) {
                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                    nodeType = 'sentinel';
                    newNode = { 'value': nodeValue };
                    newNode[$TYPE] = nodeType;
                    newNode[$SIZE] = nodeSize;
                } else {
                    nodeType = newNode[$TYPE] = nodeType || 'leaf';
                    newNode[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                }
                ;
                if (node != null && node !== newNode) {
                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = newNode[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                    while (++i$2 < nodeRefsLength) {
                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                            ref$2[__CONTEXT] = newNode;
                            newNode[__REF + (destRefsLength + i$2)] = ref$2;
                            node[__REF + i$2] = void 0;
                        }
                    }
                    newNode[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                    node[__REFS_LENGTH] = ref$2 = void 0;
                    var invParent = nodeParent, invChild = node, invKey = key, keys$2, index$3, offset$2, childType, childValue, isBranch, stack = [
                            nodeParent,
                            invKey,
                            node
                        ], depth$2 = 0;
                    while (depth$2 > -1) {
                        nodeParent = stack[offset$2 = depth$2 * 8];
                        invKey = stack[offset$2 + 1];
                        node = stack[offset$2 + 2];
                        if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                            childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                        }
                        childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                        if ((isBranch = stack[offset$2 + 5]) === void 0) {
                            isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                        }
                        if (isBranch === true) {
                            if ((keys$2 = stack[offset$2 + 6]) === void 0) {
                                keys$2 = stack[offset$2 + 6] = [];
                                index$3 = -1;
                                for (invKey in node) {
                                    !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys$2[++index$3] = invKey);
                                }
                            }
                            index$3 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                            if (index$3 < keys$2.length) {
                                stack[offset$2 + 7] = index$3 + 1;
                                stack[offset$2 = ++depth$2 * 8] = node;
                                stack[offset$2 + 1] = invKey = keys$2[index$3];
                                stack[offset$2 + 2] = node[invKey];
                                continue;
                            }
                        }
                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                        if (ref$3 && Array.isArray(ref$3)) {
                            destination = ref$3[__CONTEXT];
                            if (destination) {
                                var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                while (++i$3 <= n) {
                                    destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                }
                                destination[__REFS_LENGTH] = n;
                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                            }
                        }
                        var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                        while (++i$4 < n$2) {
                            if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                            (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                            (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            node === head && (root$2.__head = root$2.__next = head = next);
                            node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                            node.__next = node.__prev = void 0;
                            head = tail = next = prev = void 0;
                        }
                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                        delete stack[offset$2 + 0];
                        delete stack[offset$2 + 1];
                        delete stack[offset$2 + 2];
                        delete stack[offset$2 + 3];
                        delete stack[offset$2 + 4];
                        delete stack[offset$2 + 5];
                        delete stack[offset$2 + 6];
                        delete stack[offset$2 + 7];
                        --depth$2;
                    }
                    nodeParent = invParent;
                    node = invChild;
                }
                nodeParent[key] = node = newNode;
                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                size_offset = leafSize - nodeSize;
                var node$2 = nodeParent, child = node, stack$2 = [];
                while (node = nodeParent) {
                    nodeParent = node[__PARENT];
                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                        var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                        if (ref$5 && Array.isArray(ref$5)) {
                            destination$2 = ref$5[__CONTEXT];
                            if (destination$2) {
                                var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                while (++i$5 <= n$3) {
                                    destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                }
                                destination$2[__REFS_LENGTH] = n$3;
                                ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                            }
                        }
                        var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                        while (++i$6 < n$4) {
                            if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                            (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                            (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                            node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                            node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                            node.__next = node.__prev = void 0;
                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                        }
                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                        var depth$3 = 0, references, ref$7, i$7, k, n$5;
                        while (depth$3 > -1) {
                            if ((references = stack$2[depth$3]) === void 0) {
                                i$7 = k = -1;
                                n$5 = node[__REFS_LENGTH] || 0;
                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                node[__GENERATION] = __GENERATION_GUID++;
                                if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    stack$2[depth$3] = references = new Array(n$5 + 1);
                                    references[++k] = ref$7;
                                } else if (n$5 > 0) {
                                    stack$2[depth$3] = references = new Array(n$5);
                                }
                                while (++i$7 < n$5) {
                                    if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        references[++k] = ref$7;
                                    }
                                }
                            }
                            if ((node = references && references.pop()) !== void 0) {
                                ++depth$3;
                            } else {
                                stack$2[depth$3--] = void 0;
                            }
                        }
                    }
                }
                nodeParent = node$2;
                node = child;
                if (node != null && typeof node === 'object') {
                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    } else {
                        if (nodeExpires !== 1) {
                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                            if (node !== head$3) {
                                next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                root$4.__head = root$4.__next = head$3 = node;
                                head$3.__next = next$3;
                                head$3.__prev = void 0;
                            }
                            if (tail$3 == null || node === tail$3) {
                                root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                            }
                            root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                        }
                    }
                }
                if (depth >= boundLength) {
                    jsonKeys[depth] = isKeySet ? key : void 0;
                } else {
                    jsonKeys[depth] = void 0;
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                jsonParent = jsonNode = jsons[depth - 1];
                depth = depth;
                follow_path_map_6333:
                    do {
                        if ((pathMap = pathMapStack[offset = depth * 4]) != null && typeof pathMap === 'object' && (keys = pathMapStack[offset + 1] || (pathMapStack[offset + 1] = Object.keys(pathMap))) && ((index$2 = pathMapStack[offset + 2] || (pathMapStack[offset + 2] = 0)) || true) && ((key = pathMapStack[offset + 3]) || true) && ((isKeySet = keys.length > 1) || keys.length > 0)) {
                            key = keys[index$2];
                            if (key == __NULL) {
                                pathMapStack[offset = 3 * (depth + 1)] = pathMap[__NULL];
                                pathMapStack[offset + 1] = keys;
                                pathMapStack[offset + 2] = 0;
                                nodeParent = nodes[depth] = node;
                                jsonParent = jsons[depth] = jsonNode;
                                depth = depth + 1;
                                continue follow_path_map_6333;
                            } else if (key === $SIZE || (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT))) {
                                nodeParent = node;
                                break follow_path_map_6333;
                            } else if (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') {
                                nodeParent[key] || (nodeParent[key] = pathMap[key]);
                                nodeParent = node;
                                break follow_path_map_6333;
                            } else {
                                depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                                pathMapStack[offset = 4 * (depth + 1)] = pathMap = pathMap[key];
                                if (pathMap != null && typeof pathMap === 'object' && pathMap[$TYPE] === void 0 && Array.isArray(pathMap) === false && (keys = Object.keys(pathMap)) && keys.length > 0) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                        nodeType = void 0;
                                        nodeValue = Object.create(null);
                                        nodeSize = node && node[$SIZE] || 0;
                                        if (node != null && node !== nodeValue) {
                                            var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = nodeValue[__REFS_LENGTH] || 0, i$8 = -1, ref$8;
                                            while (++i$8 < nodeRefsLength$2) {
                                                if ((ref$8 = node[__REF + i$8]) !== void 0) {
                                                    ref$8[__CONTEXT] = nodeValue;
                                                    nodeValue[__REF + (destRefsLength$2 + i$8)] = ref$8;
                                                    node[__REF + i$8] = void 0;
                                                }
                                            }
                                            nodeValue[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                            node[__REFS_LENGTH] = ref$8 = void 0;
                                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$4, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                    nodeParent,
                                                    invKey$2,
                                                    node
                                                ], depth$4 = 0;
                                            while (depth$4 > -1) {
                                                nodeParent = stack$3[offset$3 = depth$4 * 8];
                                                invKey$2 = stack$3[offset$3 + 1];
                                                node = stack$3[offset$3 + 2];
                                                if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                                    childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                                    isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                }
                                                if (isBranch$2 === true) {
                                                    if ((keys$3 = stack$3[offset$3 + 6]) === void 0) {
                                                        keys$3 = stack$3[offset$3 + 6] = [];
                                                        index$4 = -1;
                                                        for (invKey$2 in node) {
                                                            !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$3[++index$4] = invKey$2);
                                                        }
                                                    }
                                                    index$4 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                                    if (index$4 < keys$3.length) {
                                                        stack$3[offset$3 + 7] = index$4 + 1;
                                                        stack$3[offset$3 = ++depth$4 * 8] = node;
                                                        stack$3[offset$3 + 1] = invKey$2 = keys$3[index$4];
                                                        stack$3[offset$3 + 2] = node[invKey$2];
                                                        continue;
                                                    }
                                                }
                                                var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                if (ref$9 && Array.isArray(ref$9)) {
                                                    destination$3 = ref$9[__CONTEXT];
                                                    if (destination$3) {
                                                        var i$9 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$9 <= n$6) {
                                                            destination$3[__REF + i$9] = destination$3[__REF + (i$9 + 1)];
                                                        }
                                                        destination$3[__REFS_LENGTH] = n$6;
                                                        ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                    }
                                                }
                                                var ref$10, i$10 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                                while (++i$10 < n$7) {
                                                    if ((ref$10 = node[__REF + i$10]) !== void 0) {
                                                        ref$10[__CONTEXT] = node[__REF + i$10] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                    (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                    (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                    node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                    node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                    node.__next = node.__prev = void 0;
                                                    head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                }
                                                nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                delete stack$3[offset$3 + 0];
                                                delete stack$3[offset$3 + 1];
                                                delete stack$3[offset$3 + 2];
                                                delete stack$3[offset$3 + 3];
                                                delete stack$3[offset$3 + 4];
                                                delete stack$3[offset$3 + 5];
                                                delete stack$3[offset$3 + 6];
                                                delete stack$3[offset$3 + 7];
                                                --depth$4;
                                            }
                                            nodeParent = invParent$2;
                                            node = invChild$2;
                                        }
                                        nodeParent[key] = node = nodeValue;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                if (ref$11 && Array.isArray(ref$11)) {
                                                    destination$4 = ref$11[__CONTEXT];
                                                    if (destination$4) {
                                                        var i$11 = (ref$11[__REF_INDEX] || 0) - 1, n$8 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$11 <= n$8) {
                                                            destination$4[__REF + i$11] = destination$4[__REF + (i$11 + 1)];
                                                        }
                                                        destination$4[__REFS_LENGTH] = n$8;
                                                        ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                    }
                                                }
                                                var ref$12, i$12 = -1, n$9 = node[__REFS_LENGTH] || 0;
                                                while (++i$12 < n$9) {
                                                    if ((ref$12 = node[__REF + i$12]) !== void 0) {
                                                        ref$12[__CONTEXT] = node[__REF + i$12] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5, prev$5;
                                                    (next$5 = node.__next) && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                    (prev$5 = node.__prev) && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                    node === head$5 && (root$6.__head = root$6.__next = head$5 = next$5);
                                                    node === tail$5 && (root$6.__tail = root$6.__prev = tail$5 = prev$5);
                                                    node.__next = node.__prev = void 0;
                                                    head$5 = tail$5 = next$5 = prev$5 = void 0;
                                                }
                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var depth$5 = 0, references$2, ref$13, i$13, k$2, n$10;
                                                while (depth$5 > -1) {
                                                    if ((references$2 = stack$4[depth$5]) === void 0) {
                                                        i$13 = k$2 = -1;
                                                        n$10 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                        if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$4[depth$5] = references$2 = new Array(n$10 + 1);
                                                            references$2[++k$2] = ref$13;
                                                        } else if (n$10 > 0) {
                                                            stack$4[depth$5] = references$2 = new Array(n$10);
                                                        }
                                                        while (++i$13 < n$10) {
                                                            if ((ref$13 = node[__REF + i$13]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                references$2[++k$2] = ref$13;
                                                            }
                                                        }
                                                    }
                                                    if ((node = references$2 && references$2.pop()) !== void 0) {
                                                        ++depth$5;
                                                    } else {
                                                        stack$4[depth$5--] = void 0;
                                                    }
                                                }
                                            }
                                        }
                                        nodeParent = node$3;
                                        node = child$2;
                                    }
                                    if (depth >= boundLength) {
                                        jsonKeys[depth] = isKeySet ? key : void 0;
                                        if (node != null && jsonParent != null && isKeySet && (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object'))) {
                                            jsonNode = jsonParent[key] = Object.create(null);
                                        }
                                    } else {
                                        jsonKeys[depth] = void 0;
                                    }
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        do {
                                            if (nodeExpires !== 1) {
                                                var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                                if (node !== head$6) {
                                                    next$6 && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                    prev$6 && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                    (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                                    root$7.__head = root$7.__next = head$6 = node;
                                                    head$6.__next = next$6;
                                                    head$6.__prev = void 0;
                                                }
                                                if (tail$6 == null || node === tail$6) {
                                                    root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                                }
                                                root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                            }
                                            refs[depth] = nodeValue;
                                            refIndex = depth + 1;
                                            refDepth = 0;
                                            var location = (nodeValue[__CONTAINER] || nodeValue)[__CONTEXT];
                                            if (location !== void 0) {
                                                node = location;
                                                refHeight = (refLength = nodeValue.length) - 1;
                                                while (refDepth < refLength) {
                                                    optimizedPath[refDepth] = nodeValue[refDepth++];
                                                }
                                                optimizedPath.length = refLength;
                                            } else {
                                                var key$2, isKeySet$2;
                                                reference = nodeValue;
                                                refHeight = (refLength = reference.length) - 1;
                                                nodeParent = nodeRoot;
                                                nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                                nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                                if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                    node = node = nodeParent;
                                                } else {
                                                    nodeParent = nodeRoot;
                                                    jsonParent = jsonRoot;
                                                    refDepth = refDepth;
                                                    follow_path_6746:
                                                        do {
                                                            key$2 = reference[refDepth];
                                                            isKeySet$2 = false;
                                                            if (key$2 != null) {
                                                                if (refDepth < refHeight) {
                                                                    optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                    node = nodeParent[key$2];
                                                                    nodeType = node && node[$TYPE] || void 0;
                                                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                    nodeTimestamp = node && node[$TIMESTAMP];
                                                                    nodeExpires = node && node[$EXPIRES];
                                                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                    }
                                                                    if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                        nodeType = void 0;
                                                                        nodeValue = Object.create(null);
                                                                        nodeSize = node && node[$SIZE] || 0;
                                                                        if (node != null && node !== nodeValue) {
                                                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$14 = -1, ref$14;
                                                                            while (++i$14 < nodeRefsLength$3) {
                                                                                if ((ref$14 = node[__REF + i$14]) !== void 0) {
                                                                                    ref$14[__CONTEXT] = nodeValue;
                                                                                    nodeValue[__REF + (destRefsLength$3 + i$14)] = ref$14;
                                                                                    node[__REF + i$14] = void 0;
                                                                                }
                                                                            }
                                                                            nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$4, index$5, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                    nodeParent,
                                                                                    invKey$3,
                                                                                    node
                                                                                ], depth$6 = 0;
                                                                            while (depth$6 > -1) {
                                                                                nodeParent = stack$5[offset$4 = depth$6 * 8];
                                                                                invKey$3 = stack$5[offset$4 + 1];
                                                                                node = stack$5[offset$4 + 2];
                                                                                if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                    childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                                                                    isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                                }
                                                                                if (isBranch$3 === true) {
                                                                                    if ((keys$4 = stack$5[offset$4 + 6]) === void 0) {
                                                                                        keys$4 = stack$5[offset$4 + 6] = [];
                                                                                        index$5 = -1;
                                                                                        for (invKey$3 in node) {
                                                                                            !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$4[++index$5] = invKey$3);
                                                                                        }
                                                                                    }
                                                                                    index$5 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                                                                    if (index$5 < keys$4.length) {
                                                                                        stack$5[offset$4 + 7] = index$5 + 1;
                                                                                        stack$5[offset$4 = ++depth$6 * 8] = node;
                                                                                        stack$5[offset$4 + 1] = invKey$3 = keys$4[index$5];
                                                                                        stack$5[offset$4 + 2] = node[invKey$3];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                                if (ref$15 && Array.isArray(ref$15)) {
                                                                                    destination$5 = ref$15[__CONTEXT];
                                                                                    if (destination$5) {
                                                                                        var i$15 = (ref$15[__REF_INDEX] || 0) - 1, n$11 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$15 <= n$11) {
                                                                                            destination$5[__REF + i$15] = destination$5[__REF + (i$15 + 1)];
                                                                                        }
                                                                                        destination$5[__REFS_LENGTH] = n$11;
                                                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$16, i$16 = -1, n$12 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$16 < n$12) {
                                                                                    if ((ref$16 = node[__REF + i$16]) !== void 0) {
                                                                                        ref$16[__CONTEXT] = node[__REF + i$16] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                    (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                    (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                    node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                    node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                                }
                                                                                nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$5[offset$4 + 0];
                                                                                delete stack$5[offset$4 + 1];
                                                                                delete stack$5[offset$4 + 2];
                                                                                delete stack$5[offset$4 + 3];
                                                                                delete stack$5[offset$4 + 4];
                                                                                delete stack$5[offset$4 + 5];
                                                                                delete stack$5[offset$4 + 6];
                                                                                delete stack$5[offset$4 + 7];
                                                                                --depth$6;
                                                                            }
                                                                            nodeParent = invParent$3;
                                                                            node = invChild$3;
                                                                        }
                                                                        nodeParent[key$2] = node = nodeValue;
                                                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                        var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                                if (ref$17 && Array.isArray(ref$17)) {
                                                                                    destination$6 = ref$17[__CONTEXT];
                                                                                    if (destination$6) {
                                                                                        var i$17 = (ref$17[__REF_INDEX] || 0) - 1, n$13 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$17 <= n$13) {
                                                                                            destination$6[__REF + i$17] = destination$6[__REF + (i$17 + 1)];
                                                                                        }
                                                                                        destination$6[__REFS_LENGTH] = n$13;
                                                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$18, i$18 = -1, n$14 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$18 < n$14) {
                                                                                    if ((ref$18 = node[__REF + i$18]) !== void 0) {
                                                                                        ref$18[__CONTEXT] = node[__REF + i$18] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                    (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                    (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                    node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                    node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$7 = 0, references$3, ref$19, i$19, k$3, n$15;
                                                                                while (depth$7 > -1) {
                                                                                    if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                        i$19 = k$3 = -1;
                                                                                        n$15 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$15 + 1);
                                                                                            references$3[++k$3] = ref$19;
                                                                                        } else if (n$15 > 0) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$15);
                                                                                        }
                                                                                        while (++i$19 < n$15) {
                                                                                            if ((ref$19 = node[__REF + i$19]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$3[++k$3] = ref$19;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                        ++depth$7;
                                                                                    } else {
                                                                                        stack$6[depth$7--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$4;
                                                                        node = child$3;
                                                                    }
                                                                    if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                        nodeParent = node;
                                                                        break follow_path_6746;
                                                                    }
                                                                    nodeParent = node;
                                                                    jsonParent = jsonNode;
                                                                    refDepth = refDepth + 1;
                                                                    continue follow_path_6746;
                                                                } else if (refDepth === refHeight) {
                                                                    optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                    node = nodeParent[key$2];
                                                                    nodeType = node && node[$TYPE] || void 0;
                                                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                    nodeTimestamp = node && node[$TIMESTAMP];
                                                                    nodeExpires = node && node[$EXPIRES];
                                                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                    }
                                                                    if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                        nodeType = void 0;
                                                                        nodeValue = Object.create(null);
                                                                        nodeSize = node && node[$SIZE] || 0;
                                                                        if (node != null && node !== nodeValue) {
                                                                            var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = nodeValue[__REFS_LENGTH] || 0, i$20 = -1, ref$20;
                                                                            while (++i$20 < nodeRefsLength$4) {
                                                                                if ((ref$20 = node[__REF + i$20]) !== void 0) {
                                                                                    ref$20[__CONTEXT] = nodeValue;
                                                                                    nodeValue[__REF + (destRefsLength$4 + i$20)] = ref$20;
                                                                                    node[__REF + i$20] = void 0;
                                                                                }
                                                                            }
                                                                            nodeValue[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                            node[__REFS_LENGTH] = ref$20 = void 0;
                                                                            var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$5, index$6, offset$5, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                    nodeParent,
                                                                                    invKey$4,
                                                                                    node
                                                                                ], depth$8 = 0;
                                                                            while (depth$8 > -1) {
                                                                                nodeParent = stack$7[offset$5 = depth$8 * 8];
                                                                                invKey$4 = stack$7[offset$5 + 1];
                                                                                node = stack$7[offset$5 + 2];
                                                                                if ((childType$4 = stack$7[offset$5 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                    childType$4 = stack$7[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$4 = stack$7[offset$5 + 4] || (stack$7[offset$5 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$4 = stack$7[offset$5 + 5]) === void 0) {
                                                                                    isBranch$4 = stack$7[offset$5 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                                }
                                                                                if (isBranch$4 === true) {
                                                                                    if ((keys$5 = stack$7[offset$5 + 6]) === void 0) {
                                                                                        keys$5 = stack$7[offset$5 + 6] = [];
                                                                                        index$6 = -1;
                                                                                        for (invKey$4 in node) {
                                                                                            !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$5[++index$6] = invKey$4);
                                                                                        }
                                                                                    }
                                                                                    index$6 = stack$7[offset$5 + 7] || (stack$7[offset$5 + 7] = 0);
                                                                                    if (index$6 < keys$5.length) {
                                                                                        stack$7[offset$5 + 7] = index$6 + 1;
                                                                                        stack$7[offset$5 = ++depth$8 * 8] = node;
                                                                                        stack$7[offset$5 + 1] = invKey$4 = keys$5[index$6];
                                                                                        stack$7[offset$5 + 2] = node[invKey$4];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                                if (ref$21 && Array.isArray(ref$21)) {
                                                                                    destination$7 = ref$21[__CONTEXT];
                                                                                    if (destination$7) {
                                                                                        var i$21 = (ref$21[__REF_INDEX] || 0) - 1, n$16 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$21 <= n$16) {
                                                                                            destination$7[__REF + i$21] = destination$7[__REF + (i$21 + 1)];
                                                                                        }
                                                                                        destination$7[__REFS_LENGTH] = n$16;
                                                                                        ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$22, i$22 = -1, n$17 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$22 < n$17) {
                                                                                    if ((ref$22 = node[__REF + i$22]) !== void 0) {
                                                                                        ref$22[__CONTEXT] = node[__REF + i$22] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                    (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                    (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                    node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                    node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                                }
                                                                                nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$7[offset$5 + 0];
                                                                                delete stack$7[offset$5 + 1];
                                                                                delete stack$7[offset$5 + 2];
                                                                                delete stack$7[offset$5 + 3];
                                                                                delete stack$7[offset$5 + 4];
                                                                                delete stack$7[offset$5 + 5];
                                                                                delete stack$7[offset$5 + 6];
                                                                                delete stack$7[offset$5 + 7];
                                                                                --depth$8;
                                                                            }
                                                                            nodeParent = invParent$4;
                                                                            node = invChild$4;
                                                                        }
                                                                        nodeParent[key$2] = node = nodeValue;
                                                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                        var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                                var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                                if (ref$23 && Array.isArray(ref$23)) {
                                                                                    destination$8 = ref$23[__CONTEXT];
                                                                                    if (destination$8) {
                                                                                        var i$23 = (ref$23[__REF_INDEX] || 0) - 1, n$18 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$23 <= n$18) {
                                                                                            destination$8[__REF + i$23] = destination$8[__REF + (i$23 + 1)];
                                                                                        }
                                                                                        destination$8[__REFS_LENGTH] = n$18;
                                                                                        ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$24, i$24 = -1, n$19 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$24 < n$19) {
                                                                                    if ((ref$24 = node[__REF + i$24]) !== void 0) {
                                                                                        ref$24[__CONTEXT] = node[__REF + i$24] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                                                    (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                                                    (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                                                    node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                                                    node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$9 = 0, references$4, ref$25, i$25, k$4, n$20;
                                                                                while (depth$9 > -1) {
                                                                                    if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                        i$25 = k$4 = -1;
                                                                                        n$20 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$20 + 1);
                                                                                            references$4[++k$4] = ref$25;
                                                                                        } else if (n$20 > 0) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$20);
                                                                                        }
                                                                                        while (++i$25 < n$20) {
                                                                                            if ((ref$25 = node[__REF + i$25]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$4[++k$4] = ref$25;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                        ++depth$9;
                                                                                    } else {
                                                                                        stack$8[depth$9--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$5;
                                                                        node = child$4;
                                                                    }
                                                                    if (node != null) {
                                                                        var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                        // Set up the hard-link so we don't have to do all
                                                                        // this work the next time we follow this reference.
                                                                        if (refContext === void 0) {
                                                                            // create a back reference
                                                                            var backRefs = node[__REFS_LENGTH] || 0;
                                                                            node[__REF + backRefs] = refContainer;
                                                                            node[__REFS_LENGTH] = backRefs + 1;
                                                                            // create a hard reference
                                                                            refContainer[__REF_INDEX] = backRefs;
                                                                            refContainer[__CONTEXT] = node;
                                                                            refContainer = backRefs = void 0;
                                                                        }
                                                                        ;
                                                                    }
                                                                    appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                    nodeParent = node;
                                                                    break follow_path_6746;
                                                                }
                                                            } else if (refDepth < refHeight) {
                                                                nodeParent = node;
                                                                jsonParent = jsonNode;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_6746;
                                                            }
                                                            nodeParent = node;
                                                            break follow_path_6746;
                                                        } while (true);
                                                    node = nodeParent;
                                                }
                                            }
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeExpires = node && node[$EXPIRES];
                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                        } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                        if (node == null) {
                                            while (refDepth <= refHeight) {
                                                optimizedPath[refDepth] = reference[refDepth++];
                                            }
                                        }
                                    }
                                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                        nodeParent = node;
                                        break follow_path_map_6333;
                                    }
                                    pathMapStack[offset + 1] = keys;
                                    pathMapStack[offset + 3] = key;
                                    nodeParent = nodes[depth] = node;
                                    jsonParent = jsons[depth] = jsonNode;
                                    depth = depth + 1;
                                    continue follow_path_map_6333;
                                }
                            }
                        }
                        if (key != null) {
                            optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                            node = nodeParent[key];
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            nodeTimestamp = node && node[$TIMESTAMP];
                            nodeExpires = node && node[$EXPIRES];
                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            nodeType = pathMap && pathMap[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? pathMap[VALUE] : pathMap;
                            nodeTimestamp = pathMap && pathMap[$TIMESTAMP];
                            nodeExpires = pathMap && pathMap[$EXPIRES];
                            var newNode$2, size_offset$2, leafSize$2 = node && node[$SIZE] || 0;
                            newNode$2 = pathMap;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                nodeType = 'array';
                                newNode$2[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                                delete nodeValue[$SIZE];
                                nodeValue[__CONTAINER] = newNode$2;
                            } else if (nodeType === SENTINEL) {
                                newNode$2[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            } else if (nodeType === ERROR) {
                                newNode$2[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                            } else if (!(pathMap != null && typeof pathMap === 'object')) {
                                nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                nodeType = 'sentinel';
                                newNode$2 = { 'value': nodeValue };
                                newNode$2[$TYPE] = nodeType;
                                newNode$2[$SIZE] = nodeSize;
                            } else {
                                nodeType = newNode$2[$TYPE] = nodeType || 'leaf';
                                newNode$2[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                            }
                            ;
                            if (node != null && node !== newNode$2) {
                                var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = newNode$2[__REFS_LENGTH] || 0, i$26 = -1, ref$26;
                                while (++i$26 < nodeRefsLength$5) {
                                    if ((ref$26 = node[__REF + i$26]) !== void 0) {
                                        ref$26[__CONTEXT] = newNode$2;
                                        newNode$2[__REF + (destRefsLength$5 + i$26)] = ref$26;
                                        node[__REF + i$26] = void 0;
                                    }
                                }
                                newNode$2[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                node[__REFS_LENGTH] = ref$26 = void 0;
                                var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$6, index$7, offset$6, childType$5, childValue$5, isBranch$5, stack$9 = [
                                        nodeParent,
                                        invKey$5,
                                        node
                                    ], depth$10 = 0;
                                while (depth$10 > -1) {
                                    nodeParent = stack$9[offset$6 = depth$10 * 8];
                                    invKey$5 = stack$9[offset$6 + 1];
                                    node = stack$9[offset$6 + 2];
                                    if ((childType$5 = stack$9[offset$6 + 3]) === void 0 || (childType$5 = void 0)) {
                                        childType$5 = stack$9[offset$6 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$5 = stack$9[offset$6 + 4] || (stack$9[offset$6 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$5 = stack$9[offset$6 + 5]) === void 0) {
                                        isBranch$5 = stack$9[offset$6 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                    }
                                    if (isBranch$5 === true) {
                                        if ((keys$6 = stack$9[offset$6 + 6]) === void 0) {
                                            keys$6 = stack$9[offset$6 + 6] = [];
                                            index$7 = -1;
                                            for (invKey$5 in node) {
                                                !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$6[++index$7] = invKey$5);
                                            }
                                        }
                                        index$7 = stack$9[offset$6 + 7] || (stack$9[offset$6 + 7] = 0);
                                        if (index$7 < keys$6.length) {
                                            stack$9[offset$6 + 7] = index$7 + 1;
                                            stack$9[offset$6 = ++depth$10 * 8] = node;
                                            stack$9[offset$6 + 1] = invKey$5 = keys$6[index$7];
                                            stack$9[offset$6 + 2] = node[invKey$5];
                                            continue;
                                        }
                                    }
                                    var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                    if (ref$27 && Array.isArray(ref$27)) {
                                        destination$9 = ref$27[__CONTEXT];
                                        if (destination$9) {
                                            var i$27 = (ref$27[__REF_INDEX] || 0) - 1, n$21 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                            while (++i$27 <= n$21) {
                                                destination$9[__REF + i$27] = destination$9[__REF + (i$27 + 1)];
                                            }
                                            destination$9[__REFS_LENGTH] = n$21;
                                            ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                        }
                                    }
                                    var ref$28, i$28 = -1, n$22 = node[__REFS_LENGTH] || 0;
                                    while (++i$28 < n$22) {
                                        if ((ref$28 = node[__REF + i$28]) !== void 0) {
                                            ref$28[__CONTEXT] = node[__REF + i$28] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    if (node != null && typeof node === 'object') {
                                        var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                        (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                        (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                        node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                        node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                        node.__next = node.__prev = void 0;
                                        head$11 = tail$11 = next$11 = prev$11 = void 0;
                                    }
                                    nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    delete stack$9[offset$6 + 0];
                                    delete stack$9[offset$6 + 1];
                                    delete stack$9[offset$6 + 2];
                                    delete stack$9[offset$6 + 3];
                                    delete stack$9[offset$6 + 4];
                                    delete stack$9[offset$6 + 5];
                                    delete stack$9[offset$6 + 6];
                                    delete stack$9[offset$6 + 7];
                                    --depth$10;
                                }
                                nodeParent = invParent$5;
                                node = invChild$5;
                            }
                            nodeParent[key] = node = newNode$2;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            size_offset$2 = leafSize$2 - nodeSize;
                            var node$6 = nodeParent, child$5 = node, stack$10 = [];
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                    var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                    if (ref$29 && Array.isArray(ref$29)) {
                                        destination$10 = ref$29[__CONTEXT];
                                        if (destination$10) {
                                            var i$29 = (ref$29[__REF_INDEX] || 0) - 1, n$23 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                            while (++i$29 <= n$23) {
                                                destination$10[__REF + i$29] = destination$10[__REF + (i$29 + 1)];
                                            }
                                            destination$10[__REFS_LENGTH] = n$23;
                                            ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                        }
                                    }
                                    var ref$30, i$30 = -1, n$24 = node[__REFS_LENGTH] || 0;
                                    while (++i$30 < n$24) {
                                        if ((ref$30 = node[__REF + i$30]) !== void 0) {
                                            ref$30[__CONTEXT] = node[__REF + i$30] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    if (node != null && typeof node === 'object') {
                                        var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12, prev$12;
                                        (next$12 = node.__next) && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                        (prev$12 = node.__prev) && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                        node === head$12 && (root$13.__head = root$13.__next = head$12 = next$12);
                                        node === tail$12 && (root$13.__tail = root$13.__prev = tail$12 = prev$12);
                                        node.__next = node.__prev = void 0;
                                        head$12 = tail$12 = next$12 = prev$12 = void 0;
                                    }
                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var depth$11 = 0, references$5, ref$31, i$31, k$5, n$25;
                                    while (depth$11 > -1) {
                                        if ((references$5 = stack$10[depth$11]) === void 0) {
                                            i$31 = k$5 = -1;
                                            n$25 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = __GENERATION_GUID++;
                                            if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$10[depth$11] = references$5 = new Array(n$25 + 1);
                                                references$5[++k$5] = ref$31;
                                            } else if (n$25 > 0) {
                                                stack$10[depth$11] = references$5 = new Array(n$25);
                                            }
                                            while (++i$31 < n$25) {
                                                if ((ref$31 = node[__REF + i$31]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    references$5[++k$5] = ref$31;
                                                }
                                            }
                                        }
                                        if ((node = references$5 && references$5.pop()) !== void 0) {
                                            ++depth$11;
                                        } else {
                                            stack$10[depth$11--] = void 0;
                                        }
                                    }
                                }
                            }
                            nodeParent = node$6;
                            node = child$5;
                            if (node != null && typeof node === 'object') {
                                if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                } else {
                                    if (nodeExpires !== 1) {
                                        var root$14 = root, head$13 = root$14.__head, tail$13 = root$14.__tail, next$13 = node.__next, prev$13 = node.__prev;
                                        if (node !== head$13) {
                                            next$13 && (next$13 != null && typeof next$13 === 'object') && (next$13.__prev = prev$13);
                                            prev$13 && (prev$13 != null && typeof prev$13 === 'object') && (prev$13.__next = next$13);
                                            (next$13 = head$13) && (head$13 != null && typeof head$13 === 'object') && (head$13.__prev = node);
                                            root$14.__head = root$14.__next = head$13 = node;
                                            head$13.__next = next$13;
                                            head$13.__prev = void 0;
                                        }
                                        if (tail$13 == null || node === tail$13) {
                                            root$14.__tail = root$14.__prev = tail$13 = prev$13 || node;
                                        }
                                        root$14 = head$13 = tail$13 = next$13 = prev$13 = void 0;
                                    }
                                }
                            }
                            if (depth >= boundLength) {
                                jsonKeys[depth] = isKeySet ? key : void 0;
                            } else {
                                jsonKeys[depth] = void 0;
                            }
                            appendNullKey = false;
                        }
                        nodeParent = node;
                        break follow_path_map_6333;
                    } while (true);
                node = nodeParent;
            }
            if (node != null || boxed === true) {
                if (nodeType === ERROR) {
                    if (nodeExpires !== 1) {
                        var root$15 = root, head$14 = root$15.__head, tail$14 = root$15.__tail, next$14 = node.__next, prev$14 = node.__prev;
                        if (node !== head$14) {
                            next$14 && (next$14 != null && typeof next$14 === 'object') && (next$14.__prev = prev$14);
                            prev$14 && (prev$14 != null && typeof prev$14 === 'object') && (prev$14.__next = next$14);
                            (next$14 = head$14) && (head$14 != null && typeof head$14 === 'object') && (head$14.__prev = node);
                            root$15.__head = root$15.__next = head$14 = node;
                            head$14.__next = next$14;
                            head$14.__prev = void 0;
                        }
                        if (tail$14 == null || node === tail$14) {
                            root$15.__tail = root$15.__prev = tail$14 = prev$14 || node;
                        }
                        root$15 = head$14 = tail$14 = next$14 = prev$14 = void 0;
                    }
                    var nodeType$2 = node && node[$TYPE] || void 0;
                    nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                    var pbv = Object.create(null);
                    var src = requestedPath, i$32 = -1, n$26 = src.length, req = new Array(n$26);
                    while (++i$32 < n$26) {
                        req[i$32] = src[i$32];
                    }
                    if (appendNullKey === true) {
                        req[req.length] = null;
                    }
                    pbv.path = req;
                    if (boxed === true) {
                        pbv.value = node;
                    } else {
                        var dest = nodeValue, src$2 = dest, x;
                        if (dest != null && typeof dest === 'object') {
                            dest = Array.isArray(src$2) && [] || Object.create(null);
                            for (x in src$2) {
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src$2[x]);
                            }
                        }
                        pbv.value = dest;
                    }
                    errors[errors.length] = pbv;
                }
                if (jsonParent != null) {
                    hasValue = true;
                    var jsonKey, jsonDepth = depth;
                    do {
                        jsonKey = jsonKeys[jsonDepth];
                        jsonParent = jsons[--jsonDepth];
                    } while (jsonKey == null);
                    if (boxed === true) {
                        jsonParent[jsonKey] = node;
                    } else {
                        var dest$2 = nodeValue, src$3 = dest$2, x$2;
                        if (dest$2 != null && typeof dest$2 === 'object') {
                            dest$2 = Array.isArray(src$3) && [] || Object.create(null);
                            for (x$2 in src$3) {
                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT) || x$2[0] === '$') && (dest$2[x$2] = src$3[x$2]);
                            }
                        }
                        jsonParent[jsonKey] = dest$2;
                    }
                }
                var src$4 = optimizedPath, i$33 = -1, n$27 = src$4.length, opt = new Array(n$27);
                while (++i$33 < n$27) {
                    opt[i$33] = src$4[i$33];
                }
                var src$5 = requestedPath, i$34 = -1, n$28 = src$5.length, req$2 = new Array(n$28);
                while (++i$34 < n$28) {
                    req$2[i$34] = src$5[i$34];
                }
                if (appendNullKey === true) {
                    req$2[req$2.length] = null;
                }
                requestedPaths[requestedPaths.length] = req$2;
                optimizedPaths[optimizedPaths.length] = opt;
            }
            if (boxed === false && node == null || refreshing === true) {
                var src$6 = boundPath, i$35 = -1, n$29 = src$6.length, req$3 = new Array(n$29);
                while (++i$35 < n$29) {
                    req$3[i$35] = src$6[i$35];
                }
                var src$7 = optimizedPath, i$36 = -1, n$30 = src$7.length, opt$2 = new Array(n$30);
                while (++i$36 < n$30) {
                    opt$2[i$36] = src$7[i$36];
                }
                var reqLen = req$3.length - 1, optLen = opt$2.length - 1, i$37 = -1, n$31 = requestedPath.length, map, offset$7, keys$7, index$8, reqKeys, optKeys, optKeysLen, x$3, y, z;
                while (++i$37 < n$31) {
                    req$3[++reqLen] = (reqKeys = pathMapStack[offset$7 = (i$37 + boundLength) * 4 + 1]) && reqKeys.length > 1 && [requestedPath[i$37]] || requestedPath[i$37];
                }
                var j$2 = pathMap, k$6 = reqLen, l = optLen;
                i$37 = j$2++;
                while (j$2 > i$37) {
                    if ((map = pathMapStack[offset$7 = (j$2 + boundLength) * 4]) != null && typeof map === 'object' && map[$TYPE] === void 0 && Array.isArray(map) === false && (keys$7 = pathMapStack[offset$7 + 1] || (pathMapStack[offset$7 + 1] = Object.keys(map))) && ((index$8 = pathMapStack[offset$7 + 2] || (pathMapStack[offset$7 + 2] = 0)) || true) && keys$7.length > 0) {
                        if ((pathMapStack[offset$7 + 2] = ++index$8) - 1 < keys$7.length) {
                            if (reqLen - k$6 < j$2 - i$37) {
                                var src$8 = keys$7, i$38 = -1, n$32 = src$8.length, dest$3 = new Array(n$32);
                                while (++i$38 < n$32) {
                                    dest$3[i$38] = src$8[i$38];
                                }
                                reqKeys = dest$3;
                                x$3 = -1;
                                y = reqKeys.length;
                                while (++x$3 < y) {
                                    reqKeys[x$3] = (z = reqKeys[x$3]) == __NULL ? null : z;
                                }
                                req$3[++reqLen] = y === 1 ? reqKeys[0] : reqKeys;
                            }
                            if (optLen - l < j$2 - i$37) {
                                var src$9 = keys$7, i$39 = -1, n$33 = src$9.length, dest$4 = new Array(n$33);
                                while (++i$39 < n$33) {
                                    dest$4[i$39] = src$9[i$39];
                                }
                                reqKeys = dest$4;
                                optKeys = [];
                                optKeysLen = 0;
                                x$3 = -1;
                                y = reqKeys.length;
                                while (++x$3 < y) {
                                    (z = reqKeys[x$3]) !== __NULL && (optKeys[optKeysLen++] = z);
                                }
                                if (optKeysLen > 0) {
                                    opt$2[++optLen] = optKeysLen === 1 ? optKeys[0] : optKeys;
                                }
                            }
                            pathMapStack[offset$7 = 4 * (++j$2 + boundLength)] = map[keys$7[index$8 - 1]];
                            continue;
                        }
                    }
                    delete pathMapStack[offset$7 = 4 * (j$2-- + boundLength)];
                    delete pathMapStack[offset$7 + 1];
                    delete pathMapStack[offset$7 + 2];
                    delete pathMapStack[offset$7 + 3];
                }
                req$3.pathSetIndex = pathMap;
                requestedMissingPaths[requestedMissingPaths.length] = req$3;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
            }
            appendNullKey = false;
            jsonRoot != null && (values[index] = hasValue && { json: jsons[-1] } || void 0);
            var offset$8, keys$8, index$9;
            while (depth > -1 && (keys$8 = pathMapStack[(offset$8 = 4 * depth) + 1]) && ((index$9 = pathMapStack[offset$8 + 2]) || true) && (pathMapStack[offset$8 + 2] = ++index$9) >= keys$8.length) {
                delete pathMapStack[offset$8 + 0];
                delete pathMapStack[offset$8 + 1];
                delete pathMapStack[offset$8 + 2];
                delete pathMapStack[offset$8 + 3];
                --depth;
            }
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathMapsAsJSONG(model, pathMaps, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var nodeRoot = model._cache || (model._cache = {}), nodeParent = nodeRoot, node = nodeParent, boundLength = 0;
    boundPath = model._path || [];
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$7, y$2) {
        return y$2;
    });
    var pathMapStack = pathMaps.pathMapStack || (pathMaps.pathMapStack = []);
    var nodes = pathMaps.nodes || (pathMaps.nodes = []);
    var jsons = pathMaps.jsons || (pathMaps.jsons = []);
    var errors = pathMaps.errors || (pathMaps.errors = []);
    var refs = pathMaps.refs || (pathMaps.refs = []);
    var depth = pathMaps.depth || (pathMaps.depth = 0);
    var refIndex = pathMaps.refIndex || (pathMaps.refIndex = 0);
    var refDepth = pathMaps.refDepth || (pathMaps.refDepth = 0);
    var requestedPath = pathMaps.requestedPath || (pathMaps.requestedPath = []);
    var optimizedPath = pathMaps.optimizedPath || (pathMaps.optimizedPath = []);
    var requestedPaths = pathMaps.requestedPaths || (pathMaps.requestedPaths = []);
    var optimizedPaths = pathMaps.optimizedPaths || (pathMaps.optimizedPaths = []);
    var requestedMissingPaths = pathMaps.requestedMissingPaths || (pathMaps.requestedMissingPaths = []);
    var optimizedMissingPaths = pathMaps.optimizedMissingPaths || (pathMaps.optimizedMissingPaths = []);
    var hasValue = pathMaps.hasValue || (pathMaps.hasValue = false);
    var jsonRoot = pathMaps.jsonRoot || (pathMaps.jsonRoot = values && values[0]);
    var jsonParent = pathMaps.jsonParent || (pathMaps.jsonParent = jsonRoot);
    var jsonNode = pathMaps.jsonNode || (pathMaps.jsonNode = jsonParent);
    var pathMap, length = 0, height = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-1] = jsonParent;
    jsons[-2] = jsons;
    var index = -1, count = pathMaps.length;
    while (++index < count) {
        pathMap = pathMaps[index];
        pathMapStack[0] = pathMap;
        depth = 0;
        length = pathMap.length;
        height = length - 1;
        var ref;
        refs.length = 0;
        while (depth > -1) {
            refIndex = depth;
            while (--refIndex >= -1) {
                if (!!(ref = refs[refIndex])) {
                    refLength = ref.length;
                    var i = -1, j = 0;
                    while (++i < refLength) {
                        optimizedPath[j++] = ref[i];
                    }
                    i = ++refIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    optimizedPath.length = j;
                    break;
                }
            }
            var offset, keys, index$2, key, isKeySet;
            pathMap = pathMap;
            height = (length = depth) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                node = nodeParent[key];
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                nodeTimestamp = node && node[$TIMESTAMP];
                nodeExpires = node && node[$EXPIRES];
                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                nodeType = pathMap && pathMap[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? pathMap[VALUE] : pathMap;
                nodeTimestamp = pathMap && pathMap[$TIMESTAMP];
                nodeExpires = pathMap && pathMap[$EXPIRES];
                var newNode, size_offset, leafSize = node && node[$SIZE] || 0;
                newNode = pathMap;
                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                    nodeType = 'array';
                    newNode[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                    delete nodeValue[$SIZE];
                    nodeValue[__CONTAINER] = newNode;
                } else if (nodeType === SENTINEL) {
                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                } else if (nodeType === ERROR) {
                    newNode[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                } else if (!(pathMap != null && typeof pathMap === 'object')) {
                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                    nodeType = 'sentinel';
                    newNode = { 'value': nodeValue };
                    newNode[$TYPE] = nodeType;
                    newNode[$SIZE] = nodeSize;
                } else {
                    nodeType = newNode[$TYPE] = nodeType || 'leaf';
                    newNode[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                }
                ;
                if (node != null && node !== newNode) {
                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = newNode[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                    while (++i$2 < nodeRefsLength) {
                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                            ref$2[__CONTEXT] = newNode;
                            newNode[__REF + (destRefsLength + i$2)] = ref$2;
                            node[__REF + i$2] = void 0;
                        }
                    }
                    newNode[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                    node[__REFS_LENGTH] = ref$2 = void 0;
                    var invParent = nodeParent, invChild = node, invKey = key, keys$2, index$3, offset$2, childType, childValue, isBranch, stack = [
                            nodeParent,
                            invKey,
                            node
                        ], depth$2 = 0;
                    while (depth$2 > -1) {
                        nodeParent = stack[offset$2 = depth$2 * 8];
                        invKey = stack[offset$2 + 1];
                        node = stack[offset$2 + 2];
                        if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                            childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                        }
                        childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                        if ((isBranch = stack[offset$2 + 5]) === void 0) {
                            isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                        }
                        if (isBranch === true) {
                            if ((keys$2 = stack[offset$2 + 6]) === void 0) {
                                keys$2 = stack[offset$2 + 6] = [];
                                index$3 = -1;
                                for (invKey in node) {
                                    !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys$2[++index$3] = invKey);
                                }
                            }
                            index$3 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                            if (index$3 < keys$2.length) {
                                stack[offset$2 + 7] = index$3 + 1;
                                stack[offset$2 = ++depth$2 * 8] = node;
                                stack[offset$2 + 1] = invKey = keys$2[index$3];
                                stack[offset$2 + 2] = node[invKey];
                                continue;
                            }
                        }
                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                        if (ref$3 && Array.isArray(ref$3)) {
                            destination = ref$3[__CONTEXT];
                            if (destination) {
                                var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                while (++i$3 <= n) {
                                    destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                }
                                destination[__REFS_LENGTH] = n;
                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                            }
                        }
                        var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                        while (++i$4 < n$2) {
                            if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                            (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                            (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            node === head && (root$2.__head = root$2.__next = head = next);
                            node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                            node.__next = node.__prev = void 0;
                            head = tail = next = prev = void 0;
                        }
                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                        delete stack[offset$2 + 0];
                        delete stack[offset$2 + 1];
                        delete stack[offset$2 + 2];
                        delete stack[offset$2 + 3];
                        delete stack[offset$2 + 4];
                        delete stack[offset$2 + 5];
                        delete stack[offset$2 + 6];
                        delete stack[offset$2 + 7];
                        --depth$2;
                    }
                    nodeParent = invParent;
                    node = invChild;
                }
                nodeParent[key] = node = newNode;
                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                size_offset = leafSize - nodeSize;
                var node$2 = nodeParent, child = node, stack$2 = [];
                while (node = nodeParent) {
                    nodeParent = node[__PARENT];
                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                        var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                        if (ref$5 && Array.isArray(ref$5)) {
                            destination$2 = ref$5[__CONTEXT];
                            if (destination$2) {
                                var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                while (++i$5 <= n$3) {
                                    destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                }
                                destination$2[__REFS_LENGTH] = n$3;
                                ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                            }
                        }
                        var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                        while (++i$6 < n$4) {
                            if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                            (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                            (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                            node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                            node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                            node.__next = node.__prev = void 0;
                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                        }
                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                        var depth$3 = 0, references, ref$7, i$7, k, n$5;
                        while (depth$3 > -1) {
                            if ((references = stack$2[depth$3]) === void 0) {
                                i$7 = k = -1;
                                n$5 = node[__REFS_LENGTH] || 0;
                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                node[__GENERATION] = __GENERATION_GUID++;
                                if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    stack$2[depth$3] = references = new Array(n$5 + 1);
                                    references[++k] = ref$7;
                                } else if (n$5 > 0) {
                                    stack$2[depth$3] = references = new Array(n$5);
                                }
                                while (++i$7 < n$5) {
                                    if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        references[++k] = ref$7;
                                    }
                                }
                            }
                            if ((node = references && references.pop()) !== void 0) {
                                ++depth$3;
                            } else {
                                stack$2[depth$3--] = void 0;
                            }
                        }
                    }
                }
                nodeParent = node$2;
                node = child;
                if (node != null && typeof node === 'object') {
                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    } else {
                        if (nodeExpires !== 1) {
                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                            if (node !== head$3) {
                                next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                root$4.__head = root$4.__next = head$3 = node;
                                head$3.__next = next$3;
                                head$3.__prev = void 0;
                            }
                            if (tail$3 == null || node === tail$3) {
                                root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                            }
                            root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                        }
                    }
                }
                if (node != null && jsonParent != null) {
                    if (boxed === true) {
                        jsonParent[key] = node;
                    } else {
                        var val = nodeValue;
                        if (val != null && typeof val === 'object') {
                            var src = val, keys$3 = Object.keys(src), x, i$8 = -1, n$6 = keys$3.length;
                            val = Array.isArray(src) && new Array(src.length) || Object.create(null);
                            while (++i$8 < n$6) {
                                x = keys$3[i$8];
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (val[x] = src[x]);
                            }
                        }
                        if (!nodeType && (val != null && typeof val === 'object') && !Array.isArray(val)) {
                            val[$TYPE] = LEAF;
                        }
                        jsonParent[key] = val;
                    }
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                jsonParent = jsonNode = jsons[depth - 1];
                depth = depth;
                follow_path_map_10148:
                    do {
                        if ((pathMap = pathMapStack[offset = depth * 4]) != null && typeof pathMap === 'object' && (keys = pathMapStack[offset + 1] || (pathMapStack[offset + 1] = Object.keys(pathMap))) && ((index$2 = pathMapStack[offset + 2] || (pathMapStack[offset + 2] = 0)) || true) && ((key = pathMapStack[offset + 3]) || true) && ((isKeySet = keys.length > 1) || keys.length > 0)) {
                            key = keys[index$2];
                            if (key == __NULL) {
                                pathMapStack[offset = 3 * (depth + 1)] = pathMap[__NULL];
                                pathMapStack[offset + 1] = keys;
                                pathMapStack[offset + 2] = 0;
                                nodeParent = nodes[depth] = node;
                                jsonParent = jsons[depth] = jsonNode;
                                depth = depth + 1;
                                continue follow_path_map_10148;
                            } else if (key === $SIZE || (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT))) {
                                nodeParent = node;
                                break follow_path_map_10148;
                            } else if (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') {
                                nodeParent[key] || (nodeParent[key] = pathMap[key]);
                                nodeParent = node;
                                break follow_path_map_10148;
                            } else {
                                depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                                pathMapStack[offset = 4 * (depth + 1)] = pathMap = pathMap[key];
                                if (pathMap != null && typeof pathMap === 'object' && pathMap[$TYPE] === void 0 && Array.isArray(pathMap) === false && (keys = Object.keys(pathMap)) && keys.length > 0) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                        nodeType = void 0;
                                        nodeValue = Object.create(null);
                                        nodeSize = node && node[$SIZE] || 0;
                                        if (node != null && node !== nodeValue) {
                                            var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = nodeValue[__REFS_LENGTH] || 0, i$9 = -1, ref$8;
                                            while (++i$9 < nodeRefsLength$2) {
                                                if ((ref$8 = node[__REF + i$9]) !== void 0) {
                                                    ref$8[__CONTEXT] = nodeValue;
                                                    nodeValue[__REF + (destRefsLength$2 + i$9)] = ref$8;
                                                    node[__REF + i$9] = void 0;
                                                }
                                            }
                                            nodeValue[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                            node[__REFS_LENGTH] = ref$8 = void 0;
                                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$4, index$4, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                    nodeParent,
                                                    invKey$2,
                                                    node
                                                ], depth$4 = 0;
                                            while (depth$4 > -1) {
                                                nodeParent = stack$3[offset$3 = depth$4 * 8];
                                                invKey$2 = stack$3[offset$3 + 1];
                                                node = stack$3[offset$3 + 2];
                                                if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                                    childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                                    isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                }
                                                if (isBranch$2 === true) {
                                                    if ((keys$4 = stack$3[offset$3 + 6]) === void 0) {
                                                        keys$4 = stack$3[offset$3 + 6] = [];
                                                        index$4 = -1;
                                                        for (invKey$2 in node) {
                                                            !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$4[++index$4] = invKey$2);
                                                        }
                                                    }
                                                    index$4 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                                    if (index$4 < keys$4.length) {
                                                        stack$3[offset$3 + 7] = index$4 + 1;
                                                        stack$3[offset$3 = ++depth$4 * 8] = node;
                                                        stack$3[offset$3 + 1] = invKey$2 = keys$4[index$4];
                                                        stack$3[offset$3 + 2] = node[invKey$2];
                                                        continue;
                                                    }
                                                }
                                                var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                if (ref$9 && Array.isArray(ref$9)) {
                                                    destination$3 = ref$9[__CONTEXT];
                                                    if (destination$3) {
                                                        var i$10 = (ref$9[__REF_INDEX] || 0) - 1, n$7 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$10 <= n$7) {
                                                            destination$3[__REF + i$10] = destination$3[__REF + (i$10 + 1)];
                                                        }
                                                        destination$3[__REFS_LENGTH] = n$7;
                                                        ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                    }
                                                }
                                                var ref$10, i$11 = -1, n$8 = node[__REFS_LENGTH] || 0;
                                                while (++i$11 < n$8) {
                                                    if ((ref$10 = node[__REF + i$11]) !== void 0) {
                                                        ref$10[__CONTEXT] = node[__REF + i$11] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                    (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                    (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                    node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                    node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                    node.__next = node.__prev = void 0;
                                                    head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                }
                                                nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                delete stack$3[offset$3 + 0];
                                                delete stack$3[offset$3 + 1];
                                                delete stack$3[offset$3 + 2];
                                                delete stack$3[offset$3 + 3];
                                                delete stack$3[offset$3 + 4];
                                                delete stack$3[offset$3 + 5];
                                                delete stack$3[offset$3 + 6];
                                                delete stack$3[offset$3 + 7];
                                                --depth$4;
                                            }
                                            nodeParent = invParent$2;
                                            node = invChild$2;
                                        }
                                        nodeParent[key] = node = nodeValue;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                if (ref$11 && Array.isArray(ref$11)) {
                                                    destination$4 = ref$11[__CONTEXT];
                                                    if (destination$4) {
                                                        var i$12 = (ref$11[__REF_INDEX] || 0) - 1, n$9 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$12 <= n$9) {
                                                            destination$4[__REF + i$12] = destination$4[__REF + (i$12 + 1)];
                                                        }
                                                        destination$4[__REFS_LENGTH] = n$9;
                                                        ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                    }
                                                }
                                                var ref$12, i$13 = -1, n$10 = node[__REFS_LENGTH] || 0;
                                                while (++i$13 < n$10) {
                                                    if ((ref$12 = node[__REF + i$13]) !== void 0) {
                                                        ref$12[__CONTEXT] = node[__REF + i$13] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5, prev$5;
                                                    (next$5 = node.__next) && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                    (prev$5 = node.__prev) && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                    node === head$5 && (root$6.__head = root$6.__next = head$5 = next$5);
                                                    node === tail$5 && (root$6.__tail = root$6.__prev = tail$5 = prev$5);
                                                    node.__next = node.__prev = void 0;
                                                    head$5 = tail$5 = next$5 = prev$5 = void 0;
                                                }
                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var depth$5 = 0, references$2, ref$13, i$14, k$2, n$11;
                                                while (depth$5 > -1) {
                                                    if ((references$2 = stack$4[depth$5]) === void 0) {
                                                        i$14 = k$2 = -1;
                                                        n$11 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                        if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$4[depth$5] = references$2 = new Array(n$11 + 1);
                                                            references$2[++k$2] = ref$13;
                                                        } else if (n$11 > 0) {
                                                            stack$4[depth$5] = references$2 = new Array(n$11);
                                                        }
                                                        while (++i$14 < n$11) {
                                                            if ((ref$13 = node[__REF + i$14]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                references$2[++k$2] = ref$13;
                                                            }
                                                        }
                                                    }
                                                    if ((node = references$2 && references$2.pop()) !== void 0) {
                                                        ++depth$5;
                                                    } else {
                                                        stack$4[depth$5--] = void 0;
                                                    }
                                                }
                                            }
                                        }
                                        nodeParent = node$3;
                                        node = child$2;
                                    }
                                    if (node != null && jsonParent != null) {
                                        if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                            if (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                jsonNode = jsonParent[key] = Object.create(null);
                                            }
                                        } else {
                                            if (boxed === true) {
                                                jsonParent[key] = node;
                                            } else {
                                                var val$2 = nodeValue;
                                                if (val$2 != null && typeof val$2 === 'object') {
                                                    var src$2 = val$2, keys$5 = Object.keys(src$2), x$2, i$15 = -1, n$12 = keys$5.length;
                                                    val$2 = Array.isArray(src$2) && new Array(src$2.length) || Object.create(null);
                                                    while (++i$15 < n$12) {
                                                        x$2 = keys$5[i$15];
                                                        !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (val$2[x$2] = src$2[x$2]);
                                                    }
                                                }
                                                if (!nodeType && (val$2 != null && typeof val$2 === 'object') && !Array.isArray(val$2)) {
                                                    val$2[$TYPE] = LEAF;
                                                }
                                                jsonParent[key] = val$2;
                                            }
                                        }
                                    }
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        do {
                                            if (nodeExpires !== 1) {
                                                var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                                if (node !== head$6) {
                                                    next$6 && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                    prev$6 && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                    (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                                    root$7.__head = root$7.__next = head$6 = node;
                                                    head$6.__next = next$6;
                                                    head$6.__prev = void 0;
                                                }
                                                if (tail$6 == null || node === tail$6) {
                                                    root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                                }
                                                root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                            }
                                            refs[depth] = nodeValue;
                                            refIndex = depth + 1;
                                            refDepth = 0;
                                            var key$2, isKeySet$2;
                                            reference = nodeValue;
                                            refHeight = (refLength = reference.length) - 1;
                                            nodeParent = nodeRoot;
                                            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                node = node = nodeParent;
                                            } else {
                                                nodeParent = nodeRoot;
                                                jsonParent = jsonRoot;
                                                refDepth = refDepth;
                                                follow_path_10576:
                                                    do {
                                                        key$2 = reference[refDepth];
                                                        isKeySet$2 = false;
                                                        if (key$2 != null) {
                                                            if (refDepth < refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                    nodeType = void 0;
                                                                    nodeValue = Object.create(null);
                                                                    nodeSize = node && node[$SIZE] || 0;
                                                                    if (node != null && node !== nodeValue) {
                                                                        var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$16 = -1, ref$14;
                                                                        while (++i$16 < nodeRefsLength$3) {
                                                                            if ((ref$14 = node[__REF + i$16]) !== void 0) {
                                                                                ref$14[__CONTEXT] = nodeValue;
                                                                                nodeValue[__REF + (destRefsLength$3 + i$16)] = ref$14;
                                                                                node[__REF + i$16] = void 0;
                                                                            }
                                                                        }
                                                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                        node[__REFS_LENGTH] = ref$14 = void 0;
                                                                        var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$6, index$5, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                nodeParent,
                                                                                invKey$3,
                                                                                node
                                                                            ], depth$6 = 0;
                                                                        while (depth$6 > -1) {
                                                                            nodeParent = stack$5[offset$4 = depth$6 * 8];
                                                                            invKey$3 = stack$5[offset$4 + 1];
                                                                            node = stack$5[offset$4 + 2];
                                                                            if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                            }
                                                                            childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                            if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                                                                isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                            }
                                                                            if (isBranch$3 === true) {
                                                                                if ((keys$6 = stack$5[offset$4 + 6]) === void 0) {
                                                                                    keys$6 = stack$5[offset$4 + 6] = [];
                                                                                    index$5 = -1;
                                                                                    for (invKey$3 in node) {
                                                                                        !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$6[++index$5] = invKey$3);
                                                                                    }
                                                                                }
                                                                                index$5 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                                                                if (index$5 < keys$6.length) {
                                                                                    stack$5[offset$4 + 7] = index$5 + 1;
                                                                                    stack$5[offset$4 = ++depth$6 * 8] = node;
                                                                                    stack$5[offset$4 + 1] = invKey$3 = keys$6[index$5];
                                                                                    stack$5[offset$4 + 2] = node[invKey$3];
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                            if (ref$15 && Array.isArray(ref$15)) {
                                                                                destination$5 = ref$15[__CONTEXT];
                                                                                if (destination$5) {
                                                                                    var i$17 = (ref$15[__REF_INDEX] || 0) - 1, n$13 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$17 <= n$13) {
                                                                                        destination$5[__REF + i$17] = destination$5[__REF + (i$17 + 1)];
                                                                                    }
                                                                                    destination$5[__REFS_LENGTH] = n$13;
                                                                                    ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$16, i$18 = -1, n$14 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$18 < n$14) {
                                                                                if ((ref$16 = node[__REF + i$18]) !== void 0) {
                                                                                    ref$16[__CONTEXT] = node[__REF + i$18] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                            }
                                                                            nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            delete stack$5[offset$4 + 0];
                                                                            delete stack$5[offset$4 + 1];
                                                                            delete stack$5[offset$4 + 2];
                                                                            delete stack$5[offset$4 + 3];
                                                                            delete stack$5[offset$4 + 4];
                                                                            delete stack$5[offset$4 + 5];
                                                                            delete stack$5[offset$4 + 6];
                                                                            delete stack$5[offset$4 + 7];
                                                                            --depth$6;
                                                                        }
                                                                        nodeParent = invParent$3;
                                                                        node = invChild$3;
                                                                    }
                                                                    nodeParent[key$2] = node = nodeValue;
                                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                    var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                    while (node = nodeParent) {
                                                                        nodeParent = node[__PARENT];
                                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                            var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                            if (ref$17 && Array.isArray(ref$17)) {
                                                                                destination$6 = ref$17[__CONTEXT];
                                                                                if (destination$6) {
                                                                                    var i$19 = (ref$17[__REF_INDEX] || 0) - 1, n$15 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$19 <= n$15) {
                                                                                        destination$6[__REF + i$19] = destination$6[__REF + (i$19 + 1)];
                                                                                    }
                                                                                    destination$6[__REFS_LENGTH] = n$15;
                                                                                    ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$18, i$20 = -1, n$16 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$20 < n$16) {
                                                                                if ((ref$18 = node[__REF + i$20]) !== void 0) {
                                                                                    ref$18[__CONTEXT] = node[__REF + i$20] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                            }
                                                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            var depth$7 = 0, references$3, ref$19, i$21, k$3, n$17;
                                                                            while (depth$7 > -1) {
                                                                                if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                    i$21 = k$3 = -1;
                                                                                    n$17 = node[__REFS_LENGTH] || 0;
                                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                                                    if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                        stack$6[depth$7] = references$3 = new Array(n$17 + 1);
                                                                                        references$3[++k$3] = ref$19;
                                                                                    } else if (n$17 > 0) {
                                                                                        stack$6[depth$7] = references$3 = new Array(n$17);
                                                                                    }
                                                                                    while (++i$21 < n$17) {
                                                                                        if ((ref$19 = node[__REF + i$21]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            references$3[++k$3] = ref$19;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                    ++depth$7;
                                                                                } else {
                                                                                    stack$6[depth$7--] = void 0;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    nodeParent = node$4;
                                                                    node = child$3;
                                                                }
                                                                if (node != null && jsonParent != null) {
                                                                    if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                                        if (!(jsonNode = jsonParent[key$2]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                                            jsonNode = jsonParent[key$2] = Object.create(null);
                                                                        }
                                                                    } else {
                                                                        if (boxed === true) {
                                                                            jsonParent[key$2] = node;
                                                                        } else {
                                                                            var val$3 = nodeValue;
                                                                            if (val$3 != null && typeof val$3 === 'object') {
                                                                                var src$3 = val$3, keys$7 = Object.keys(src$3), x$3, i$22 = -1, n$18 = keys$7.length;
                                                                                val$3 = Array.isArray(src$3) && new Array(src$3.length) || Object.create(null);
                                                                                while (++i$22 < n$18) {
                                                                                    x$3 = keys$7[i$22];
                                                                                    !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (val$3[x$3] = src$3[x$3]);
                                                                                }
                                                                            }
                                                                            if (!nodeType && (val$3 != null && typeof val$3 === 'object') && !Array.isArray(val$3)) {
                                                                                val$3[$TYPE] = LEAF;
                                                                            }
                                                                            jsonParent[key$2] = val$3;
                                                                        }
                                                                    }
                                                                }
                                                                if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                    nodeParent = node;
                                                                    break follow_path_10576;
                                                                }
                                                                nodeParent = node;
                                                                jsonParent = jsonNode;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_10576;
                                                            } else if (refDepth === refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                    nodeType = void 0;
                                                                    nodeValue = Object.create(null);
                                                                    nodeSize = node && node[$SIZE] || 0;
                                                                    if (node != null && node !== nodeValue) {
                                                                        var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = nodeValue[__REFS_LENGTH] || 0, i$23 = -1, ref$20;
                                                                        while (++i$23 < nodeRefsLength$4) {
                                                                            if ((ref$20 = node[__REF + i$23]) !== void 0) {
                                                                                ref$20[__CONTEXT] = nodeValue;
                                                                                nodeValue[__REF + (destRefsLength$4 + i$23)] = ref$20;
                                                                                node[__REF + i$23] = void 0;
                                                                            }
                                                                        }
                                                                        nodeValue[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                        node[__REFS_LENGTH] = ref$20 = void 0;
                                                                        var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$8, index$6, offset$5, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                nodeParent,
                                                                                invKey$4,
                                                                                node
                                                                            ], depth$8 = 0;
                                                                        while (depth$8 > -1) {
                                                                            nodeParent = stack$7[offset$5 = depth$8 * 8];
                                                                            invKey$4 = stack$7[offset$5 + 1];
                                                                            node = stack$7[offset$5 + 2];
                                                                            if ((childType$4 = stack$7[offset$5 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                childType$4 = stack$7[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                                                            }
                                                                            childValue$4 = stack$7[offset$5 + 4] || (stack$7[offset$5 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                            if ((isBranch$4 = stack$7[offset$5 + 5]) === void 0) {
                                                                                isBranch$4 = stack$7[offset$5 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                            }
                                                                            if (isBranch$4 === true) {
                                                                                if ((keys$8 = stack$7[offset$5 + 6]) === void 0) {
                                                                                    keys$8 = stack$7[offset$5 + 6] = [];
                                                                                    index$6 = -1;
                                                                                    for (invKey$4 in node) {
                                                                                        !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$8[++index$6] = invKey$4);
                                                                                    }
                                                                                }
                                                                                index$6 = stack$7[offset$5 + 7] || (stack$7[offset$5 + 7] = 0);
                                                                                if (index$6 < keys$8.length) {
                                                                                    stack$7[offset$5 + 7] = index$6 + 1;
                                                                                    stack$7[offset$5 = ++depth$8 * 8] = node;
                                                                                    stack$7[offset$5 + 1] = invKey$4 = keys$8[index$6];
                                                                                    stack$7[offset$5 + 2] = node[invKey$4];
                                                                                    continue;
                                                                                }
                                                                            }
                                                                            var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                            if (ref$21 && Array.isArray(ref$21)) {
                                                                                destination$7 = ref$21[__CONTEXT];
                                                                                if (destination$7) {
                                                                                    var i$24 = (ref$21[__REF_INDEX] || 0) - 1, n$19 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$24 <= n$19) {
                                                                                        destination$7[__REF + i$24] = destination$7[__REF + (i$24 + 1)];
                                                                                    }
                                                                                    destination$7[__REFS_LENGTH] = n$19;
                                                                                    ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$22, i$25 = -1, n$20 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$25 < n$20) {
                                                                                if ((ref$22 = node[__REF + i$25]) !== void 0) {
                                                                                    ref$22[__CONTEXT] = node[__REF + i$25] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                            }
                                                                            nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            delete stack$7[offset$5 + 0];
                                                                            delete stack$7[offset$5 + 1];
                                                                            delete stack$7[offset$5 + 2];
                                                                            delete stack$7[offset$5 + 3];
                                                                            delete stack$7[offset$5 + 4];
                                                                            delete stack$7[offset$5 + 5];
                                                                            delete stack$7[offset$5 + 6];
                                                                            delete stack$7[offset$5 + 7];
                                                                            --depth$8;
                                                                        }
                                                                        nodeParent = invParent$4;
                                                                        node = invChild$4;
                                                                    }
                                                                    nodeParent[key$2] = node = nodeValue;
                                                                    node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                    var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                    while (node = nodeParent) {
                                                                        nodeParent = node[__PARENT];
                                                                        if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                            var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                            if (ref$23 && Array.isArray(ref$23)) {
                                                                                destination$8 = ref$23[__CONTEXT];
                                                                                if (destination$8) {
                                                                                    var i$26 = (ref$23[__REF_INDEX] || 0) - 1, n$21 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                    while (++i$26 <= n$21) {
                                                                                        destination$8[__REF + i$26] = destination$8[__REF + (i$26 + 1)];
                                                                                    }
                                                                                    destination$8[__REFS_LENGTH] = n$21;
                                                                                    ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                }
                                                                            }
                                                                            var ref$24, i$27 = -1, n$22 = node[__REFS_LENGTH] || 0;
                                                                            while (++i$27 < n$22) {
                                                                                if ((ref$24 = node[__REF + i$27]) !== void 0) {
                                                                                    ref$24[__CONTEXT] = node[__REF + i$27] = void 0;
                                                                                }
                                                                            }
                                                                            node[__REFS_LENGTH] = void 0;
                                                                            if (node != null && typeof node === 'object') {
                                                                                var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                                                (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                                                (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                                                node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                                                node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                                                node.__next = node.__prev = void 0;
                                                                                head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                                            }
                                                                            nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                        } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                            var depth$9 = 0, references$4, ref$25, i$28, k$4, n$23;
                                                                            while (depth$9 > -1) {
                                                                                if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                    i$28 = k$4 = -1;
                                                                                    n$23 = node[__REFS_LENGTH] || 0;
                                                                                    node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                    node[__GENERATION] = __GENERATION_GUID++;
                                                                                    if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                        stack$8[depth$9] = references$4 = new Array(n$23 + 1);
                                                                                        references$4[++k$4] = ref$25;
                                                                                    } else if (n$23 > 0) {
                                                                                        stack$8[depth$9] = references$4 = new Array(n$23);
                                                                                    }
                                                                                    while (++i$28 < n$23) {
                                                                                        if ((ref$25 = node[__REF + i$28]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            references$4[++k$4] = ref$25;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                    ++depth$9;
                                                                                } else {
                                                                                    stack$8[depth$9--] = void 0;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    nodeParent = node$5;
                                                                    node = child$4;
                                                                }
                                                                if (node != null && jsonParent != null) {
                                                                    if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                                        if (!(jsonNode = jsonParent[key$2]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                                            jsonNode = jsonParent[key$2] = Object.create(null);
                                                                        }
                                                                    } else {
                                                                        if (boxed === true) {
                                                                            jsonParent[key$2] = node;
                                                                        } else {
                                                                            var val$4 = nodeValue;
                                                                            if (val$4 != null && typeof val$4 === 'object') {
                                                                                var src$4 = val$4, keys$9 = Object.keys(src$4), x$4, i$29 = -1, n$24 = keys$9.length;
                                                                                val$4 = Array.isArray(src$4) && new Array(src$4.length) || Object.create(null);
                                                                                while (++i$29 < n$24) {
                                                                                    x$4 = keys$9[i$29];
                                                                                    !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (val$4[x$4] = src$4[x$4]);
                                                                                }
                                                                            }
                                                                            if (!nodeType && (val$4 != null && typeof val$4 === 'object') && !Array.isArray(val$4)) {
                                                                                val$4[$TYPE] = LEAF;
                                                                            }
                                                                            jsonParent[key$2] = val$4;
                                                                        }
                                                                    }
                                                                }
                                                                if (node != null) {
                                                                    var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                    // Set up the hard-link so we don't have to do all
                                                                    // this work the next time we follow this reference.
                                                                    if (refContext === void 0) {
                                                                        // create a back reference
                                                                        var backRefs = node[__REFS_LENGTH] || 0;
                                                                        node[__REF + backRefs] = refContainer;
                                                                        node[__REFS_LENGTH] = backRefs + 1;
                                                                        // create a hard reference
                                                                        refContainer[__REF_INDEX] = backRefs;
                                                                        refContainer[__CONTEXT] = node;
                                                                        refContainer = backRefs = void 0;
                                                                    }
                                                                    ;
                                                                }
                                                                appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                nodeParent = node;
                                                                break follow_path_10576;
                                                            }
                                                        } else if (refDepth < refHeight) {
                                                            nodeParent = node;
                                                            jsonParent = jsonNode;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_10576;
                                                        }
                                                        nodeParent = node;
                                                        break follow_path_10576;
                                                    } while (true);
                                                node = nodeParent;
                                            }
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeExpires = node && node[$EXPIRES];
                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                        } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                        if (node == null) {
                                            while (refDepth <= refHeight) {
                                                optimizedPath[refDepth] = reference[refDepth++];
                                            }
                                        }
                                    }
                                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                        nodeParent = node;
                                        break follow_path_map_10148;
                                    }
                                    pathMapStack[offset + 1] = keys;
                                    pathMapStack[offset + 3] = key;
                                    nodeParent = nodes[depth] = node;
                                    jsonParent = jsons[depth] = jsonNode;
                                    depth = depth + 1;
                                    continue follow_path_map_10148;
                                }
                            }
                        }
                        if (key != null) {
                            optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                            node = nodeParent[key];
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            nodeTimestamp = node && node[$TIMESTAMP];
                            nodeExpires = node && node[$EXPIRES];
                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            nodeType = pathMap && pathMap[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? pathMap[VALUE] : pathMap;
                            nodeTimestamp = pathMap && pathMap[$TIMESTAMP];
                            nodeExpires = pathMap && pathMap[$EXPIRES];
                            var newNode$2, size_offset$2, leafSize$2 = node && node[$SIZE] || 0;
                            newNode$2 = pathMap;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                nodeType = 'array';
                                newNode$2[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                                delete nodeValue[$SIZE];
                                nodeValue[__CONTAINER] = newNode$2;
                            } else if (nodeType === SENTINEL) {
                                newNode$2[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            } else if (nodeType === ERROR) {
                                newNode$2[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                            } else if (!(pathMap != null && typeof pathMap === 'object')) {
                                nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                nodeType = 'sentinel';
                                newNode$2 = { 'value': nodeValue };
                                newNode$2[$TYPE] = nodeType;
                                newNode$2[$SIZE] = nodeSize;
                            } else {
                                nodeType = newNode$2[$TYPE] = nodeType || 'leaf';
                                newNode$2[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                            }
                            ;
                            if (node != null && node !== newNode$2) {
                                var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = newNode$2[__REFS_LENGTH] || 0, i$30 = -1, ref$26;
                                while (++i$30 < nodeRefsLength$5) {
                                    if ((ref$26 = node[__REF + i$30]) !== void 0) {
                                        ref$26[__CONTEXT] = newNode$2;
                                        newNode$2[__REF + (destRefsLength$5 + i$30)] = ref$26;
                                        node[__REF + i$30] = void 0;
                                    }
                                }
                                newNode$2[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                node[__REFS_LENGTH] = ref$26 = void 0;
                                var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$10, index$7, offset$6, childType$5, childValue$5, isBranch$5, stack$9 = [
                                        nodeParent,
                                        invKey$5,
                                        node
                                    ], depth$10 = 0;
                                while (depth$10 > -1) {
                                    nodeParent = stack$9[offset$6 = depth$10 * 8];
                                    invKey$5 = stack$9[offset$6 + 1];
                                    node = stack$9[offset$6 + 2];
                                    if ((childType$5 = stack$9[offset$6 + 3]) === void 0 || (childType$5 = void 0)) {
                                        childType$5 = stack$9[offset$6 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$5 = stack$9[offset$6 + 4] || (stack$9[offset$6 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$5 = stack$9[offset$6 + 5]) === void 0) {
                                        isBranch$5 = stack$9[offset$6 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                    }
                                    if (isBranch$5 === true) {
                                        if ((keys$10 = stack$9[offset$6 + 6]) === void 0) {
                                            keys$10 = stack$9[offset$6 + 6] = [];
                                            index$7 = -1;
                                            for (invKey$5 in node) {
                                                !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$10[++index$7] = invKey$5);
                                            }
                                        }
                                        index$7 = stack$9[offset$6 + 7] || (stack$9[offset$6 + 7] = 0);
                                        if (index$7 < keys$10.length) {
                                            stack$9[offset$6 + 7] = index$7 + 1;
                                            stack$9[offset$6 = ++depth$10 * 8] = node;
                                            stack$9[offset$6 + 1] = invKey$5 = keys$10[index$7];
                                            stack$9[offset$6 + 2] = node[invKey$5];
                                            continue;
                                        }
                                    }
                                    var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                    if (ref$27 && Array.isArray(ref$27)) {
                                        destination$9 = ref$27[__CONTEXT];
                                        if (destination$9) {
                                            var i$31 = (ref$27[__REF_INDEX] || 0) - 1, n$25 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                            while (++i$31 <= n$25) {
                                                destination$9[__REF + i$31] = destination$9[__REF + (i$31 + 1)];
                                            }
                                            destination$9[__REFS_LENGTH] = n$25;
                                            ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                        }
                                    }
                                    var ref$28, i$32 = -1, n$26 = node[__REFS_LENGTH] || 0;
                                    while (++i$32 < n$26) {
                                        if ((ref$28 = node[__REF + i$32]) !== void 0) {
                                            ref$28[__CONTEXT] = node[__REF + i$32] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    if (node != null && typeof node === 'object') {
                                        var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                        (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                        (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                        node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                        node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                        node.__next = node.__prev = void 0;
                                        head$11 = tail$11 = next$11 = prev$11 = void 0;
                                    }
                                    nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    delete stack$9[offset$6 + 0];
                                    delete stack$9[offset$6 + 1];
                                    delete stack$9[offset$6 + 2];
                                    delete stack$9[offset$6 + 3];
                                    delete stack$9[offset$6 + 4];
                                    delete stack$9[offset$6 + 5];
                                    delete stack$9[offset$6 + 6];
                                    delete stack$9[offset$6 + 7];
                                    --depth$10;
                                }
                                nodeParent = invParent$5;
                                node = invChild$5;
                            }
                            nodeParent[key] = node = newNode$2;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            size_offset$2 = leafSize$2 - nodeSize;
                            var node$6 = nodeParent, child$5 = node, stack$10 = [];
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                    var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                    if (ref$29 && Array.isArray(ref$29)) {
                                        destination$10 = ref$29[__CONTEXT];
                                        if (destination$10) {
                                            var i$33 = (ref$29[__REF_INDEX] || 0) - 1, n$27 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                            while (++i$33 <= n$27) {
                                                destination$10[__REF + i$33] = destination$10[__REF + (i$33 + 1)];
                                            }
                                            destination$10[__REFS_LENGTH] = n$27;
                                            ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                        }
                                    }
                                    var ref$30, i$34 = -1, n$28 = node[__REFS_LENGTH] || 0;
                                    while (++i$34 < n$28) {
                                        if ((ref$30 = node[__REF + i$34]) !== void 0) {
                                            ref$30[__CONTEXT] = node[__REF + i$34] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    if (node != null && typeof node === 'object') {
                                        var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12, prev$12;
                                        (next$12 = node.__next) && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                        (prev$12 = node.__prev) && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                        node === head$12 && (root$13.__head = root$13.__next = head$12 = next$12);
                                        node === tail$12 && (root$13.__tail = root$13.__prev = tail$12 = prev$12);
                                        node.__next = node.__prev = void 0;
                                        head$12 = tail$12 = next$12 = prev$12 = void 0;
                                    }
                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var depth$11 = 0, references$5, ref$31, i$35, k$5, n$29;
                                    while (depth$11 > -1) {
                                        if ((references$5 = stack$10[depth$11]) === void 0) {
                                            i$35 = k$5 = -1;
                                            n$29 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = __GENERATION_GUID++;
                                            if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$10[depth$11] = references$5 = new Array(n$29 + 1);
                                                references$5[++k$5] = ref$31;
                                            } else if (n$29 > 0) {
                                                stack$10[depth$11] = references$5 = new Array(n$29);
                                            }
                                            while (++i$35 < n$29) {
                                                if ((ref$31 = node[__REF + i$35]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    references$5[++k$5] = ref$31;
                                                }
                                            }
                                        }
                                        if ((node = references$5 && references$5.pop()) !== void 0) {
                                            ++depth$11;
                                        } else {
                                            stack$10[depth$11--] = void 0;
                                        }
                                    }
                                }
                            }
                            nodeParent = node$6;
                            node = child$5;
                            if (node != null && typeof node === 'object') {
                                if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                } else {
                                    if (nodeExpires !== 1) {
                                        var root$14 = root, head$13 = root$14.__head, tail$13 = root$14.__tail, next$13 = node.__next, prev$13 = node.__prev;
                                        if (node !== head$13) {
                                            next$13 && (next$13 != null && typeof next$13 === 'object') && (next$13.__prev = prev$13);
                                            prev$13 && (prev$13 != null && typeof prev$13 === 'object') && (prev$13.__next = next$13);
                                            (next$13 = head$13) && (head$13 != null && typeof head$13 === 'object') && (head$13.__prev = node);
                                            root$14.__head = root$14.__next = head$13 = node;
                                            head$13.__next = next$13;
                                            head$13.__prev = void 0;
                                        }
                                        if (tail$13 == null || node === tail$13) {
                                            root$14.__tail = root$14.__prev = tail$13 = prev$13 || node;
                                        }
                                        root$14 = head$13 = tail$13 = next$13 = prev$13 = void 0;
                                    }
                                }
                            }
                            if (node != null && jsonParent != null) {
                                if (boxed === true) {
                                    jsonParent[key] = node;
                                } else {
                                    var val$5 = nodeValue;
                                    if (val$5 != null && typeof val$5 === 'object') {
                                        var src$5 = val$5, keys$11 = Object.keys(src$5), x$5, i$36 = -1, n$30 = keys$11.length;
                                        val$5 = Array.isArray(src$5) && new Array(src$5.length) || Object.create(null);
                                        while (++i$36 < n$30) {
                                            x$5 = keys$11[i$36];
                                            !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (val$5[x$5] = src$5[x$5]);
                                        }
                                    }
                                    if (!nodeType && (val$5 != null && typeof val$5 === 'object') && !Array.isArray(val$5)) {
                                        val$5[$TYPE] = LEAF;
                                    }
                                    jsonParent[key] = val$5;
                                }
                            }
                            appendNullKey = false;
                        }
                        nodeParent = node;
                        break follow_path_map_10148;
                    } while (true);
                node = nodeParent;
            }
            if (node != null || boxed === true) {
                if (nodeType === ERROR) {
                    if (nodeExpires !== 1) {
                        var root$15 = root, head$14 = root$15.__head, tail$14 = root$15.__tail, next$14 = node.__next, prev$14 = node.__prev;
                        if (node !== head$14) {
                            next$14 && (next$14 != null && typeof next$14 === 'object') && (next$14.__prev = prev$14);
                            prev$14 && (prev$14 != null && typeof prev$14 === 'object') && (prev$14.__next = next$14);
                            (next$14 = head$14) && (head$14 != null && typeof head$14 === 'object') && (head$14.__prev = node);
                            root$15.__head = root$15.__next = head$14 = node;
                            head$14.__next = next$14;
                            head$14.__prev = void 0;
                        }
                        if (tail$14 == null || node === tail$14) {
                            root$15.__tail = root$15.__prev = tail$14 = prev$14 || node;
                        }
                        root$15 = head$14 = tail$14 = next$14 = prev$14 = void 0;
                    }
                    node = onErrorAsJSONG(errors, boxed, requestedPath, index, node, nodeValue);
                }
                hasValue || (hasValue = jsonParent != null);
                var src$6 = optimizedPath, i$37 = -1, n$31 = src$6.length, opt = new Array(n$31);
                while (++i$37 < n$31) {
                    opt[i$37] = src$6[i$37];
                }
                var src$7 = requestedPath, i$38 = -1, n$32 = src$7.length, req = new Array(n$32);
                while (++i$38 < n$32) {
                    req[i$38] = src$7[i$38];
                }
                if (appendNullKey === true) {
                    req[req.length] = null;
                }
                requestedPaths[requestedPaths.length] = req;
                optimizedPaths[optimizedPaths.length] = opt;
            }
            if (boxed === false && node == null || refreshing === true) {
                var src$8 = boundPath, i$39 = -1, n$33 = src$8.length, req$2 = new Array(n$33);
                while (++i$39 < n$33) {
                    req$2[i$39] = src$8[i$39];
                }
                var src$9 = optimizedPath, i$40 = -1, n$34 = src$9.length, opt$2 = new Array(n$34);
                while (++i$40 < n$34) {
                    opt$2[i$40] = src$9[i$40];
                }
                var reqLen = req$2.length - 1, optLen = opt$2.length - 1, i$41 = -1, n$35 = requestedPath.length, map, offset$7, keys$12, index$8, reqKeys, optKeys, optKeysLen, x$6, y, z;
                while (++i$41 < n$35) {
                    req$2[++reqLen] = (reqKeys = pathMapStack[offset$7 = (i$41 + boundLength) * 4 + 1]) && reqKeys.length > 1 && [requestedPath[i$41]] || requestedPath[i$41];
                }
                var j$2 = depth, k$6 = reqLen, l = optLen;
                i$41 = j$2++;
                while (j$2 > i$41) {
                    if ((map = pathMapStack[offset$7 = (j$2 + boundLength) * 4]) != null && typeof map === 'object' && map[$TYPE] === void 0 && Array.isArray(map) === false && (keys$12 = pathMapStack[offset$7 + 1] || (pathMapStack[offset$7 + 1] = Object.keys(map))) && ((index$8 = pathMapStack[offset$7 + 2] || (pathMapStack[offset$7 + 2] = 0)) || true) && keys$12.length > 0) {
                        if ((pathMapStack[offset$7 + 2] = ++index$8) - 1 < keys$12.length) {
                            if (reqLen - k$6 < j$2 - i$41) {
                                var src$10 = keys$12, i$42 = -1, n$36 = src$10.length, dest = new Array(n$36);
                                while (++i$42 < n$36) {
                                    dest[i$42] = src$10[i$42];
                                }
                                reqKeys = dest;
                                x$6 = -1;
                                y = reqKeys.length;
                                while (++x$6 < y) {
                                    reqKeys[x$6] = (z = reqKeys[x$6]) == __NULL ? null : z;
                                }
                                req$2[++reqLen] = y === 1 ? reqKeys[0] : reqKeys;
                            }
                            if (optLen - l < j$2 - i$41) {
                                var src$11 = keys$12, i$43 = -1, n$37 = src$11.length, dest$2 = new Array(n$37);
                                while (++i$43 < n$37) {
                                    dest$2[i$43] = src$11[i$43];
                                }
                                reqKeys = dest$2;
                                optKeys = [];
                                optKeysLen = 0;
                                x$6 = -1;
                                y = reqKeys.length;
                                while (++x$6 < y) {
                                    (z = reqKeys[x$6]) !== __NULL && (optKeys[optKeysLen++] = z);
                                }
                                if (optKeysLen > 0) {
                                    opt$2[++optLen] = optKeysLen === 1 ? optKeys[0] : optKeys;
                                }
                            }
                            pathMapStack[offset$7 = 4 * (++j$2 + boundLength)] = map[keys$12[index$8 - 1]];
                            continue;
                        }
                    }
                    delete pathMapStack[offset$7 = 4 * (j$2-- + boundLength)];
                    delete pathMapStack[offset$7 + 1];
                    delete pathMapStack[offset$7 + 2];
                    delete pathMapStack[offset$7 + 3];
                }
                req$2.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req$2;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
            }
            appendNullKey = false;
            var offset$8, keys$13, index$9;
            while (depth > -1 && (keys$13 = pathMapStack[(offset$8 = 4 * depth) + 1]) && ((index$9 = pathMapStack[offset$8 + 2]) || true) && (pathMapStack[offset$8 + 2] = ++index$9) >= keys$13.length) {
                delete pathMapStack[offset$8 + 0];
                delete pathMapStack[offset$8 + 1];
                delete pathMapStack[offset$8 + 2];
                delete pathMapStack[offset$8 + 3];
                --depth;
            }
        }
    }
    values && (values[0] = hasValue && {
        paths: requestedPaths,
        jsong: jsons[-1]
    } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathMapsAsPathMap(model, pathMaps, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var boundLength = 0, nodeRoot = model._cache || (model._cache = {}), nodeParent, node;
    if (Array.isArray(boundPath)) {
        nodeParent = nodeRoot;
        boundLength = boundPath.length;
    } else {
        nodeParent = getBoundContext(model);
        boundPath = model._path || [];
    }
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$6, y$2) {
        return y$2;
    });
    var pathMapStack = pathMaps.pathMapStack || (pathMaps.pathMapStack = []);
    var nodes = pathMaps.nodes || (pathMaps.nodes = []);
    var jsons = pathMaps.jsons || (pathMaps.jsons = []);
    var errors = pathMaps.errors || (pathMaps.errors = []);
    var refs = pathMaps.refs || (pathMaps.refs = []);
    var depth = pathMaps.depth || (pathMaps.depth = 0);
    var refIndex = pathMaps.refIndex || (pathMaps.refIndex = 0);
    var refDepth = pathMaps.refDepth || (pathMaps.refDepth = 0);
    var requestedPath = pathMaps.requestedPath || (pathMaps.requestedPath = []);
    var optimizedPath = pathMaps.optimizedPath || (pathMaps.optimizedPath = []);
    var requestedPaths = pathMaps.requestedPaths || (pathMaps.requestedPaths = []);
    var optimizedPaths = pathMaps.optimizedPaths || (pathMaps.optimizedPaths = []);
    var requestedMissingPaths = pathMaps.requestedMissingPaths || (pathMaps.requestedMissingPaths = []);
    var optimizedMissingPaths = pathMaps.optimizedMissingPaths || (pathMaps.optimizedMissingPaths = []);
    var hasValue = pathMaps.hasValue || (pathMaps.hasValue = false);
    var jsonRoot = pathMaps.jsonRoot || (pathMaps.jsonRoot = values && values[0]);
    var jsonParent = pathMaps.jsonParent || (pathMaps.jsonParent = jsonRoot);
    var jsonNode = pathMaps.jsonNode || (pathMaps.jsonNode = jsonParent);
    var pathMap, length = 0, height = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-1] = jsonParent;
    jsons[-2] = jsons;
    var index = -1, count = pathMaps.length;
    while (++index < count) {
        pathMap = pathMaps[index];
        pathMapStack[0] = pathMap;
        depth = 0;
        length = pathMap.length;
        height = length - 1;
        var ref;
        refs.length = 0;
        while (depth > -1) {
            refIndex = depth;
            while (--refIndex >= -1) {
                if (!!(ref = refs[refIndex])) {
                    refLength = ref.length;
                    var i = -1, j = 0;
                    while (++i < refLength) {
                        optimizedPath[j++] = ref[i];
                    }
                    i = ++refIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    optimizedPath.length = j;
                    break;
                }
            }
            var offset, keys, index$2, key, isKeySet;
            pathMap = pathMap;
            height = (length = depth) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                node = nodeParent[key];
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                nodeTimestamp = node && node[$TIMESTAMP];
                nodeExpires = node && node[$EXPIRES];
                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                nodeType = pathMap && pathMap[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? pathMap[VALUE] : pathMap;
                nodeTimestamp = pathMap && pathMap[$TIMESTAMP];
                nodeExpires = pathMap && pathMap[$EXPIRES];
                var newNode, size_offset, leafSize = node && node[$SIZE] || 0;
                newNode = pathMap;
                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                    nodeType = 'array';
                    newNode[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                    delete nodeValue[$SIZE];
                    nodeValue[__CONTAINER] = newNode;
                } else if (nodeType === SENTINEL) {
                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                } else if (nodeType === ERROR) {
                    newNode[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                } else if (!(pathMap != null && typeof pathMap === 'object')) {
                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                    nodeType = 'sentinel';
                    newNode = { 'value': nodeValue };
                    newNode[$TYPE] = nodeType;
                    newNode[$SIZE] = nodeSize;
                } else {
                    nodeType = newNode[$TYPE] = nodeType || 'leaf';
                    newNode[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                }
                ;
                if (node != null && node !== newNode) {
                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = newNode[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                    while (++i$2 < nodeRefsLength) {
                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                            ref$2[__CONTEXT] = newNode;
                            newNode[__REF + (destRefsLength + i$2)] = ref$2;
                            node[__REF + i$2] = void 0;
                        }
                    }
                    newNode[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                    node[__REFS_LENGTH] = ref$2 = void 0;
                    var invParent = nodeParent, invChild = node, invKey = key, keys$2, index$3, offset$2, childType, childValue, isBranch, stack = [
                            nodeParent,
                            invKey,
                            node
                        ], depth$2 = 0;
                    while (depth$2 > -1) {
                        nodeParent = stack[offset$2 = depth$2 * 8];
                        invKey = stack[offset$2 + 1];
                        node = stack[offset$2 + 2];
                        if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                            childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                        }
                        childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                        if ((isBranch = stack[offset$2 + 5]) === void 0) {
                            isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                        }
                        if (isBranch === true) {
                            if ((keys$2 = stack[offset$2 + 6]) === void 0) {
                                keys$2 = stack[offset$2 + 6] = [];
                                index$3 = -1;
                                for (invKey in node) {
                                    !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys$2[++index$3] = invKey);
                                }
                            }
                            index$3 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                            if (index$3 < keys$2.length) {
                                stack[offset$2 + 7] = index$3 + 1;
                                stack[offset$2 = ++depth$2 * 8] = node;
                                stack[offset$2 + 1] = invKey = keys$2[index$3];
                                stack[offset$2 + 2] = node[invKey];
                                continue;
                            }
                        }
                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                        if (ref$3 && Array.isArray(ref$3)) {
                            destination = ref$3[__CONTEXT];
                            if (destination) {
                                var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                while (++i$3 <= n) {
                                    destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                }
                                destination[__REFS_LENGTH] = n;
                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                            }
                        }
                        var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                        while (++i$4 < n$2) {
                            if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                            (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                            (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            node === head && (root$2.__head = root$2.__next = head = next);
                            node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                            node.__next = node.__prev = void 0;
                            head = tail = next = prev = void 0;
                        }
                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                        delete stack[offset$2 + 0];
                        delete stack[offset$2 + 1];
                        delete stack[offset$2 + 2];
                        delete stack[offset$2 + 3];
                        delete stack[offset$2 + 4];
                        delete stack[offset$2 + 5];
                        delete stack[offset$2 + 6];
                        delete stack[offset$2 + 7];
                        --depth$2;
                    }
                    nodeParent = invParent;
                    node = invChild;
                }
                nodeParent[key] = node = newNode;
                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                size_offset = leafSize - nodeSize;
                var node$2 = nodeParent, child = node, stack$2 = [];
                while (node = nodeParent) {
                    nodeParent = node[__PARENT];
                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                        var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                        if (ref$5 && Array.isArray(ref$5)) {
                            destination$2 = ref$5[__CONTEXT];
                            if (destination$2) {
                                var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                while (++i$5 <= n$3) {
                                    destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                }
                                destination$2[__REFS_LENGTH] = n$3;
                                ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                            }
                        }
                        var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                        while (++i$6 < n$4) {
                            if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                            (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                            (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                            node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                            node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                            node.__next = node.__prev = void 0;
                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                        }
                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                        var depth$3 = 0, references, ref$7, i$7, k, n$5;
                        while (depth$3 > -1) {
                            if ((references = stack$2[depth$3]) === void 0) {
                                i$7 = k = -1;
                                n$5 = node[__REFS_LENGTH] || 0;
                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                node[__GENERATION] = __GENERATION_GUID++;
                                if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    stack$2[depth$3] = references = new Array(n$5 + 1);
                                    references[++k] = ref$7;
                                } else if (n$5 > 0) {
                                    stack$2[depth$3] = references = new Array(n$5);
                                }
                                while (++i$7 < n$5) {
                                    if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        references[++k] = ref$7;
                                    }
                                }
                            }
                            if ((node = references && references.pop()) !== void 0) {
                                ++depth$3;
                            } else {
                                stack$2[depth$3--] = void 0;
                            }
                        }
                    }
                }
                nodeParent = node$2;
                node = child;
                if (node != null && typeof node === 'object') {
                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    } else {
                        if (nodeExpires !== 1) {
                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                            if (node !== head$3) {
                                next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                root$4.__head = root$4.__next = head$3 = node;
                                head$3.__next = next$3;
                                head$3.__prev = void 0;
                            }
                            if (tail$3 == null || node === tail$3) {
                                root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                            }
                            root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                        }
                    }
                }
                if (depth >= boundLength) {
                    if (node != null && jsonParent != null) {
                        if (boxed === true) {
                            jsonParent[key] = node;
                        } else {
                            var val = nodeValue;
                            if (val != null && typeof val === 'object') {
                                var src = val, keys$3 = Object.keys(src), x, i$8 = -1, n$6 = keys$3.length;
                                val = Array.isArray(src) && new Array(src.length) || Object.create(null);
                                while (++i$8 < n$6) {
                                    x = keys$3[i$8];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (val[x] = src[x]);
                                }
                            }
                            if (val != null && typeof val === 'object' && !Array.isArray(val)) {
                                val[$TYPE] = LEAF;
                            }
                            jsonParent[key] = val;
                        }
                    }
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                jsonParent = jsonNode = jsons[depth - 1];
                depth = depth;
                follow_path_map_14022:
                    do {
                        if ((pathMap = pathMapStack[offset = depth * 4]) != null && typeof pathMap === 'object' && (keys = pathMapStack[offset + 1] || (pathMapStack[offset + 1] = Object.keys(pathMap))) && ((index$2 = pathMapStack[offset + 2] || (pathMapStack[offset + 2] = 0)) || true) && ((key = pathMapStack[offset + 3]) || true) && ((isKeySet = keys.length > 1) || keys.length > 0)) {
                            key = keys[index$2];
                            if (key == __NULL) {
                                pathMapStack[offset = 3 * (depth + 1)] = pathMap[__NULL];
                                pathMapStack[offset + 1] = keys;
                                pathMapStack[offset + 2] = 0;
                                nodeParent = nodes[depth] = node;
                                jsonParent = jsons[depth] = jsonNode;
                                depth = depth + 1;
                                continue follow_path_map_14022;
                            } else if (key === $SIZE || (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT))) {
                                nodeParent = node;
                                break follow_path_map_14022;
                            } else if (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') {
                                nodeParent[key] || (nodeParent[key] = pathMap[key]);
                                nodeParent = node;
                                break follow_path_map_14022;
                            } else {
                                depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                                pathMapStack[offset = 4 * (depth + 1)] = pathMap = pathMap[key];
                                if (pathMap != null && typeof pathMap === 'object' && pathMap[$TYPE] === void 0 && Array.isArray(pathMap) === false && (keys = Object.keys(pathMap)) && keys.length > 0) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                        nodeType = void 0;
                                        nodeValue = Object.create(null);
                                        nodeSize = node && node[$SIZE] || 0;
                                        if (node != null && node !== nodeValue) {
                                            var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = nodeValue[__REFS_LENGTH] || 0, i$9 = -1, ref$8;
                                            while (++i$9 < nodeRefsLength$2) {
                                                if ((ref$8 = node[__REF + i$9]) !== void 0) {
                                                    ref$8[__CONTEXT] = nodeValue;
                                                    nodeValue[__REF + (destRefsLength$2 + i$9)] = ref$8;
                                                    node[__REF + i$9] = void 0;
                                                }
                                            }
                                            nodeValue[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                            node[__REFS_LENGTH] = ref$8 = void 0;
                                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$4, index$4, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                    nodeParent,
                                                    invKey$2,
                                                    node
                                                ], depth$4 = 0;
                                            while (depth$4 > -1) {
                                                nodeParent = stack$3[offset$3 = depth$4 * 8];
                                                invKey$2 = stack$3[offset$3 + 1];
                                                node = stack$3[offset$3 + 2];
                                                if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                                    childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                                    isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                }
                                                if (isBranch$2 === true) {
                                                    if ((keys$4 = stack$3[offset$3 + 6]) === void 0) {
                                                        keys$4 = stack$3[offset$3 + 6] = [];
                                                        index$4 = -1;
                                                        for (invKey$2 in node) {
                                                            !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$4[++index$4] = invKey$2);
                                                        }
                                                    }
                                                    index$4 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                                    if (index$4 < keys$4.length) {
                                                        stack$3[offset$3 + 7] = index$4 + 1;
                                                        stack$3[offset$3 = ++depth$4 * 8] = node;
                                                        stack$3[offset$3 + 1] = invKey$2 = keys$4[index$4];
                                                        stack$3[offset$3 + 2] = node[invKey$2];
                                                        continue;
                                                    }
                                                }
                                                var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                if (ref$9 && Array.isArray(ref$9)) {
                                                    destination$3 = ref$9[__CONTEXT];
                                                    if (destination$3) {
                                                        var i$10 = (ref$9[__REF_INDEX] || 0) - 1, n$7 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$10 <= n$7) {
                                                            destination$3[__REF + i$10] = destination$3[__REF + (i$10 + 1)];
                                                        }
                                                        destination$3[__REFS_LENGTH] = n$7;
                                                        ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                    }
                                                }
                                                var ref$10, i$11 = -1, n$8 = node[__REFS_LENGTH] || 0;
                                                while (++i$11 < n$8) {
                                                    if ((ref$10 = node[__REF + i$11]) !== void 0) {
                                                        ref$10[__CONTEXT] = node[__REF + i$11] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                    (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                    (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                    node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                    node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                    node.__next = node.__prev = void 0;
                                                    head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                }
                                                nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                delete stack$3[offset$3 + 0];
                                                delete stack$3[offset$3 + 1];
                                                delete stack$3[offset$3 + 2];
                                                delete stack$3[offset$3 + 3];
                                                delete stack$3[offset$3 + 4];
                                                delete stack$3[offset$3 + 5];
                                                delete stack$3[offset$3 + 6];
                                                delete stack$3[offset$3 + 7];
                                                --depth$4;
                                            }
                                            nodeParent = invParent$2;
                                            node = invChild$2;
                                        }
                                        nodeParent[key] = node = nodeValue;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                if (ref$11 && Array.isArray(ref$11)) {
                                                    destination$4 = ref$11[__CONTEXT];
                                                    if (destination$4) {
                                                        var i$12 = (ref$11[__REF_INDEX] || 0) - 1, n$9 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$12 <= n$9) {
                                                            destination$4[__REF + i$12] = destination$4[__REF + (i$12 + 1)];
                                                        }
                                                        destination$4[__REFS_LENGTH] = n$9;
                                                        ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                    }
                                                }
                                                var ref$12, i$13 = -1, n$10 = node[__REFS_LENGTH] || 0;
                                                while (++i$13 < n$10) {
                                                    if ((ref$12 = node[__REF + i$13]) !== void 0) {
                                                        ref$12[__CONTEXT] = node[__REF + i$13] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5, prev$5;
                                                    (next$5 = node.__next) && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                    (prev$5 = node.__prev) && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                    node === head$5 && (root$6.__head = root$6.__next = head$5 = next$5);
                                                    node === tail$5 && (root$6.__tail = root$6.__prev = tail$5 = prev$5);
                                                    node.__next = node.__prev = void 0;
                                                    head$5 = tail$5 = next$5 = prev$5 = void 0;
                                                }
                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var depth$5 = 0, references$2, ref$13, i$14, k$2, n$11;
                                                while (depth$5 > -1) {
                                                    if ((references$2 = stack$4[depth$5]) === void 0) {
                                                        i$14 = k$2 = -1;
                                                        n$11 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                        if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$4[depth$5] = references$2 = new Array(n$11 + 1);
                                                            references$2[++k$2] = ref$13;
                                                        } else if (n$11 > 0) {
                                                            stack$4[depth$5] = references$2 = new Array(n$11);
                                                        }
                                                        while (++i$14 < n$11) {
                                                            if ((ref$13 = node[__REF + i$14]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                references$2[++k$2] = ref$13;
                                                            }
                                                        }
                                                    }
                                                    if ((node = references$2 && references$2.pop()) !== void 0) {
                                                        ++depth$5;
                                                    } else {
                                                        stack$4[depth$5--] = void 0;
                                                    }
                                                }
                                            }
                                        }
                                        nodeParent = node$3;
                                        node = child$2;
                                    }
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        do {
                                            if (nodeExpires !== 1) {
                                                var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                                if (node !== head$6) {
                                                    next$6 && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                    prev$6 && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                    (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                                    root$7.__head = root$7.__next = head$6 = node;
                                                    head$6.__next = next$6;
                                                    head$6.__prev = void 0;
                                                }
                                                if (tail$6 == null || node === tail$6) {
                                                    root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                                }
                                                root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                            }
                                            refs[depth] = nodeValue;
                                            refIndex = depth + 1;
                                            refDepth = 0;
                                            var location = (nodeValue[__CONTAINER] || nodeValue)[__CONTEXT];
                                            if (location !== void 0) {
                                                node = location;
                                                refHeight = (refLength = nodeValue.length) - 1;
                                                while (refDepth < refLength) {
                                                    optimizedPath[refDepth] = nodeValue[refDepth++];
                                                }
                                                optimizedPath.length = refLength;
                                            } else {
                                                var key$2, isKeySet$2;
                                                reference = nodeValue;
                                                refHeight = (refLength = reference.length) - 1;
                                                nodeParent = nodeRoot;
                                                nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                                nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                                if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                    node = node = nodeParent;
                                                } else {
                                                    nodeParent = nodeRoot;
                                                    jsonParent = jsonRoot;
                                                    refDepth = refDepth;
                                                    follow_path_14423:
                                                        do {
                                                            key$2 = reference[refDepth];
                                                            isKeySet$2 = false;
                                                            if (key$2 != null) {
                                                                if (refDepth < refHeight) {
                                                                    optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                    node = nodeParent[key$2];
                                                                    nodeType = node && node[$TYPE] || void 0;
                                                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                    nodeTimestamp = node && node[$TIMESTAMP];
                                                                    nodeExpires = node && node[$EXPIRES];
                                                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                    }
                                                                    if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                        nodeType = void 0;
                                                                        nodeValue = Object.create(null);
                                                                        nodeSize = node && node[$SIZE] || 0;
                                                                        if (node != null && node !== nodeValue) {
                                                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$15 = -1, ref$14;
                                                                            while (++i$15 < nodeRefsLength$3) {
                                                                                if ((ref$14 = node[__REF + i$15]) !== void 0) {
                                                                                    ref$14[__CONTEXT] = nodeValue;
                                                                                    nodeValue[__REF + (destRefsLength$3 + i$15)] = ref$14;
                                                                                    node[__REF + i$15] = void 0;
                                                                                }
                                                                            }
                                                                            nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$5, index$5, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                    nodeParent,
                                                                                    invKey$3,
                                                                                    node
                                                                                ], depth$6 = 0;
                                                                            while (depth$6 > -1) {
                                                                                nodeParent = stack$5[offset$4 = depth$6 * 8];
                                                                                invKey$3 = stack$5[offset$4 + 1];
                                                                                node = stack$5[offset$4 + 2];
                                                                                if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                    childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                                                                    isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                                }
                                                                                if (isBranch$3 === true) {
                                                                                    if ((keys$5 = stack$5[offset$4 + 6]) === void 0) {
                                                                                        keys$5 = stack$5[offset$4 + 6] = [];
                                                                                        index$5 = -1;
                                                                                        for (invKey$3 in node) {
                                                                                            !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$5[++index$5] = invKey$3);
                                                                                        }
                                                                                    }
                                                                                    index$5 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                                                                    if (index$5 < keys$5.length) {
                                                                                        stack$5[offset$4 + 7] = index$5 + 1;
                                                                                        stack$5[offset$4 = ++depth$6 * 8] = node;
                                                                                        stack$5[offset$4 + 1] = invKey$3 = keys$5[index$5];
                                                                                        stack$5[offset$4 + 2] = node[invKey$3];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                                if (ref$15 && Array.isArray(ref$15)) {
                                                                                    destination$5 = ref$15[__CONTEXT];
                                                                                    if (destination$5) {
                                                                                        var i$16 = (ref$15[__REF_INDEX] || 0) - 1, n$12 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$16 <= n$12) {
                                                                                            destination$5[__REF + i$16] = destination$5[__REF + (i$16 + 1)];
                                                                                        }
                                                                                        destination$5[__REFS_LENGTH] = n$12;
                                                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$16, i$17 = -1, n$13 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$17 < n$13) {
                                                                                    if ((ref$16 = node[__REF + i$17]) !== void 0) {
                                                                                        ref$16[__CONTEXT] = node[__REF + i$17] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                    (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                    (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                    node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                    node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                                }
                                                                                nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$5[offset$4 + 0];
                                                                                delete stack$5[offset$4 + 1];
                                                                                delete stack$5[offset$4 + 2];
                                                                                delete stack$5[offset$4 + 3];
                                                                                delete stack$5[offset$4 + 4];
                                                                                delete stack$5[offset$4 + 5];
                                                                                delete stack$5[offset$4 + 6];
                                                                                delete stack$5[offset$4 + 7];
                                                                                --depth$6;
                                                                            }
                                                                            nodeParent = invParent$3;
                                                                            node = invChild$3;
                                                                        }
                                                                        nodeParent[key$2] = node = nodeValue;
                                                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                        var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                                if (ref$17 && Array.isArray(ref$17)) {
                                                                                    destination$6 = ref$17[__CONTEXT];
                                                                                    if (destination$6) {
                                                                                        var i$18 = (ref$17[__REF_INDEX] || 0) - 1, n$14 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$18 <= n$14) {
                                                                                            destination$6[__REF + i$18] = destination$6[__REF + (i$18 + 1)];
                                                                                        }
                                                                                        destination$6[__REFS_LENGTH] = n$14;
                                                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$18, i$19 = -1, n$15 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$19 < n$15) {
                                                                                    if ((ref$18 = node[__REF + i$19]) !== void 0) {
                                                                                        ref$18[__CONTEXT] = node[__REF + i$19] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                    (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                    (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                    node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                    node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$7 = 0, references$3, ref$19, i$20, k$3, n$16;
                                                                                while (depth$7 > -1) {
                                                                                    if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                        i$20 = k$3 = -1;
                                                                                        n$16 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$16 + 1);
                                                                                            references$3[++k$3] = ref$19;
                                                                                        } else if (n$16 > 0) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$16);
                                                                                        }
                                                                                        while (++i$20 < n$16) {
                                                                                            if ((ref$19 = node[__REF + i$20]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$3[++k$3] = ref$19;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                        ++depth$7;
                                                                                    } else {
                                                                                        stack$6[depth$7--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$4;
                                                                        node = child$3;
                                                                    }
                                                                    if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                        nodeParent = node;
                                                                        break follow_path_14423;
                                                                    }
                                                                    nodeParent = node;
                                                                    jsonParent = jsonNode;
                                                                    refDepth = refDepth + 1;
                                                                    continue follow_path_14423;
                                                                } else if (refDepth === refHeight) {
                                                                    optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                    node = nodeParent[key$2];
                                                                    nodeType = node && node[$TYPE] || void 0;
                                                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                    nodeTimestamp = node && node[$TIMESTAMP];
                                                                    nodeExpires = node && node[$EXPIRES];
                                                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                    }
                                                                    if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                        nodeType = void 0;
                                                                        nodeValue = Object.create(null);
                                                                        nodeSize = node && node[$SIZE] || 0;
                                                                        if (node != null && node !== nodeValue) {
                                                                            var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = nodeValue[__REFS_LENGTH] || 0, i$21 = -1, ref$20;
                                                                            while (++i$21 < nodeRefsLength$4) {
                                                                                if ((ref$20 = node[__REF + i$21]) !== void 0) {
                                                                                    ref$20[__CONTEXT] = nodeValue;
                                                                                    nodeValue[__REF + (destRefsLength$4 + i$21)] = ref$20;
                                                                                    node[__REF + i$21] = void 0;
                                                                                }
                                                                            }
                                                                            nodeValue[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                            node[__REFS_LENGTH] = ref$20 = void 0;
                                                                            var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$6, index$6, offset$5, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                    nodeParent,
                                                                                    invKey$4,
                                                                                    node
                                                                                ], depth$8 = 0;
                                                                            while (depth$8 > -1) {
                                                                                nodeParent = stack$7[offset$5 = depth$8 * 8];
                                                                                invKey$4 = stack$7[offset$5 + 1];
                                                                                node = stack$7[offset$5 + 2];
                                                                                if ((childType$4 = stack$7[offset$5 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                    childType$4 = stack$7[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$4 = stack$7[offset$5 + 4] || (stack$7[offset$5 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$4 = stack$7[offset$5 + 5]) === void 0) {
                                                                                    isBranch$4 = stack$7[offset$5 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                                }
                                                                                if (isBranch$4 === true) {
                                                                                    if ((keys$6 = stack$7[offset$5 + 6]) === void 0) {
                                                                                        keys$6 = stack$7[offset$5 + 6] = [];
                                                                                        index$6 = -1;
                                                                                        for (invKey$4 in node) {
                                                                                            !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$6[++index$6] = invKey$4);
                                                                                        }
                                                                                    }
                                                                                    index$6 = stack$7[offset$5 + 7] || (stack$7[offset$5 + 7] = 0);
                                                                                    if (index$6 < keys$6.length) {
                                                                                        stack$7[offset$5 + 7] = index$6 + 1;
                                                                                        stack$7[offset$5 = ++depth$8 * 8] = node;
                                                                                        stack$7[offset$5 + 1] = invKey$4 = keys$6[index$6];
                                                                                        stack$7[offset$5 + 2] = node[invKey$4];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                                if (ref$21 && Array.isArray(ref$21)) {
                                                                                    destination$7 = ref$21[__CONTEXT];
                                                                                    if (destination$7) {
                                                                                        var i$22 = (ref$21[__REF_INDEX] || 0) - 1, n$17 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$22 <= n$17) {
                                                                                            destination$7[__REF + i$22] = destination$7[__REF + (i$22 + 1)];
                                                                                        }
                                                                                        destination$7[__REFS_LENGTH] = n$17;
                                                                                        ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$22, i$23 = -1, n$18 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$23 < n$18) {
                                                                                    if ((ref$22 = node[__REF + i$23]) !== void 0) {
                                                                                        ref$22[__CONTEXT] = node[__REF + i$23] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                    (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                    (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                    node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                    node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                                }
                                                                                nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$7[offset$5 + 0];
                                                                                delete stack$7[offset$5 + 1];
                                                                                delete stack$7[offset$5 + 2];
                                                                                delete stack$7[offset$5 + 3];
                                                                                delete stack$7[offset$5 + 4];
                                                                                delete stack$7[offset$5 + 5];
                                                                                delete stack$7[offset$5 + 6];
                                                                                delete stack$7[offset$5 + 7];
                                                                                --depth$8;
                                                                            }
                                                                            nodeParent = invParent$4;
                                                                            node = invChild$4;
                                                                        }
                                                                        nodeParent[key$2] = node = nodeValue;
                                                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                        var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                                var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                                if (ref$23 && Array.isArray(ref$23)) {
                                                                                    destination$8 = ref$23[__CONTEXT];
                                                                                    if (destination$8) {
                                                                                        var i$24 = (ref$23[__REF_INDEX] || 0) - 1, n$19 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$24 <= n$19) {
                                                                                            destination$8[__REF + i$24] = destination$8[__REF + (i$24 + 1)];
                                                                                        }
                                                                                        destination$8[__REFS_LENGTH] = n$19;
                                                                                        ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$24, i$25 = -1, n$20 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$25 < n$20) {
                                                                                    if ((ref$24 = node[__REF + i$25]) !== void 0) {
                                                                                        ref$24[__CONTEXT] = node[__REF + i$25] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                                                    (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                                                    (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                                                    node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                                                    node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$9 = 0, references$4, ref$25, i$26, k$4, n$21;
                                                                                while (depth$9 > -1) {
                                                                                    if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                        i$26 = k$4 = -1;
                                                                                        n$21 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$21 + 1);
                                                                                            references$4[++k$4] = ref$25;
                                                                                        } else if (n$21 > 0) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$21);
                                                                                        }
                                                                                        while (++i$26 < n$21) {
                                                                                            if ((ref$25 = node[__REF + i$26]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$4[++k$4] = ref$25;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                        ++depth$9;
                                                                                    } else {
                                                                                        stack$8[depth$9--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$5;
                                                                        node = child$4;
                                                                    }
                                                                    if (node != null) {
                                                                        var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                        // Set up the hard-link so we don't have to do all
                                                                        // this work the next time we follow this reference.
                                                                        if (refContext === void 0) {
                                                                            // create a back reference
                                                                            var backRefs = node[__REFS_LENGTH] || 0;
                                                                            node[__REF + backRefs] = refContainer;
                                                                            node[__REFS_LENGTH] = backRefs + 1;
                                                                            // create a hard reference
                                                                            refContainer[__REF_INDEX] = backRefs;
                                                                            refContainer[__CONTEXT] = node;
                                                                            refContainer = backRefs = void 0;
                                                                        }
                                                                        ;
                                                                    }
                                                                    appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                    nodeParent = node;
                                                                    break follow_path_14423;
                                                                }
                                                            } else if (refDepth < refHeight) {
                                                                nodeParent = node;
                                                                jsonParent = jsonNode;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_14423;
                                                            }
                                                            nodeParent = node;
                                                            break follow_path_14423;
                                                        } while (true);
                                                    node = nodeParent;
                                                }
                                            }
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeExpires = node && node[$EXPIRES];
                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                        } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                        if (node == null) {
                                            while (refDepth <= refHeight) {
                                                optimizedPath[refDepth] = reference[refDepth++];
                                            }
                                        }
                                    }
                                    if (depth >= boundLength) {
                                        if (node != null && jsonParent != null) {
                                            if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                if (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                    jsonNode = jsonParent[key] = Object.create(null);
                                                }
                                                jsonNode[__KEY] = key;
                                                jsonNode[__GENERATION] = node[__GENERATION] || 0;
                                            } else {
                                                if (boxed === true) {
                                                    jsonParent[key] = node;
                                                } else {
                                                    var val$2 = nodeValue;
                                                    if (val$2 != null && typeof val$2 === 'object') {
                                                        var src$2 = val$2, keys$7 = Object.keys(src$2), x$2, i$27 = -1, n$22 = keys$7.length;
                                                        val$2 = Array.isArray(src$2) && new Array(src$2.length) || Object.create(null);
                                                        while (++i$27 < n$22) {
                                                            x$2 = keys$7[i$27];
                                                            !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT) || x$2[0] === '$') && (val$2[x$2] = src$2[x$2]);
                                                        }
                                                    }
                                                    if (val$2 != null && typeof val$2 === 'object' && !Array.isArray(val$2)) {
                                                        val$2[$TYPE] = LEAF;
                                                    }
                                                    jsonParent[key] = val$2;
                                                }
                                            }
                                        }
                                    }
                                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                        nodeParent = node;
                                        break follow_path_map_14022;
                                    }
                                    pathMapStack[offset + 1] = keys;
                                    pathMapStack[offset + 3] = key;
                                    nodeParent = nodes[depth] = node;
                                    jsonParent = jsons[depth] = jsonNode;
                                    depth = depth + 1;
                                    continue follow_path_map_14022;
                                }
                            }
                        }
                        if (key != null) {
                            optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                            node = nodeParent[key];
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            nodeTimestamp = node && node[$TIMESTAMP];
                            nodeExpires = node && node[$EXPIRES];
                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            nodeType = pathMap && pathMap[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? pathMap[VALUE] : pathMap;
                            nodeTimestamp = pathMap && pathMap[$TIMESTAMP];
                            nodeExpires = pathMap && pathMap[$EXPIRES];
                            var newNode$2, size_offset$2, leafSize$2 = node && node[$SIZE] || 0;
                            newNode$2 = pathMap;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                nodeType = 'array';
                                newNode$2[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                                delete nodeValue[$SIZE];
                                nodeValue[__CONTAINER] = newNode$2;
                            } else if (nodeType === SENTINEL) {
                                newNode$2[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            } else if (nodeType === ERROR) {
                                newNode$2[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                            } else if (!(pathMap != null && typeof pathMap === 'object')) {
                                nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                nodeType = 'sentinel';
                                newNode$2 = { 'value': nodeValue };
                                newNode$2[$TYPE] = nodeType;
                                newNode$2[$SIZE] = nodeSize;
                            } else {
                                nodeType = newNode$2[$TYPE] = nodeType || 'leaf';
                                newNode$2[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                            }
                            ;
                            if (node != null && node !== newNode$2) {
                                var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = newNode$2[__REFS_LENGTH] || 0, i$28 = -1, ref$26;
                                while (++i$28 < nodeRefsLength$5) {
                                    if ((ref$26 = node[__REF + i$28]) !== void 0) {
                                        ref$26[__CONTEXT] = newNode$2;
                                        newNode$2[__REF + (destRefsLength$5 + i$28)] = ref$26;
                                        node[__REF + i$28] = void 0;
                                    }
                                }
                                newNode$2[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                node[__REFS_LENGTH] = ref$26 = void 0;
                                var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$8, index$7, offset$6, childType$5, childValue$5, isBranch$5, stack$9 = [
                                        nodeParent,
                                        invKey$5,
                                        node
                                    ], depth$10 = 0;
                                while (depth$10 > -1) {
                                    nodeParent = stack$9[offset$6 = depth$10 * 8];
                                    invKey$5 = stack$9[offset$6 + 1];
                                    node = stack$9[offset$6 + 2];
                                    if ((childType$5 = stack$9[offset$6 + 3]) === void 0 || (childType$5 = void 0)) {
                                        childType$5 = stack$9[offset$6 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$5 = stack$9[offset$6 + 4] || (stack$9[offset$6 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$5 = stack$9[offset$6 + 5]) === void 0) {
                                        isBranch$5 = stack$9[offset$6 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                    }
                                    if (isBranch$5 === true) {
                                        if ((keys$8 = stack$9[offset$6 + 6]) === void 0) {
                                            keys$8 = stack$9[offset$6 + 6] = [];
                                            index$7 = -1;
                                            for (invKey$5 in node) {
                                                !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$8[++index$7] = invKey$5);
                                            }
                                        }
                                        index$7 = stack$9[offset$6 + 7] || (stack$9[offset$6 + 7] = 0);
                                        if (index$7 < keys$8.length) {
                                            stack$9[offset$6 + 7] = index$7 + 1;
                                            stack$9[offset$6 = ++depth$10 * 8] = node;
                                            stack$9[offset$6 + 1] = invKey$5 = keys$8[index$7];
                                            stack$9[offset$6 + 2] = node[invKey$5];
                                            continue;
                                        }
                                    }
                                    var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                    if (ref$27 && Array.isArray(ref$27)) {
                                        destination$9 = ref$27[__CONTEXT];
                                        if (destination$9) {
                                            var i$29 = (ref$27[__REF_INDEX] || 0) - 1, n$23 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                            while (++i$29 <= n$23) {
                                                destination$9[__REF + i$29] = destination$9[__REF + (i$29 + 1)];
                                            }
                                            destination$9[__REFS_LENGTH] = n$23;
                                            ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                        }
                                    }
                                    var ref$28, i$30 = -1, n$24 = node[__REFS_LENGTH] || 0;
                                    while (++i$30 < n$24) {
                                        if ((ref$28 = node[__REF + i$30]) !== void 0) {
                                            ref$28[__CONTEXT] = node[__REF + i$30] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    if (node != null && typeof node === 'object') {
                                        var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                        (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                        (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                        node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                        node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                        node.__next = node.__prev = void 0;
                                        head$11 = tail$11 = next$11 = prev$11 = void 0;
                                    }
                                    nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    delete stack$9[offset$6 + 0];
                                    delete stack$9[offset$6 + 1];
                                    delete stack$9[offset$6 + 2];
                                    delete stack$9[offset$6 + 3];
                                    delete stack$9[offset$6 + 4];
                                    delete stack$9[offset$6 + 5];
                                    delete stack$9[offset$6 + 6];
                                    delete stack$9[offset$6 + 7];
                                    --depth$10;
                                }
                                nodeParent = invParent$5;
                                node = invChild$5;
                            }
                            nodeParent[key] = node = newNode$2;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            size_offset$2 = leafSize$2 - nodeSize;
                            var node$6 = nodeParent, child$5 = node, stack$10 = [];
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                    var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                    if (ref$29 && Array.isArray(ref$29)) {
                                        destination$10 = ref$29[__CONTEXT];
                                        if (destination$10) {
                                            var i$31 = (ref$29[__REF_INDEX] || 0) - 1, n$25 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                            while (++i$31 <= n$25) {
                                                destination$10[__REF + i$31] = destination$10[__REF + (i$31 + 1)];
                                            }
                                            destination$10[__REFS_LENGTH] = n$25;
                                            ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                        }
                                    }
                                    var ref$30, i$32 = -1, n$26 = node[__REFS_LENGTH] || 0;
                                    while (++i$32 < n$26) {
                                        if ((ref$30 = node[__REF + i$32]) !== void 0) {
                                            ref$30[__CONTEXT] = node[__REF + i$32] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    if (node != null && typeof node === 'object') {
                                        var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12, prev$12;
                                        (next$12 = node.__next) && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                        (prev$12 = node.__prev) && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                        node === head$12 && (root$13.__head = root$13.__next = head$12 = next$12);
                                        node === tail$12 && (root$13.__tail = root$13.__prev = tail$12 = prev$12);
                                        node.__next = node.__prev = void 0;
                                        head$12 = tail$12 = next$12 = prev$12 = void 0;
                                    }
                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var depth$11 = 0, references$5, ref$31, i$33, k$5, n$27;
                                    while (depth$11 > -1) {
                                        if ((references$5 = stack$10[depth$11]) === void 0) {
                                            i$33 = k$5 = -1;
                                            n$27 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = __GENERATION_GUID++;
                                            if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$10[depth$11] = references$5 = new Array(n$27 + 1);
                                                references$5[++k$5] = ref$31;
                                            } else if (n$27 > 0) {
                                                stack$10[depth$11] = references$5 = new Array(n$27);
                                            }
                                            while (++i$33 < n$27) {
                                                if ((ref$31 = node[__REF + i$33]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    references$5[++k$5] = ref$31;
                                                }
                                            }
                                        }
                                        if ((node = references$5 && references$5.pop()) !== void 0) {
                                            ++depth$11;
                                        } else {
                                            stack$10[depth$11--] = void 0;
                                        }
                                    }
                                }
                            }
                            nodeParent = node$6;
                            node = child$5;
                            if (node != null && typeof node === 'object') {
                                if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                } else {
                                    if (nodeExpires !== 1) {
                                        var root$14 = root, head$13 = root$14.__head, tail$13 = root$14.__tail, next$13 = node.__next, prev$13 = node.__prev;
                                        if (node !== head$13) {
                                            next$13 && (next$13 != null && typeof next$13 === 'object') && (next$13.__prev = prev$13);
                                            prev$13 && (prev$13 != null && typeof prev$13 === 'object') && (prev$13.__next = next$13);
                                            (next$13 = head$13) && (head$13 != null && typeof head$13 === 'object') && (head$13.__prev = node);
                                            root$14.__head = root$14.__next = head$13 = node;
                                            head$13.__next = next$13;
                                            head$13.__prev = void 0;
                                        }
                                        if (tail$13 == null || node === tail$13) {
                                            root$14.__tail = root$14.__prev = tail$13 = prev$13 || node;
                                        }
                                        root$14 = head$13 = tail$13 = next$13 = prev$13 = void 0;
                                    }
                                }
                            }
                            if (depth >= boundLength) {
                                if (node != null && jsonParent != null) {
                                    if (boxed === true) {
                                        jsonParent[key] = node;
                                    } else {
                                        var val$3 = nodeValue;
                                        if (val$3 != null && typeof val$3 === 'object') {
                                            var src$3 = val$3, keys$9 = Object.keys(src$3), x$3, i$34 = -1, n$28 = keys$9.length;
                                            val$3 = Array.isArray(src$3) && new Array(src$3.length) || Object.create(null);
                                            while (++i$34 < n$28) {
                                                x$3 = keys$9[i$34];
                                                !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT) || x$3[0] === '$') && (val$3[x$3] = src$3[x$3]);
                                            }
                                        }
                                        if (val$3 != null && typeof val$3 === 'object' && !Array.isArray(val$3)) {
                                            val$3[$TYPE] = LEAF;
                                        }
                                        jsonParent[key] = val$3;
                                    }
                                }
                            }
                            appendNullKey = false;
                        }
                        nodeParent = node;
                        break follow_path_map_14022;
                    } while (true);
                node = nodeParent;
            }
            if (node != null || boxed === true) {
                if (nodeType === ERROR) {
                    if (nodeExpires !== 1) {
                        var root$15 = root, head$14 = root$15.__head, tail$14 = root$15.__tail, next$14 = node.__next, prev$14 = node.__prev;
                        if (node !== head$14) {
                            next$14 && (next$14 != null && typeof next$14 === 'object') && (next$14.__prev = prev$14);
                            prev$14 && (prev$14 != null && typeof prev$14 === 'object') && (prev$14.__next = next$14);
                            (next$14 = head$14) && (head$14 != null && typeof head$14 === 'object') && (head$14.__prev = node);
                            root$15.__head = root$15.__next = head$14 = node;
                            head$14.__next = next$14;
                            head$14.__prev = void 0;
                        }
                        if (tail$14 == null || node === tail$14) {
                            root$15.__tail = root$15.__prev = tail$14 = prev$14 || node;
                        }
                        root$15 = head$14 = tail$14 = next$14 = prev$14 = void 0;
                    }
                    var nodeType$2 = node && node[$TYPE] || void 0;
                    nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                    var pbv = Object.create(null);
                    var src$4 = requestedPath, i$35 = -1, n$29 = src$4.length, req = new Array(n$29);
                    while (++i$35 < n$29) {
                        req[i$35] = src$4[i$35];
                    }
                    if (appendNullKey === true) {
                        req[req.length] = null;
                    }
                    pbv.path = req;
                    if (boxed === true) {
                        pbv.value = node;
                    } else {
                        var dest = nodeValue, src$5 = dest, x$4;
                        if (dest != null && typeof dest === 'object') {
                            dest = Array.isArray(src$5) && [] || Object.create(null);
                            for (x$4 in src$5) {
                                !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT) || x$4[0] === '$') && (dest[x$4] = src$5[x$4]);
                            }
                        }
                        pbv.value = dest;
                    }
                    errors[errors.length] = pbv;
                }
                hasValue || (hasValue = jsonParent != null);
                var src$6 = optimizedPath, i$36 = -1, n$30 = src$6.length, opt = new Array(n$30);
                while (++i$36 < n$30) {
                    opt[i$36] = src$6[i$36];
                }
                var src$7 = requestedPath, i$37 = -1, n$31 = src$7.length, req$2 = new Array(n$31);
                while (++i$37 < n$31) {
                    req$2[i$37] = src$7[i$37];
                }
                if (appendNullKey === true) {
                    req$2[req$2.length] = null;
                }
                requestedPaths[requestedPaths.length] = req$2;
                optimizedPaths[optimizedPaths.length] = opt;
            }
            if (boxed === false && node == null || refreshing === true) {
                var src$8 = boundPath, i$38 = -1, n$32 = src$8.length, req$3 = new Array(n$32);
                while (++i$38 < n$32) {
                    req$3[i$38] = src$8[i$38];
                }
                var src$9 = optimizedPath, i$39 = -1, n$33 = src$9.length, opt$2 = new Array(n$33);
                while (++i$39 < n$33) {
                    opt$2[i$39] = src$9[i$39];
                }
                var reqLen = req$3.length - 1, optLen = opt$2.length - 1, i$40 = -1, n$34 = requestedPath.length, map, offset$7, keys$10, index$8, reqKeys, optKeys, optKeysLen, x$5, y, z;
                while (++i$40 < n$34) {
                    req$3[++reqLen] = (reqKeys = pathMapStack[offset$7 = (i$40 + boundLength) * 4 + 1]) && reqKeys.length > 1 && [requestedPath[i$40]] || requestedPath[i$40];
                }
                var j$2 = depth, k$6 = reqLen, l = optLen;
                i$40 = j$2++;
                while (j$2 > i$40) {
                    if ((map = pathMapStack[offset$7 = (j$2 + boundLength) * 4]) != null && typeof map === 'object' && map[$TYPE] === void 0 && Array.isArray(map) === false && (keys$10 = pathMapStack[offset$7 + 1] || (pathMapStack[offset$7 + 1] = Object.keys(map))) && ((index$8 = pathMapStack[offset$7 + 2] || (pathMapStack[offset$7 + 2] = 0)) || true) && keys$10.length > 0) {
                        if ((pathMapStack[offset$7 + 2] = ++index$8) - 1 < keys$10.length) {
                            if (reqLen - k$6 < j$2 - i$40) {
                                var src$10 = keys$10, i$41 = -1, n$35 = src$10.length, dest$2 = new Array(n$35);
                                while (++i$41 < n$35) {
                                    dest$2[i$41] = src$10[i$41];
                                }
                                reqKeys = dest$2;
                                x$5 = -1;
                                y = reqKeys.length;
                                while (++x$5 < y) {
                                    reqKeys[x$5] = (z = reqKeys[x$5]) == __NULL ? null : z;
                                }
                                req$3[++reqLen] = y === 1 ? reqKeys[0] : reqKeys;
                            }
                            if (optLen - l < j$2 - i$40) {
                                var src$11 = keys$10, i$42 = -1, n$36 = src$11.length, dest$3 = new Array(n$36);
                                while (++i$42 < n$36) {
                                    dest$3[i$42] = src$11[i$42];
                                }
                                reqKeys = dest$3;
                                optKeys = [];
                                optKeysLen = 0;
                                x$5 = -1;
                                y = reqKeys.length;
                                while (++x$5 < y) {
                                    (z = reqKeys[x$5]) !== __NULL && (optKeys[optKeysLen++] = z);
                                }
                                if (optKeysLen > 0) {
                                    opt$2[++optLen] = optKeysLen === 1 ? optKeys[0] : optKeys;
                                }
                            }
                            pathMapStack[offset$7 = 4 * (++j$2 + boundLength)] = map[keys$10[index$8 - 1]];
                            continue;
                        }
                    }
                    delete pathMapStack[offset$7 = 4 * (j$2-- + boundLength)];
                    delete pathMapStack[offset$7 + 1];
                    delete pathMapStack[offset$7 + 2];
                    delete pathMapStack[offset$7 + 3];
                }
                req$3.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req$3;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
            }
            appendNullKey = false;
            var offset$8, keys$11, index$9;
            while (depth > -1 && (keys$11 = pathMapStack[(offset$8 = 4 * depth) + 1]) && ((index$9 = pathMapStack[offset$8 + 2]) || true) && (pathMapStack[offset$8 + 2] = ++index$9) >= keys$11.length) {
                delete pathMapStack[offset$8 + 0];
                delete pathMapStack[offset$8 + 1];
                delete pathMapStack[offset$8 + 2];
                delete pathMapStack[offset$8 + 3];
                --depth;
            }
        }
    }
    values && (values[0] = hasValue && { json: jsons[-1] } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setPathMapsAsValues(model, pathMaps, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    Array.isArray(values) && (values.length = 0);
    var boundLength = 0, nodeRoot = model._cache || (model._cache = {}), nodeParent, node;
    if (Array.isArray(boundPath)) {
        nodeParent = nodeRoot;
        boundLength = boundPath.length;
    } else {
        nodeParent = getBoundContext(model);
        boundPath = model._path || [];
    }
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$4, y$2) {
        return y$2;
    });
    var pathMapStack = pathMaps.pathMapStack || (pathMaps.pathMapStack = []);
    var nodes = pathMaps.nodes || (pathMaps.nodes = []);
    var errors = pathMaps.errors || (pathMaps.errors = []);
    var refs = pathMaps.refs || (pathMaps.refs = []);
    var depth = pathMaps.depth || (pathMaps.depth = 0);
    var refIndex = pathMaps.refIndex || (pathMaps.refIndex = 0);
    var refDepth = pathMaps.refDepth || (pathMaps.refDepth = 0);
    var requestedPath = pathMaps.requestedPath || (pathMaps.requestedPath = []);
    var optimizedPath = pathMaps.optimizedPath || (pathMaps.optimizedPath = []);
    var requestedPaths = pathMaps.requestedPaths || (pathMaps.requestedPaths = []);
    var optimizedPaths = pathMaps.optimizedPaths || (pathMaps.optimizedPaths = []);
    var requestedMissingPaths = pathMaps.requestedMissingPaths || (pathMaps.requestedMissingPaths = []);
    var optimizedMissingPaths = pathMaps.optimizedMissingPaths || (pathMaps.optimizedMissingPaths = []);
    var pathMap, length = 0, height = 0, reference, refLength = 0, refHeight = 0, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    var index = -1, count = pathMaps.length;
    while (++index < count) {
        pathMap = pathMaps[index];
        pathMapStack[0] = pathMap;
        depth = 0;
        length = pathMap.length;
        height = length - 1;
        var ref;
        refs.length = 0;
        while (depth > -1) {
            refIndex = depth;
            while (--refIndex >= -1) {
                if (!!(ref = refs[refIndex])) {
                    refLength = ref.length;
                    var i = -1, j = 0;
                    while (++i < refLength) {
                        optimizedPath[j++] = ref[i];
                    }
                    i = ++refIndex;
                    while (i < depth) {
                        optimizedPath[j++] = requestedPath[i++];
                    }
                    optimizedPath.length = j;
                    break;
                }
            }
            var offset, keys, index$2, key, isKeySet;
            pathMap = pathMap;
            height = (length = depth) - 1;
            nodeParent = nodes[depth - 1];
            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                node = nodeParent;
                nodeParent = nodes;
                key = depth - 1;
                isKeySet = false;
                optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                node = nodeParent[key];
                nodeType = node && node[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                nodeTimestamp = node && node[$TIMESTAMP];
                nodeExpires = node && node[$EXPIRES];
                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                }
                nodeType = pathMap && pathMap[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? pathMap[VALUE] : pathMap;
                nodeTimestamp = pathMap && pathMap[$TIMESTAMP];
                nodeExpires = pathMap && pathMap[$EXPIRES];
                var newNode, size_offset, leafSize = node && node[$SIZE] || 0;
                newNode = pathMap;
                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                    nodeType = 'array';
                    newNode[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                    delete nodeValue[$SIZE];
                    nodeValue[__CONTAINER] = newNode;
                } else if (nodeType === SENTINEL) {
                    newNode[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                } else if (nodeType === ERROR) {
                    newNode[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                } else if (!(pathMap != null && typeof pathMap === 'object')) {
                    nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                    nodeType = 'sentinel';
                    newNode = { 'value': nodeValue };
                    newNode[$TYPE] = nodeType;
                    newNode[$SIZE] = nodeSize;
                } else {
                    nodeType = newNode[$TYPE] = nodeType || 'leaf';
                    newNode[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                }
                ;
                if (node != null && node !== newNode) {
                    var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = newNode[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                    while (++i$2 < nodeRefsLength) {
                        if ((ref$2 = node[__REF + i$2]) !== void 0) {
                            ref$2[__CONTEXT] = newNode;
                            newNode[__REF + (destRefsLength + i$2)] = ref$2;
                            node[__REF + i$2] = void 0;
                        }
                    }
                    newNode[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                    node[__REFS_LENGTH] = ref$2 = void 0;
                    var invParent = nodeParent, invChild = node, invKey = key, keys$2, index$3, offset$2, childType, childValue, isBranch, stack = [
                            nodeParent,
                            invKey,
                            node
                        ], depth$2 = 0;
                    while (depth$2 > -1) {
                        nodeParent = stack[offset$2 = depth$2 * 8];
                        invKey = stack[offset$2 + 1];
                        node = stack[offset$2 + 2];
                        if ((childType = stack[offset$2 + 3]) === void 0 || (childType = void 0)) {
                            childType = stack[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                        }
                        childValue = stack[offset$2 + 4] || (stack[offset$2 + 4] = childType === SENTINEL ? node[VALUE] : node);
                        if ((isBranch = stack[offset$2 + 5]) === void 0) {
                            isBranch = stack[offset$2 + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                        }
                        if (isBranch === true) {
                            if ((keys$2 = stack[offset$2 + 6]) === void 0) {
                                keys$2 = stack[offset$2 + 6] = [];
                                index$3 = -1;
                                for (invKey in node) {
                                    !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys$2[++index$3] = invKey);
                                }
                            }
                            index$3 = stack[offset$2 + 7] || (stack[offset$2 + 7] = 0);
                            if (index$3 < keys$2.length) {
                                stack[offset$2 + 7] = index$3 + 1;
                                stack[offset$2 = ++depth$2 * 8] = node;
                                stack[offset$2 + 1] = invKey = keys$2[index$3];
                                stack[offset$2 + 2] = node[invKey];
                                continue;
                            }
                        }
                        var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                        if (ref$3 && Array.isArray(ref$3)) {
                            destination = ref$3[__CONTEXT];
                            if (destination) {
                                var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                while (++i$3 <= n) {
                                    destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                }
                                destination[__REFS_LENGTH] = n;
                                ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                            }
                        }
                        var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                        while (++i$4 < n$2) {
                            if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                            (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                            (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                            node === head && (root$2.__head = root$2.__next = head = next);
                            node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                            node.__next = node.__prev = void 0;
                            head = tail = next = prev = void 0;
                        }
                        nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                        delete stack[offset$2 + 0];
                        delete stack[offset$2 + 1];
                        delete stack[offset$2 + 2];
                        delete stack[offset$2 + 3];
                        delete stack[offset$2 + 4];
                        delete stack[offset$2 + 5];
                        delete stack[offset$2 + 6];
                        delete stack[offset$2 + 7];
                        --depth$2;
                    }
                    nodeParent = invParent;
                    node = invChild;
                }
                nodeParent[key] = node = newNode;
                node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                size_offset = leafSize - nodeSize;
                var node$2 = nodeParent, child = node, stack$2 = [];
                while (node = nodeParent) {
                    nodeParent = node[__PARENT];
                    if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                        var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                        if (ref$5 && Array.isArray(ref$5)) {
                            destination$2 = ref$5[__CONTEXT];
                            if (destination$2) {
                                var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                while (++i$5 <= n$3) {
                                    destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                }
                                destination$2[__REFS_LENGTH] = n$3;
                                ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                            }
                        }
                        var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                        while (++i$6 < n$4) {
                            if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                            }
                        }
                        node[__REFS_LENGTH] = void 0;
                        if (node != null && typeof node === 'object') {
                            var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                            (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                            (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                            node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                            node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                            node.__next = node.__prev = void 0;
                            head$2 = tail$2 = next$2 = prev$2 = void 0;
                        }
                        nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                    } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                        var depth$3 = 0, references, ref$7, i$7, k, n$5;
                        while (depth$3 > -1) {
                            if ((references = stack$2[depth$3]) === void 0) {
                                i$7 = k = -1;
                                n$5 = node[__REFS_LENGTH] || 0;
                                node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                node[__GENERATION] = __GENERATION_GUID++;
                                if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    stack$2[depth$3] = references = new Array(n$5 + 1);
                                    references[++k] = ref$7;
                                } else if (n$5 > 0) {
                                    stack$2[depth$3] = references = new Array(n$5);
                                }
                                while (++i$7 < n$5) {
                                    if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                        references[++k] = ref$7;
                                    }
                                }
                            }
                            if ((node = references && references.pop()) !== void 0) {
                                ++depth$3;
                            } else {
                                stack$2[depth$3--] = void 0;
                            }
                        }
                    }
                }
                nodeParent = node$2;
                node = child;
                if (node != null && typeof node === 'object') {
                    if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    } else {
                        if (nodeExpires !== 1) {
                            var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3 = node.__next, prev$3 = node.__prev;
                            if (node !== head$3) {
                                next$3 && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                prev$3 && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                (next$3 = head$3) && (head$3 != null && typeof head$3 === 'object') && (head$3.__prev = node);
                                root$4.__head = root$4.__next = head$3 = node;
                                head$3.__next = next$3;
                                head$3.__prev = void 0;
                            }
                            if (tail$3 == null || node === tail$3) {
                                root$4.__tail = root$4.__prev = tail$3 = prev$3 || node;
                            }
                            root$4 = head$3 = tail$3 = next$3 = prev$3 = void 0;
                        }
                    }
                }
                node = node;
            } else {
                nodeParent = node = nodes[depth - 1];
                depth = depth;
                follow_path_map_17150:
                    do {
                        if ((pathMap = pathMapStack[offset = depth * 4]) != null && typeof pathMap === 'object' && (keys = pathMapStack[offset + 1] || (pathMapStack[offset + 1] = Object.keys(pathMap))) && ((index$2 = pathMapStack[offset + 2] || (pathMapStack[offset + 2] = 0)) || true) && ((key = pathMapStack[offset + 3]) || true) && ((isKeySet = keys.length > 1) || keys.length > 0)) {
                            key = keys[index$2];
                            if (key == __NULL) {
                                pathMapStack[offset = 3 * (depth + 1)] = pathMap[__NULL];
                                pathMapStack[offset + 1] = keys;
                                pathMapStack[offset + 2] = 0;
                                nodeParent = nodes[depth] = node;
                                depth = depth + 1;
                                continue follow_path_map_17150;
                            } else if (key === $SIZE || (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT))) {
                                nodeParent = node;
                                break follow_path_map_17150;
                            } else if (!(key[0] !== '_' || key[1] !== '_') || (key === __SELF || key === __PARENT || key === __ROOT) || key[0] === '$') {
                                nodeParent[key] || (nodeParent[key] = pathMap[key]);
                                nodeParent = node;
                                break follow_path_map_17150;
                            } else {
                                depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                                pathMapStack[offset = 4 * (depth + 1)] = pathMap = pathMap[key];
                                if (pathMap != null && typeof pathMap === 'object' && pathMap[$TYPE] === void 0 && Array.isArray(pathMap) === false && (keys = Object.keys(pathMap)) && keys.length > 0) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                        nodeType = void 0;
                                        nodeValue = Object.create(null);
                                        nodeSize = node && node[$SIZE] || 0;
                                        if (node != null && node !== nodeValue) {
                                            var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = nodeValue[__REFS_LENGTH] || 0, i$8 = -1, ref$8;
                                            while (++i$8 < nodeRefsLength$2) {
                                                if ((ref$8 = node[__REF + i$8]) !== void 0) {
                                                    ref$8[__CONTEXT] = nodeValue;
                                                    nodeValue[__REF + (destRefsLength$2 + i$8)] = ref$8;
                                                    node[__REF + i$8] = void 0;
                                                }
                                            }
                                            nodeValue[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                            node[__REFS_LENGTH] = ref$8 = void 0;
                                            var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$4, offset$3, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                    nodeParent,
                                                    invKey$2,
                                                    node
                                                ], depth$4 = 0;
                                            while (depth$4 > -1) {
                                                nodeParent = stack$3[offset$3 = depth$4 * 8];
                                                invKey$2 = stack$3[offset$3 + 1];
                                                node = stack$3[offset$3 + 2];
                                                if ((childType$2 = stack$3[offset$3 + 3]) === void 0 || (childType$2 = void 0)) {
                                                    childType$2 = stack$3[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$2 = stack$3[offset$3 + 4] || (stack$3[offset$3 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$2 = stack$3[offset$3 + 5]) === void 0) {
                                                    isBranch$2 = stack$3[offset$3 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                }
                                                if (isBranch$2 === true) {
                                                    if ((keys$3 = stack$3[offset$3 + 6]) === void 0) {
                                                        keys$3 = stack$3[offset$3 + 6] = [];
                                                        index$4 = -1;
                                                        for (invKey$2 in node) {
                                                            !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$3[++index$4] = invKey$2);
                                                        }
                                                    }
                                                    index$4 = stack$3[offset$3 + 7] || (stack$3[offset$3 + 7] = 0);
                                                    if (index$4 < keys$3.length) {
                                                        stack$3[offset$3 + 7] = index$4 + 1;
                                                        stack$3[offset$3 = ++depth$4 * 8] = node;
                                                        stack$3[offset$3 + 1] = invKey$2 = keys$3[index$4];
                                                        stack$3[offset$3 + 2] = node[invKey$2];
                                                        continue;
                                                    }
                                                }
                                                var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                if (ref$9 && Array.isArray(ref$9)) {
                                                    destination$3 = ref$9[__CONTEXT];
                                                    if (destination$3) {
                                                        var i$9 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$9 <= n$6) {
                                                            destination$3[__REF + i$9] = destination$3[__REF + (i$9 + 1)];
                                                        }
                                                        destination$3[__REFS_LENGTH] = n$6;
                                                        ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                    }
                                                }
                                                var ref$10, i$10 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                                while (++i$10 < n$7) {
                                                    if ((ref$10 = node[__REF + i$10]) !== void 0) {
                                                        ref$10[__CONTEXT] = node[__REF + i$10] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                    (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                    (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                    node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                    node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                    node.__next = node.__prev = void 0;
                                                    head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                }
                                                nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                delete stack$3[offset$3 + 0];
                                                delete stack$3[offset$3 + 1];
                                                delete stack$3[offset$3 + 2];
                                                delete stack$3[offset$3 + 3];
                                                delete stack$3[offset$3 + 4];
                                                delete stack$3[offset$3 + 5];
                                                delete stack$3[offset$3 + 6];
                                                delete stack$3[offset$3 + 7];
                                                --depth$4;
                                            }
                                            nodeParent = invParent$2;
                                            node = invChild$2;
                                        }
                                        nodeParent[key] = node = nodeValue;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                if (ref$11 && Array.isArray(ref$11)) {
                                                    destination$4 = ref$11[__CONTEXT];
                                                    if (destination$4) {
                                                        var i$11 = (ref$11[__REF_INDEX] || 0) - 1, n$8 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$11 <= n$8) {
                                                            destination$4[__REF + i$11] = destination$4[__REF + (i$11 + 1)];
                                                        }
                                                        destination$4[__REFS_LENGTH] = n$8;
                                                        ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                    }
                                                }
                                                var ref$12, i$12 = -1, n$9 = node[__REFS_LENGTH] || 0;
                                                while (++i$12 < n$9) {
                                                    if ((ref$12 = node[__REF + i$12]) !== void 0) {
                                                        ref$12[__CONTEXT] = node[__REF + i$12] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5, prev$5;
                                                    (next$5 = node.__next) && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                    (prev$5 = node.__prev) && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                    node === head$5 && (root$6.__head = root$6.__next = head$5 = next$5);
                                                    node === tail$5 && (root$6.__tail = root$6.__prev = tail$5 = prev$5);
                                                    node.__next = node.__prev = void 0;
                                                    head$5 = tail$5 = next$5 = prev$5 = void 0;
                                                }
                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var depth$5 = 0, references$2, ref$13, i$13, k$2, n$10;
                                                while (depth$5 > -1) {
                                                    if ((references$2 = stack$4[depth$5]) === void 0) {
                                                        i$13 = k$2 = -1;
                                                        n$10 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                        if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$4[depth$5] = references$2 = new Array(n$10 + 1);
                                                            references$2[++k$2] = ref$13;
                                                        } else if (n$10 > 0) {
                                                            stack$4[depth$5] = references$2 = new Array(n$10);
                                                        }
                                                        while (++i$13 < n$10) {
                                                            if ((ref$13 = node[__REF + i$13]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                references$2[++k$2] = ref$13;
                                                            }
                                                        }
                                                    }
                                                    if ((node = references$2 && references$2.pop()) !== void 0) {
                                                        ++depth$5;
                                                    } else {
                                                        stack$4[depth$5--] = void 0;
                                                    }
                                                }
                                            }
                                        }
                                        nodeParent = node$3;
                                        node = child$2;
                                    }
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        do {
                                            if (nodeExpires !== 1) {
                                                var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6 = node.__next, prev$6 = node.__prev;
                                                if (node !== head$6) {
                                                    next$6 && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                    prev$6 && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                    (next$6 = head$6) && (head$6 != null && typeof head$6 === 'object') && (head$6.__prev = node);
                                                    root$7.__head = root$7.__next = head$6 = node;
                                                    head$6.__next = next$6;
                                                    head$6.__prev = void 0;
                                                }
                                                if (tail$6 == null || node === tail$6) {
                                                    root$7.__tail = root$7.__prev = tail$6 = prev$6 || node;
                                                }
                                                root$7 = head$6 = tail$6 = next$6 = prev$6 = void 0;
                                            }
                                            refs[depth] = nodeValue;
                                            refIndex = depth + 1;
                                            refDepth = 0;
                                            var location = (nodeValue[__CONTAINER] || nodeValue)[__CONTEXT];
                                            if (location !== void 0) {
                                                node = location;
                                                refHeight = (refLength = nodeValue.length) - 1;
                                                while (refDepth < refLength) {
                                                    optimizedPath[refDepth] = nodeValue[refDepth++];
                                                }
                                                optimizedPath.length = refLength;
                                            } else {
                                                var key$2, isKeySet$2;
                                                reference = nodeValue;
                                                refHeight = (refLength = reference.length) - 1;
                                                nodeParent = nodeRoot;
                                                nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                                nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                                if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                    node = node = nodeParent;
                                                } else {
                                                    nodeParent = nodeRoot;
                                                    refDepth = refDepth;
                                                    follow_path_17543:
                                                        do {
                                                            key$2 = reference[refDepth];
                                                            isKeySet$2 = false;
                                                            if (key$2 != null) {
                                                                if (refDepth < refHeight) {
                                                                    optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                    node = nodeParent[key$2];
                                                                    nodeType = node && node[$TYPE] || void 0;
                                                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                    nodeTimestamp = node && node[$TIMESTAMP];
                                                                    nodeExpires = node && node[$EXPIRES];
                                                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                    }
                                                                    if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                        nodeType = void 0;
                                                                        nodeValue = Object.create(null);
                                                                        nodeSize = node && node[$SIZE] || 0;
                                                                        if (node != null && node !== nodeValue) {
                                                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = nodeValue[__REFS_LENGTH] || 0, i$14 = -1, ref$14;
                                                                            while (++i$14 < nodeRefsLength$3) {
                                                                                if ((ref$14 = node[__REF + i$14]) !== void 0) {
                                                                                    ref$14[__CONTEXT] = nodeValue;
                                                                                    nodeValue[__REF + (destRefsLength$3 + i$14)] = ref$14;
                                                                                    node[__REF + i$14] = void 0;
                                                                                }
                                                                            }
                                                                            nodeValue[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$4, index$5, offset$4, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                    nodeParent,
                                                                                    invKey$3,
                                                                                    node
                                                                                ], depth$6 = 0;
                                                                            while (depth$6 > -1) {
                                                                                nodeParent = stack$5[offset$4 = depth$6 * 8];
                                                                                invKey$3 = stack$5[offset$4 + 1];
                                                                                node = stack$5[offset$4 + 2];
                                                                                if ((childType$3 = stack$5[offset$4 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                    childType$3 = stack$5[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$3 = stack$5[offset$4 + 4] || (stack$5[offset$4 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$3 = stack$5[offset$4 + 5]) === void 0) {
                                                                                    isBranch$3 = stack$5[offset$4 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                                }
                                                                                if (isBranch$3 === true) {
                                                                                    if ((keys$4 = stack$5[offset$4 + 6]) === void 0) {
                                                                                        keys$4 = stack$5[offset$4 + 6] = [];
                                                                                        index$5 = -1;
                                                                                        for (invKey$3 in node) {
                                                                                            !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$4[++index$5] = invKey$3);
                                                                                        }
                                                                                    }
                                                                                    index$5 = stack$5[offset$4 + 7] || (stack$5[offset$4 + 7] = 0);
                                                                                    if (index$5 < keys$4.length) {
                                                                                        stack$5[offset$4 + 7] = index$5 + 1;
                                                                                        stack$5[offset$4 = ++depth$6 * 8] = node;
                                                                                        stack$5[offset$4 + 1] = invKey$3 = keys$4[index$5];
                                                                                        stack$5[offset$4 + 2] = node[invKey$3];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                                if (ref$15 && Array.isArray(ref$15)) {
                                                                                    destination$5 = ref$15[__CONTEXT];
                                                                                    if (destination$5) {
                                                                                        var i$15 = (ref$15[__REF_INDEX] || 0) - 1, n$11 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$15 <= n$11) {
                                                                                            destination$5[__REF + i$15] = destination$5[__REF + (i$15 + 1)];
                                                                                        }
                                                                                        destination$5[__REFS_LENGTH] = n$11;
                                                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$16, i$16 = -1, n$12 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$16 < n$12) {
                                                                                    if ((ref$16 = node[__REF + i$16]) !== void 0) {
                                                                                        ref$16[__CONTEXT] = node[__REF + i$16] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                    (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                    (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                    node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                    node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                                }
                                                                                nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$5[offset$4 + 0];
                                                                                delete stack$5[offset$4 + 1];
                                                                                delete stack$5[offset$4 + 2];
                                                                                delete stack$5[offset$4 + 3];
                                                                                delete stack$5[offset$4 + 4];
                                                                                delete stack$5[offset$4 + 5];
                                                                                delete stack$5[offset$4 + 6];
                                                                                delete stack$5[offset$4 + 7];
                                                                                --depth$6;
                                                                            }
                                                                            nodeParent = invParent$3;
                                                                            node = invChild$3;
                                                                        }
                                                                        nodeParent[key$2] = node = nodeValue;
                                                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                        var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                                if (ref$17 && Array.isArray(ref$17)) {
                                                                                    destination$6 = ref$17[__CONTEXT];
                                                                                    if (destination$6) {
                                                                                        var i$17 = (ref$17[__REF_INDEX] || 0) - 1, n$13 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$17 <= n$13) {
                                                                                            destination$6[__REF + i$17] = destination$6[__REF + (i$17 + 1)];
                                                                                        }
                                                                                        destination$6[__REFS_LENGTH] = n$13;
                                                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$18, i$18 = -1, n$14 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$18 < n$14) {
                                                                                    if ((ref$18 = node[__REF + i$18]) !== void 0) {
                                                                                        ref$18[__CONTEXT] = node[__REF + i$18] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                    (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                    (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                    node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                    node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$7 = 0, references$3, ref$19, i$19, k$3, n$15;
                                                                                while (depth$7 > -1) {
                                                                                    if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                        i$19 = k$3 = -1;
                                                                                        n$15 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$15 + 1);
                                                                                            references$3[++k$3] = ref$19;
                                                                                        } else if (n$15 > 0) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$15);
                                                                                        }
                                                                                        while (++i$19 < n$15) {
                                                                                            if ((ref$19 = node[__REF + i$19]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$3[++k$3] = ref$19;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                        ++depth$7;
                                                                                    } else {
                                                                                        stack$6[depth$7--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$4;
                                                                        node = child$3;
                                                                    }
                                                                    if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                        nodeParent = node;
                                                                        break follow_path_17543;
                                                                    }
                                                                    nodeParent = node;
                                                                    refDepth = refDepth + 1;
                                                                    continue follow_path_17543;
                                                                } else if (refDepth === refHeight) {
                                                                    optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                    node = nodeParent[key$2];
                                                                    nodeType = node && node[$TYPE] || void 0;
                                                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                    nodeTimestamp = node && node[$TIMESTAMP];
                                                                    nodeExpires = node && node[$EXPIRES];
                                                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                    }
                                                                    if (typeof node !== 'object' || !!nodeType && nodeType !== SENTINEL && !Array.isArray(nodeValue)) {
                                                                        nodeType = void 0;
                                                                        nodeValue = Object.create(null);
                                                                        nodeSize = node && node[$SIZE] || 0;
                                                                        if (node != null && node !== nodeValue) {
                                                                            var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = nodeValue[__REFS_LENGTH] || 0, i$20 = -1, ref$20;
                                                                            while (++i$20 < nodeRefsLength$4) {
                                                                                if ((ref$20 = node[__REF + i$20]) !== void 0) {
                                                                                    ref$20[__CONTEXT] = nodeValue;
                                                                                    nodeValue[__REF + (destRefsLength$4 + i$20)] = ref$20;
                                                                                    node[__REF + i$20] = void 0;
                                                                                }
                                                                            }
                                                                            nodeValue[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                            node[__REFS_LENGTH] = ref$20 = void 0;
                                                                            var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$5, index$6, offset$5, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                    nodeParent,
                                                                                    invKey$4,
                                                                                    node
                                                                                ], depth$8 = 0;
                                                                            while (depth$8 > -1) {
                                                                                nodeParent = stack$7[offset$5 = depth$8 * 8];
                                                                                invKey$4 = stack$7[offset$5 + 1];
                                                                                node = stack$7[offset$5 + 2];
                                                                                if ((childType$4 = stack$7[offset$5 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                    childType$4 = stack$7[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$4 = stack$7[offset$5 + 4] || (stack$7[offset$5 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$4 = stack$7[offset$5 + 5]) === void 0) {
                                                                                    isBranch$4 = stack$7[offset$5 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                                }
                                                                                if (isBranch$4 === true) {
                                                                                    if ((keys$5 = stack$7[offset$5 + 6]) === void 0) {
                                                                                        keys$5 = stack$7[offset$5 + 6] = [];
                                                                                        index$6 = -1;
                                                                                        for (invKey$4 in node) {
                                                                                            !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$5[++index$6] = invKey$4);
                                                                                        }
                                                                                    }
                                                                                    index$6 = stack$7[offset$5 + 7] || (stack$7[offset$5 + 7] = 0);
                                                                                    if (index$6 < keys$5.length) {
                                                                                        stack$7[offset$5 + 7] = index$6 + 1;
                                                                                        stack$7[offset$5 = ++depth$8 * 8] = node;
                                                                                        stack$7[offset$5 + 1] = invKey$4 = keys$5[index$6];
                                                                                        stack$7[offset$5 + 2] = node[invKey$4];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                                if (ref$21 && Array.isArray(ref$21)) {
                                                                                    destination$7 = ref$21[__CONTEXT];
                                                                                    if (destination$7) {
                                                                                        var i$21 = (ref$21[__REF_INDEX] || 0) - 1, n$16 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$21 <= n$16) {
                                                                                            destination$7[__REF + i$21] = destination$7[__REF + (i$21 + 1)];
                                                                                        }
                                                                                        destination$7[__REFS_LENGTH] = n$16;
                                                                                        ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$22, i$22 = -1, n$17 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$22 < n$17) {
                                                                                    if ((ref$22 = node[__REF + i$22]) !== void 0) {
                                                                                        ref$22[__CONTEXT] = node[__REF + i$22] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                    (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                    (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                    node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                    node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                                }
                                                                                nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$7[offset$5 + 0];
                                                                                delete stack$7[offset$5 + 1];
                                                                                delete stack$7[offset$5 + 2];
                                                                                delete stack$7[offset$5 + 3];
                                                                                delete stack$7[offset$5 + 4];
                                                                                delete stack$7[offset$5 + 5];
                                                                                delete stack$7[offset$5 + 6];
                                                                                delete stack$7[offset$5 + 7];
                                                                                --depth$8;
                                                                            }
                                                                            nodeParent = invParent$4;
                                                                            node = invChild$4;
                                                                        }
                                                                        nodeParent[key$2] = node = nodeValue;
                                                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                                                        var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - nodeSize) <= 0 && false && nodeParent) {
                                                                                var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                                if (ref$23 && Array.isArray(ref$23)) {
                                                                                    destination$8 = ref$23[__CONTEXT];
                                                                                    if (destination$8) {
                                                                                        var i$23 = (ref$23[__REF_INDEX] || 0) - 1, n$18 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$23 <= n$18) {
                                                                                            destination$8[__REF + i$23] = destination$8[__REF + (i$23 + 1)];
                                                                                        }
                                                                                        destination$8[__REFS_LENGTH] = n$18;
                                                                                        ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$24, i$24 = -1, n$19 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$24 < n$19) {
                                                                                    if ((ref$24 = node[__REF + i$24]) !== void 0) {
                                                                                        ref$24[__CONTEXT] = node[__REF + i$24] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                                                    (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                                                    (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                                                    node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                                                    node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$9 = 0, references$4, ref$25, i$25, k$4, n$20;
                                                                                while (depth$9 > -1) {
                                                                                    if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                        i$25 = k$4 = -1;
                                                                                        n$20 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$20 + 1);
                                                                                            references$4[++k$4] = ref$25;
                                                                                        } else if (n$20 > 0) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$20);
                                                                                        }
                                                                                        while (++i$25 < n$20) {
                                                                                            if ((ref$25 = node[__REF + i$25]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$4[++k$4] = ref$25;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                        ++depth$9;
                                                                                    } else {
                                                                                        stack$8[depth$9--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$5;
                                                                        node = child$4;
                                                                    }
                                                                    if (node != null) {
                                                                        var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                        // Set up the hard-link so we don't have to do all
                                                                        // this work the next time we follow this reference.
                                                                        if (refContext === void 0) {
                                                                            // create a back reference
                                                                            var backRefs = node[__REFS_LENGTH] || 0;
                                                                            node[__REF + backRefs] = refContainer;
                                                                            node[__REFS_LENGTH] = backRefs + 1;
                                                                            // create a hard reference
                                                                            refContainer[__REF_INDEX] = backRefs;
                                                                            refContainer[__CONTEXT] = node;
                                                                            refContainer = backRefs = void 0;
                                                                        }
                                                                        ;
                                                                    }
                                                                    appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                    nodeParent = node;
                                                                    break follow_path_17543;
                                                                }
                                                            } else if (refDepth < refHeight) {
                                                                nodeParent = node;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_17543;
                                                            }
                                                            nodeParent = node;
                                                            break follow_path_17543;
                                                        } while (true);
                                                    node = nodeParent;
                                                }
                                            }
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeExpires = node && node[$EXPIRES];
                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                        } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                        if (node == null) {
                                            while (refDepth <= refHeight) {
                                                optimizedPath[refDepth] = reference[refDepth++];
                                            }
                                        }
                                    }
                                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                        nodeParent = node;
                                        break follow_path_map_17150;
                                    }
                                    pathMapStack[offset + 1] = keys;
                                    pathMapStack[offset + 3] = key;
                                    nodeParent = nodes[depth] = node;
                                    depth = depth + 1;
                                    continue follow_path_map_17150;
                                }
                            }
                        }
                        if (key != null) {
                            optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                            node = nodeParent[key];
                            nodeType = node && node[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                            nodeTimestamp = node && node[$TIMESTAMP];
                            nodeExpires = node && node[$EXPIRES];
                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                            }
                            nodeType = pathMap && pathMap[$TYPE] || void 0;
                            nodeValue = nodeType === SENTINEL ? pathMap[VALUE] : pathMap;
                            nodeTimestamp = pathMap && pathMap[$TIMESTAMP];
                            nodeExpires = pathMap && pathMap[$EXPIRES];
                            var newNode$2, size_offset$2, leafSize$2 = node && node[$SIZE] || 0;
                            newNode$2 = pathMap;
                            if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                nodeType = 'array';
                                newNode$2[$SIZE] = nodeSize = (nodeType === SENTINEL && 50 || 0) + (nodeValue.length || 1);
                                delete nodeValue[$SIZE];
                                nodeValue[__CONTAINER] = newNode$2;
                            } else if (nodeType === SENTINEL) {
                                newNode$2[$SIZE] = nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                            } else if (nodeType === ERROR) {
                                newNode$2[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                            } else if (!(pathMap != null && typeof pathMap === 'object')) {
                                nodeSize = 50 + (typeof nodeValue === 'string' && nodeValue.length || 1);
                                nodeType = 'sentinel';
                                newNode$2 = { 'value': nodeValue };
                                newNode$2[$TYPE] = nodeType;
                                newNode$2[$SIZE] = nodeSize;
                            } else {
                                nodeType = newNode$2[$TYPE] = nodeType || 'leaf';
                                newNode$2[$SIZE] = nodeSize = pathMap && pathMap[$SIZE] || 0 || 50 + 1;
                            }
                            ;
                            if (node != null && node !== newNode$2) {
                                var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = newNode$2[__REFS_LENGTH] || 0, i$26 = -1, ref$26;
                                while (++i$26 < nodeRefsLength$5) {
                                    if ((ref$26 = node[__REF + i$26]) !== void 0) {
                                        ref$26[__CONTEXT] = newNode$2;
                                        newNode$2[__REF + (destRefsLength$5 + i$26)] = ref$26;
                                        node[__REF + i$26] = void 0;
                                    }
                                }
                                newNode$2[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                node[__REFS_LENGTH] = ref$26 = void 0;
                                var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$6, index$7, offset$6, childType$5, childValue$5, isBranch$5, stack$9 = [
                                        nodeParent,
                                        invKey$5,
                                        node
                                    ], depth$10 = 0;
                                while (depth$10 > -1) {
                                    nodeParent = stack$9[offset$6 = depth$10 * 8];
                                    invKey$5 = stack$9[offset$6 + 1];
                                    node = stack$9[offset$6 + 2];
                                    if ((childType$5 = stack$9[offset$6 + 3]) === void 0 || (childType$5 = void 0)) {
                                        childType$5 = stack$9[offset$6 + 3] = node && node[$TYPE] || void 0 || null;
                                    }
                                    childValue$5 = stack$9[offset$6 + 4] || (stack$9[offset$6 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                    if ((isBranch$5 = stack$9[offset$6 + 5]) === void 0) {
                                        isBranch$5 = stack$9[offset$6 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                    }
                                    if (isBranch$5 === true) {
                                        if ((keys$6 = stack$9[offset$6 + 6]) === void 0) {
                                            keys$6 = stack$9[offset$6 + 6] = [];
                                            index$7 = -1;
                                            for (invKey$5 in node) {
                                                !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$6[++index$7] = invKey$5);
                                            }
                                        }
                                        index$7 = stack$9[offset$6 + 7] || (stack$9[offset$6 + 7] = 0);
                                        if (index$7 < keys$6.length) {
                                            stack$9[offset$6 + 7] = index$7 + 1;
                                            stack$9[offset$6 = ++depth$10 * 8] = node;
                                            stack$9[offset$6 + 1] = invKey$5 = keys$6[index$7];
                                            stack$9[offset$6 + 2] = node[invKey$5];
                                            continue;
                                        }
                                    }
                                    var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                    if (ref$27 && Array.isArray(ref$27)) {
                                        destination$9 = ref$27[__CONTEXT];
                                        if (destination$9) {
                                            var i$27 = (ref$27[__REF_INDEX] || 0) - 1, n$21 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                            while (++i$27 <= n$21) {
                                                destination$9[__REF + i$27] = destination$9[__REF + (i$27 + 1)];
                                            }
                                            destination$9[__REFS_LENGTH] = n$21;
                                            ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                        }
                                    }
                                    var ref$28, i$28 = -1, n$22 = node[__REFS_LENGTH] || 0;
                                    while (++i$28 < n$22) {
                                        if ((ref$28 = node[__REF + i$28]) !== void 0) {
                                            ref$28[__CONTEXT] = node[__REF + i$28] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    if (node != null && typeof node === 'object') {
                                        var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                        (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                        (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                        node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                        node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                        node.__next = node.__prev = void 0;
                                        head$11 = tail$11 = next$11 = prev$11 = void 0;
                                    }
                                    nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                    delete stack$9[offset$6 + 0];
                                    delete stack$9[offset$6 + 1];
                                    delete stack$9[offset$6 + 2];
                                    delete stack$9[offset$6 + 3];
                                    delete stack$9[offset$6 + 4];
                                    delete stack$9[offset$6 + 5];
                                    delete stack$9[offset$6 + 6];
                                    delete stack$9[offset$6 + 7];
                                    --depth$10;
                                }
                                nodeParent = invParent$5;
                                node = invChild$5;
                            }
                            nodeParent[key] = node = newNode$2;
                            node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                            size_offset$2 = leafSize$2 - nodeSize;
                            var node$6 = nodeParent, child$5 = node, stack$10 = [];
                            while (node = nodeParent) {
                                nodeParent = node[__PARENT];
                                if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                    var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                    if (ref$29 && Array.isArray(ref$29)) {
                                        destination$10 = ref$29[__CONTEXT];
                                        if (destination$10) {
                                            var i$29 = (ref$29[__REF_INDEX] || 0) - 1, n$23 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                            while (++i$29 <= n$23) {
                                                destination$10[__REF + i$29] = destination$10[__REF + (i$29 + 1)];
                                            }
                                            destination$10[__REFS_LENGTH] = n$23;
                                            ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                        }
                                    }
                                    var ref$30, i$30 = -1, n$24 = node[__REFS_LENGTH] || 0;
                                    while (++i$30 < n$24) {
                                        if ((ref$30 = node[__REF + i$30]) !== void 0) {
                                            ref$30[__CONTEXT] = node[__REF + i$30] = void 0;
                                        }
                                    }
                                    node[__REFS_LENGTH] = void 0;
                                    if (node != null && typeof node === 'object') {
                                        var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12, prev$12;
                                        (next$12 = node.__next) && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                        (prev$12 = node.__prev) && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                        node === head$12 && (root$13.__head = root$13.__next = head$12 = next$12);
                                        node === tail$12 && (root$13.__tail = root$13.__prev = tail$12 = prev$12);
                                        node.__next = node.__prev = void 0;
                                        head$12 = tail$12 = next$12 = prev$12 = void 0;
                                    }
                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                    var depth$11 = 0, references$5, ref$31, i$31, k$5, n$25;
                                    while (depth$11 > -1) {
                                        if ((references$5 = stack$10[depth$11]) === void 0) {
                                            i$31 = k$5 = -1;
                                            n$25 = node[__REFS_LENGTH] || 0;
                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                            node[__GENERATION] = __GENERATION_GUID++;
                                            if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                stack$10[depth$11] = references$5 = new Array(n$25 + 1);
                                                references$5[++k$5] = ref$31;
                                            } else if (n$25 > 0) {
                                                stack$10[depth$11] = references$5 = new Array(n$25);
                                            }
                                            while (++i$31 < n$25) {
                                                if ((ref$31 = node[__REF + i$31]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    references$5[++k$5] = ref$31;
                                                }
                                            }
                                        }
                                        if ((node = references$5 && references$5.pop()) !== void 0) {
                                            ++depth$11;
                                        } else {
                                            stack$10[depth$11--] = void 0;
                                        }
                                    }
                                }
                            }
                            nodeParent = node$6;
                            node = child$5;
                            if (node != null && typeof node === 'object') {
                                if (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true) {
                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                } else {
                                    if (nodeExpires !== 1) {
                                        var root$14 = root, head$13 = root$14.__head, tail$13 = root$14.__tail, next$13 = node.__next, prev$13 = node.__prev;
                                        if (node !== head$13) {
                                            next$13 && (next$13 != null && typeof next$13 === 'object') && (next$13.__prev = prev$13);
                                            prev$13 && (prev$13 != null && typeof prev$13 === 'object') && (prev$13.__next = next$13);
                                            (next$13 = head$13) && (head$13 != null && typeof head$13 === 'object') && (head$13.__prev = node);
                                            root$14.__head = root$14.__next = head$13 = node;
                                            head$13.__next = next$13;
                                            head$13.__prev = void 0;
                                        }
                                        if (tail$13 == null || node === tail$13) {
                                            root$14.__tail = root$14.__prev = tail$13 = prev$13 || node;
                                        }
                                        root$14 = head$13 = tail$13 = next$13 = prev$13 = void 0;
                                    }
                                }
                            }
                            appendNullKey = false;
                        }
                        nodeParent = node;
                        break follow_path_map_17150;
                    } while (true);
                node = nodeParent;
            }
            if (node != null || boxed === true) {
                if (nodeType === ERROR) {
                    if (nodeExpires !== 1) {
                        var root$15 = root, head$14 = root$15.__head, tail$14 = root$15.__tail, next$14 = node.__next, prev$14 = node.__prev;
                        if (node !== head$14) {
                            next$14 && (next$14 != null && typeof next$14 === 'object') && (next$14.__prev = prev$14);
                            prev$14 && (prev$14 != null && typeof prev$14 === 'object') && (prev$14.__next = next$14);
                            (next$14 = head$14) && (head$14 != null && typeof head$14 === 'object') && (head$14.__prev = node);
                            root$15.__head = root$15.__next = head$14 = node;
                            head$14.__next = next$14;
                            head$14.__prev = void 0;
                        }
                        if (tail$14 == null || node === tail$14) {
                            root$15.__tail = root$15.__prev = tail$14 = prev$14 || node;
                        }
                        root$15 = head$14 = tail$14 = next$14 = prev$14 = void 0;
                    }
                    var nodeType$2 = node && node[$TYPE] || void 0;
                    nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                    var pbv = Object.create(null);
                    var src = requestedPath, i$32 = -1, n$26 = src.length, req = new Array(n$26);
                    while (++i$32 < n$26) {
                        req[i$32] = src[i$32];
                    }
                    if (appendNullKey === true) {
                        req[req.length] = null;
                    }
                    pbv.path = req;
                    if (boxed === true) {
                        pbv.value = node;
                    } else {
                        var dest = nodeValue, src$2 = dest, x;
                        if (dest != null && typeof dest === 'object') {
                            dest = Array.isArray(src$2) && [] || Object.create(null);
                            for (x in src$2) {
                                !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src$2[x]);
                            }
                        }
                        pbv.value = dest;
                    }
                    errors[errors.length] = pbv;
                }
                var src$3 = optimizedPath, i$33 = -1, n$27 = src$3.length, opt = new Array(n$27);
                while (++i$33 < n$27) {
                    opt[i$33] = src$3[i$33];
                }
                var src$4 = requestedPath, i$34 = -1, n$28 = src$4.length, req$2 = new Array(n$28);
                while (++i$34 < n$28) {
                    req$2[i$34] = src$4[i$34];
                }
                if (appendNullKey === true) {
                    req$2[req$2.length] = null;
                }
                requestedPaths[requestedPaths.length] = req$2;
                optimizedPaths[optimizedPaths.length] = opt;
                if (values != null) {
                    var pbv$2 = Object.create(null);
                    var src$5 = requestedPath, i$35 = -1, n$29 = src$5.length, req$3 = new Array(n$29);
                    while (++i$35 < n$29) {
                        req$3[i$35] = src$5[i$35];
                    }
                    if (appendNullKey === true) {
                        req$3[req$3.length] = null;
                    }
                    pbv$2.path = req$3;
                    if (boxed === true) {
                        pbv$2.value = node;
                    } else {
                        var dest$2 = nodeValue, src$6 = dest$2, x$2;
                        if (dest$2 != null && typeof dest$2 === 'object') {
                            dest$2 = Array.isArray(src$6) && [] || Object.create(null);
                            for (x$2 in src$6) {
                                !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT) || x$2[0] === '$') && (dest$2[x$2] = src$6[x$2]);
                            }
                        }
                        pbv$2.value = dest$2;
                    }
                    typeof values === 'function' && (values(pbv$2) || true) || Array.isArray(values) && (values[values.length] = pbv$2);
                }
            }
            if (boxed === false && node == null || refreshing === true) {
                var src$7 = boundPath, i$36 = -1, n$30 = src$7.length, req$4 = new Array(n$30);
                while (++i$36 < n$30) {
                    req$4[i$36] = src$7[i$36];
                }
                var src$8 = optimizedPath, i$37 = -1, n$31 = src$8.length, opt$2 = new Array(n$31);
                while (++i$37 < n$31) {
                    opt$2[i$37] = src$8[i$37];
                }
                var reqLen = req$4.length - 1, optLen = opt$2.length - 1, i$38 = -1, n$32 = requestedPath.length, map, offset$7, keys$7, index$8, reqKeys, optKeys, optKeysLen, x$3, y, z;
                while (++i$38 < n$32) {
                    req$4[++reqLen] = (reqKeys = pathMapStack[offset$7 = (i$38 + boundLength) * 4 + 1]) && reqKeys.length > 1 && [requestedPath[i$38]] || requestedPath[i$38];
                }
                var j$2 = depth, k$6 = reqLen, l = optLen;
                i$38 = j$2++;
                while (j$2 > i$38) {
                    if ((map = pathMapStack[offset$7 = (j$2 + boundLength) * 4]) != null && typeof map === 'object' && map[$TYPE] === void 0 && Array.isArray(map) === false && (keys$7 = pathMapStack[offset$7 + 1] || (pathMapStack[offset$7 + 1] = Object.keys(map))) && ((index$8 = pathMapStack[offset$7 + 2] || (pathMapStack[offset$7 + 2] = 0)) || true) && keys$7.length > 0) {
                        if ((pathMapStack[offset$7 + 2] = ++index$8) - 1 < keys$7.length) {
                            if (reqLen - k$6 < j$2 - i$38) {
                                var src$9 = keys$7, i$39 = -1, n$33 = src$9.length, dest$3 = new Array(n$33);
                                while (++i$39 < n$33) {
                                    dest$3[i$39] = src$9[i$39];
                                }
                                reqKeys = dest$3;
                                x$3 = -1;
                                y = reqKeys.length;
                                while (++x$3 < y) {
                                    reqKeys[x$3] = (z = reqKeys[x$3]) == __NULL ? null : z;
                                }
                                req$4[++reqLen] = y === 1 ? reqKeys[0] : reqKeys;
                            }
                            if (optLen - l < j$2 - i$38) {
                                var src$10 = keys$7, i$40 = -1, n$34 = src$10.length, dest$4 = new Array(n$34);
                                while (++i$40 < n$34) {
                                    dest$4[i$40] = src$10[i$40];
                                }
                                reqKeys = dest$4;
                                optKeys = [];
                                optKeysLen = 0;
                                x$3 = -1;
                                y = reqKeys.length;
                                while (++x$3 < y) {
                                    (z = reqKeys[x$3]) !== __NULL && (optKeys[optKeysLen++] = z);
                                }
                                if (optKeysLen > 0) {
                                    opt$2[++optLen] = optKeysLen === 1 ? optKeys[0] : optKeys;
                                }
                            }
                            pathMapStack[offset$7 = 4 * (++j$2 + boundLength)] = map[keys$7[index$8 - 1]];
                            continue;
                        }
                    }
                    delete pathMapStack[offset$7 = 4 * (j$2-- + boundLength)];
                    delete pathMapStack[offset$7 + 1];
                    delete pathMapStack[offset$7 + 2];
                    delete pathMapStack[offset$7 + 3];
                }
                req$4.pathSetIndex = index;
                requestedMissingPaths[requestedMissingPaths.length] = req$4;
                optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
            }
            appendNullKey = false;
            var offset$8, keys$8, index$9;
            while (depth > -1 && (keys$8 = pathMapStack[(offset$8 = 4 * depth) + 1]) && ((index$9 = pathMapStack[offset$8 + 2]) || true) && (pathMapStack[offset$8 + 2] = ++index$9) >= keys$8.length) {
                delete pathMapStack[offset$8 + 0];
                delete pathMapStack[offset$8 + 1];
                delete pathMapStack[offset$8 + 2];
                delete pathMapStack[offset$8 + 3];
                --depth;
            }
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGsAsJSON(model, envelopes, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var boundLength = 0, nodeRoot = model._cache || (model._cache = {}), nodeParent, node;
    if (Array.isArray(boundPath)) {
        nodeParent = nodeRoot;
        boundLength = boundPath.length;
    } else {
        nodeParent = getBoundContext(model);
        boundPath = model._path || [];
    }
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$4, y) {
        return y;
    });
    var jsonKeys = envelopes.jsonKeys || (envelopes.jsonKeys = []);
    var nodes = envelopes.nodes || (envelopes.nodes = []);
    var messages = envelopes.messages || (envelopes.messages = []);
    var jsons = envelopes.jsons || (envelopes.jsons = []);
    var errors = envelopes.errors || (envelopes.errors = []);
    var refs = envelopes.refs || (envelopes.refs = []);
    var depth = envelopes.depth || (envelopes.depth = 0);
    var refIndex = envelopes.refIndex || (envelopes.refIndex = 0);
    var refDepth = envelopes.refDepth || (envelopes.refDepth = 0);
    var requestedPath = envelopes.requestedPath || (envelopes.requestedPath = []);
    var optimizedPath = envelopes.optimizedPath || (envelopes.optimizedPath = []);
    var requestedPaths = envelopes.requestedPaths || (envelopes.requestedPaths = []);
    var optimizedPaths = envelopes.optimizedPaths || (envelopes.optimizedPaths = []);
    var requestedMissingPaths = envelopes.requestedMissingPaths || (envelopes.requestedMissingPaths = []);
    var optimizedMissingPaths = envelopes.optimizedMissingPaths || (envelopes.optimizedMissingPaths = []);
    var hasValue = envelopes.hasValue || (envelopes.hasValue = false);
    var jsonRoot = envelopes.jsonRoot || (envelopes.jsonRoot = values && values[0]);
    var jsonParent = envelopes.jsonParent || (envelopes.jsonParent = jsonRoot);
    var jsonNode = envelopes.jsonNode || (envelopes.jsonNode = jsonParent);
    var path, length = 0, height = 0, reference, refLength = 0, refHeight = 0, jsonValueOffset = 0, messageRoot, messageParent, message, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires, messageType, messageValue, messageSize, messageTimestamp, messageExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-1] = jsonParent;
    jsons[-2] = jsons;
    jsonKeys[-1] = -1;
    var envelope, pathSets, index = -1, count = envelopes.length;
    while (++index < count) {
        envelope = envelopes[index];
        pathSets = envelope.paths;
        messages[-1] = messageRoot = envelope.jsong || envelope.values || envelope.value || Object.create(null);
        var index$2 = -1, count$2 = pathSets.length;
        while (++index$2 < count$2) {
            path = pathSets[index$2];
            hasValue = false;
            jsons.length = 0;
            jsons[-1] = jsonRoot = values && values[jsonValueOffset + index$2] || void 0;
            jsonKeys.length = 0;
            jsonKeys[-1] = -1;
            depth = 0;
            length = path.length;
            height = length - 1;
            var ref;
            refs.length = 0;
            while (depth > -1) {
                refIndex = depth;
                while (--refIndex >= -1) {
                    if (!!(ref = refs[refIndex])) {
                        refLength = ref.length;
                        var i = -1, j = 0;
                        while (++i < refLength) {
                            optimizedPath[j++] = ref[i];
                        }
                        i = ++refIndex;
                        while (i < depth) {
                            optimizedPath[j++] = requestedPath[i++];
                        }
                        optimizedPath.length = j;
                        break;
                    }
                }
                var key, isKeySet;
                path = path;
                height = (length = path.length) - 1;
                nodeParent = nodes[depth - 1];
                nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                    node = nodeParent;
                    nodeParent = nodes;
                    key = depth - 1;
                    isKeySet = false;
                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                    node = nodeParent[key];
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    nodeTimestamp = node && node[$TIMESTAMP];
                    nodeExpires = node && node[$EXPIRES];
                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    message = messageParent[key];
                    messageType = message && message[$TYPE] || void 0;
                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                    messageTimestamp = message && message[$TIMESTAMP];
                    messageExpires = message && message[$EXPIRES];
                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                    }
                    if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                        message = message;
                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                            messageType = 'array';
                            message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                            delete messageValue[$SIZE];
                            messageValue[__CONTAINER] = message;
                        } else if (messageType === SENTINEL) {
                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                        } else if (messageType === ERROR) {
                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                        } else if (!(message != null && typeof message === 'object')) {
                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                            messageType = 'sentinel';
                            message = { 'value': messageValue };
                            message[$TYPE] = messageType;
                            message[$SIZE] = messageSize;
                        } else {
                            messageType = message[$TYPE] = messageType || 'leaf';
                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                        }
                        ;
                        var size_offset = messageSize - (node && node[$SIZE] || 0);
                        if (node != null && node !== message) {
                            var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = message[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                            while (++i$2 < nodeRefsLength) {
                                if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                    ref$2[__CONTEXT] = message;
                                    message[__REF + (destRefsLength + i$2)] = ref$2;
                                    node[__REF + i$2] = void 0;
                                }
                            }
                            message[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                            node[__REFS_LENGTH] = ref$2 = void 0;
                            var invParent = nodeParent, invChild = node, invKey = key, keys, index$3, offset, childType, childValue, isBranch, stack = [
                                    nodeParent,
                                    invKey,
                                    node
                                ], depth$2 = 0;
                            while (depth$2 > -1) {
                                nodeParent = stack[offset = depth$2 * 8];
                                invKey = stack[offset + 1];
                                node = stack[offset + 2];
                                if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                                    childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                                if ((isBranch = stack[offset + 5]) === void 0) {
                                    isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                }
                                if (isBranch === true) {
                                    if ((keys = stack[offset + 6]) === void 0) {
                                        keys = stack[offset + 6] = [];
                                        index$3 = -1;
                                        for (invKey in node) {
                                            !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys[++index$3] = invKey);
                                        }
                                    }
                                    index$3 = stack[offset + 7] || (stack[offset + 7] = 0);
                                    if (index$3 < keys.length) {
                                        stack[offset + 7] = index$3 + 1;
                                        stack[offset = ++depth$2 * 8] = node;
                                        stack[offset + 1] = invKey = keys[index$3];
                                        stack[offset + 2] = node[invKey];
                                        continue;
                                    }
                                }
                                var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                if (ref$3 && Array.isArray(ref$3)) {
                                    destination = ref$3[__CONTEXT];
                                    if (destination) {
                                        var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                        while (++i$3 <= n) {
                                            destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                        }
                                        destination[__REFS_LENGTH] = n;
                                        ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                    }
                                }
                                var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                while (++i$4 < n$2) {
                                    if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                        ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                                    (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                    (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                    node === head && (root$2.__head = root$2.__next = head = next);
                                    node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                                    node.__next = node.__prev = void 0;
                                    head = tail = next = prev = void 0;
                                }
                                nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                delete stack[offset + 0];
                                delete stack[offset + 1];
                                delete stack[offset + 2];
                                delete stack[offset + 3];
                                delete stack[offset + 4];
                                delete stack[offset + 5];
                                delete stack[offset + 6];
                                delete stack[offset + 7];
                                --depth$2;
                            }
                            nodeParent = invParent;
                            node = invChild;
                        }
                        nodeParent[key] = node = message;
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                        var node$2 = nodeParent, child = node, stack$2 = [];
                        while (node = nodeParent) {
                            nodeParent = node[__PARENT];
                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                                var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                if (ref$5 && Array.isArray(ref$5)) {
                                    destination$2 = ref$5[__CONTEXT];
                                    if (destination$2) {
                                        var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                        while (++i$5 <= n$3) {
                                            destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                        }
                                        destination$2[__REFS_LENGTH] = n$3;
                                        ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                                    }
                                }
                                var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                while (++i$6 < n$4) {
                                    if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                        ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                                    (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                                    (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                                    node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                                    node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                                    node.__next = node.__prev = void 0;
                                    head$2 = tail$2 = next$2 = prev$2 = void 0;
                                }
                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                var depth$3 = 0, references, ref$7, i$7, k, n$5;
                                while (depth$3 > -1) {
                                    if ((references = stack$2[depth$3]) === void 0) {
                                        i$7 = k = -1;
                                        n$5 = node[__REFS_LENGTH] || 0;
                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                        node[__GENERATION] = __GENERATION_GUID++;
                                        if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            stack$2[depth$3] = references = new Array(n$5 + 1);
                                            references[++k] = ref$7;
                                        } else if (n$5 > 0) {
                                            stack$2[depth$3] = references = new Array(n$5);
                                        }
                                        while (++i$7 < n$5) {
                                            if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                references[++k] = ref$7;
                                            }
                                        }
                                    }
                                    if ((node = references && references.pop()) !== void 0) {
                                        ++depth$3;
                                    } else {
                                        stack$2[depth$3--] = void 0;
                                    }
                                }
                            }
                        }
                        nodeParent = node$2;
                        node = child;
                    }
                    if (depth >= boundLength) {
                        jsonKeys[depth] = isKeySet ? key : void 0;
                    } else {
                        jsonKeys[depth] = void 0;
                    }
                    node = node;
                } else {
                    nodeParent = node = nodes[depth - 1];
                    messageParent = message = messages[depth - 1];
                    jsonParent = jsonNode = jsons[depth - 1];
                    depth = depth;
                    follow_path_6548:
                        do {
                            key = path[depth];
                            if (isKeySet = key != null && typeof key === 'object') {
                                if (Array.isArray(key)) {
                                    if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                        key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            if (key === __NULL) {
                                key = null;
                            }
                            depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                            if (key != null) {
                                if (depth < height) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    message = messageParent[key];
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    messageTimestamp = message && message[$TIMESTAMP];
                                    messageExpires = message && message[$EXPIRES];
                                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                    }
                                    node = node;
                                    message = message;
                                    merge_node_6692:
                                        do {
                                            if (node === message) {
                                                node = node;
                                                break merge_node_6692;
                                            }
                                            if (node != null) {
                                                if (message != null) {
                                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                            if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                message = message;
                                                                node = node;
                                                                nodeValue = nodeValue;
                                                                messageValue = messageValue;
                                                                replace_cache_reference_6876:
                                                                    do {
                                                                        // compare the cache and message references.
                                                                        // if they're the same, break early so we don't insert.
                                                                        // if they're different, replace the cache reference.
                                                                        var i$8 = nodeValue.length;
                                                                        // If the reference lengths are equal, we have to check their keys
                                                                        // for equality.
                                                                        // If their lengths aren't the equal, the references aren't equal.
                                                                        // Insert the reference from the message.
                                                                        if (i$8 === messageValue.length) {
                                                                            while (--i$8 > -1) {
                                                                                // If any of their keys are different, replace the reference
                                                                                // in the cache with the reference in the message.
                                                                                if (nodeValue[i$8] !== messageValue[i$8]) {
                                                                                    message = message;
                                                                                    break replace_cache_reference_6876;
                                                                                }
                                                                            }
                                                                            if (i$8 === -1) {
                                                                                message = node;
                                                                                break replace_cache_reference_6876;
                                                                            }
                                                                        }
                                                                        message = message;
                                                                        break replace_cache_reference_6876;
                                                                    } while (true);
                                                                message = message;
                                                            }
                                                        }
                                                    }
                                                    if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                        node = node;
                                                        break merge_node_6692;
                                                    }
                                                } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                    node = message = node;
                                                    break merge_node_6692;
                                                }
                                            }
                                            if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                message = message;
                                                if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                    delete messageValue[$SIZE];
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === SENTINEL) {
                                                    message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === ERROR) {
                                                    message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                } else if (!(message != null && typeof message === 'object')) {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                    messageType = 'sentinel';
                                                    message = { 'value': messageValue };
                                                    message[$TYPE] = messageType;
                                                    message[$SIZE] = messageSize;
                                                } else {
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                    message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                }
                                                ;
                                            }
                                            var size_offset$2 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                            if (node != null && node !== message) {
                                                var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = message[__REFS_LENGTH] || 0, i$9 = -1, ref$8;
                                                while (++i$9 < nodeRefsLength$2) {
                                                    if ((ref$8 = node[__REF + i$9]) !== void 0) {
                                                        ref$8[__CONTEXT] = message;
                                                        message[__REF + (destRefsLength$2 + i$9)] = ref$8;
                                                        node[__REF + i$9] = void 0;
                                                    }
                                                }
                                                message[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                                node[__REFS_LENGTH] = ref$8 = void 0;
                                                var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$4, offset$2, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                        nodeParent,
                                                        invKey$2,
                                                        node
                                                    ], depth$4 = 0;
                                                while (depth$4 > -1) {
                                                    nodeParent = stack$3[offset$2 = depth$4 * 8];
                                                    invKey$2 = stack$3[offset$2 + 1];
                                                    node = stack$3[offset$2 + 2];
                                                    if ((childType$2 = stack$3[offset$2 + 3]) === void 0 || (childType$2 = void 0)) {
                                                        childType$2 = stack$3[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                    }
                                                    childValue$2 = stack$3[offset$2 + 4] || (stack$3[offset$2 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                    if ((isBranch$2 = stack$3[offset$2 + 5]) === void 0) {
                                                        isBranch$2 = stack$3[offset$2 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                    }
                                                    if (isBranch$2 === true) {
                                                        if ((keys$2 = stack$3[offset$2 + 6]) === void 0) {
                                                            keys$2 = stack$3[offset$2 + 6] = [];
                                                            index$4 = -1;
                                                            for (invKey$2 in node) {
                                                                !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$2[++index$4] = invKey$2);
                                                            }
                                                        }
                                                        index$4 = stack$3[offset$2 + 7] || (stack$3[offset$2 + 7] = 0);
                                                        if (index$4 < keys$2.length) {
                                                            stack$3[offset$2 + 7] = index$4 + 1;
                                                            stack$3[offset$2 = ++depth$4 * 8] = node;
                                                            stack$3[offset$2 + 1] = invKey$2 = keys$2[index$4];
                                                            stack$3[offset$2 + 2] = node[invKey$2];
                                                            continue;
                                                        }
                                                    }
                                                    var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                    if (ref$9 && Array.isArray(ref$9)) {
                                                        destination$3 = ref$9[__CONTEXT];
                                                        if (destination$3) {
                                                            var i$10 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$10 <= n$6) {
                                                                destination$3[__REF + i$10] = destination$3[__REF + (i$10 + 1)];
                                                            }
                                                            destination$3[__REFS_LENGTH] = n$6;
                                                            ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                        }
                                                    }
                                                    var ref$10, i$11 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                                    while (++i$11 < n$7) {
                                                        if ((ref$10 = node[__REF + i$11]) !== void 0) {
                                                            ref$10[__CONTEXT] = node[__REF + i$11] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    if (node != null && typeof node === 'object') {
                                                        var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3, prev$3;
                                                        (next$3 = node.__next) && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                                        (prev$3 = node.__prev) && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                                        node === head$3 && (root$4.__head = root$4.__next = head$3 = next$3);
                                                        node === tail$3 && (root$4.__tail = root$4.__prev = tail$3 = prev$3);
                                                        node.__next = node.__prev = void 0;
                                                        head$3 = tail$3 = next$3 = prev$3 = void 0;
                                                    }
                                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                    delete stack$3[offset$2 + 0];
                                                    delete stack$3[offset$2 + 1];
                                                    delete stack$3[offset$2 + 2];
                                                    delete stack$3[offset$2 + 3];
                                                    delete stack$3[offset$2 + 4];
                                                    delete stack$3[offset$2 + 5];
                                                    delete stack$3[offset$2 + 6];
                                                    delete stack$3[offset$2 + 7];
                                                    --depth$4;
                                                }
                                                nodeParent = invParent$2;
                                                node = invChild$2;
                                            }
                                            nodeParent[key] = node = message;
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeTimestamp = node && node[$TIMESTAMP];
                                            nodeExpires = node && node[$EXPIRES];
                                            var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                            while (node = nodeParent) {
                                                nodeParent = node[__PARENT];
                                                if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                                    var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                    if (ref$11 && Array.isArray(ref$11)) {
                                                        destination$4 = ref$11[__CONTEXT];
                                                        if (destination$4) {
                                                            var i$12 = (ref$11[__REF_INDEX] || 0) - 1, n$8 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$12 <= n$8) {
                                                                destination$4[__REF + i$12] = destination$4[__REF + (i$12 + 1)];
                                                            }
                                                            destination$4[__REFS_LENGTH] = n$8;
                                                            ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                        }
                                                    }
                                                    var ref$12, i$13 = -1, n$9 = node[__REFS_LENGTH] || 0;
                                                    while (++i$13 < n$9) {
                                                        if ((ref$12 = node[__REF + i$13]) !== void 0) {
                                                            ref$12[__CONTEXT] = node[__REF + i$13] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    if (node != null && typeof node === 'object') {
                                                        var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                        (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                        (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                        node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                        node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                        node.__next = node.__prev = void 0;
                                                        head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                    }
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    var depth$5 = 0, references$2, ref$13, i$14, k$2, n$10;
                                                    while (depth$5 > -1) {
                                                        if ((references$2 = stack$4[depth$5]) === void 0) {
                                                            i$14 = k$2 = -1;
                                                            n$10 = node[__REFS_LENGTH] || 0;
                                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                            node[__GENERATION] = __GENERATION_GUID++;
                                                            if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                stack$4[depth$5] = references$2 = new Array(n$10 + 1);
                                                                references$2[++k$2] = ref$13;
                                                            } else if (n$10 > 0) {
                                                                stack$4[depth$5] = references$2 = new Array(n$10);
                                                            }
                                                            while (++i$14 < n$10) {
                                                                if ((ref$13 = node[__REF + i$14]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    references$2[++k$2] = ref$13;
                                                                }
                                                            }
                                                        }
                                                        if ((node = references$2 && references$2.pop()) !== void 0) {
                                                            ++depth$5;
                                                        } else {
                                                            stack$4[depth$5--] = void 0;
                                                        }
                                                    }
                                                }
                                            }
                                            nodeParent = node$3;
                                            node = child$2;
                                            node = node;
                                            break merge_node_6692;
                                        } while (true);
                                    node = node;
                                    node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                    if (depth >= boundLength) {
                                        jsonKeys[depth] = isKeySet ? key : void 0;
                                        if (node != null && jsonParent != null && isKeySet && (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object'))) {
                                            jsonNode = jsonParent[key] = Object.create(null);
                                        }
                                    } else {
                                        jsonKeys[depth] = void 0;
                                    }
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        do {
                                            if (nodeExpires !== 1) {
                                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                                if (node !== head$5) {
                                                    next$5 && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                    prev$5 && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                    (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                                    root$6.__head = root$6.__next = head$5 = node;
                                                    head$5.__next = next$5;
                                                    head$5.__prev = void 0;
                                                }
                                                if (tail$5 == null || node === tail$5) {
                                                    root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                                }
                                                root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                            }
                                            refs[depth] = nodeValue;
                                            refIndex = depth + 1;
                                            refDepth = 0;
                                            var key$2, isKeySet$2;
                                            reference = nodeValue;
                                            refHeight = (refLength = reference.length) - 1;
                                            nodeParent = nodeRoot;
                                            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                node = node = nodeParent;
                                            } else {
                                                nodeParent = nodeRoot;
                                                messageParent = messageRoot;
                                                jsonParent = jsonRoot;
                                                refDepth = refDepth;
                                                follow_path_7235:
                                                    do {
                                                        key$2 = reference[refDepth];
                                                        isKeySet$2 = false;
                                                        if (key$2 != null) {
                                                            if (refDepth < refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                message = messageParent[key$2];
                                                                messageType = message && message[$TYPE] || void 0;
                                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                                messageTimestamp = message && message[$TIMESTAMP];
                                                                messageExpires = message && message[$EXPIRES];
                                                                if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                                                    message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                                                }
                                                                node = node;
                                                                message = message;
                                                                merge_node_7369:
                                                                    do {
                                                                        if (node === message) {
                                                                            node = node;
                                                                            break merge_node_7369;
                                                                        }
                                                                        if (node != null) {
                                                                            if (message != null) {
                                                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                        if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                                            message = message;
                                                                                            node = node;
                                                                                            nodeValue = nodeValue;
                                                                                            messageValue = messageValue;
                                                                                            replace_cache_reference_7552:
                                                                                                do {
                                                                                                    // compare the cache and message references.
                                                                                                    // if they're the same, break early so we don't insert.
                                                                                                    // if they're different, replace the cache reference.
                                                                                                    var i$15 = nodeValue.length;
                                                                                                    // If the reference lengths are equal, we have to check their keys
                                                                                                    // for equality.
                                                                                                    // If their lengths aren't the equal, the references aren't equal.
                                                                                                    // Insert the reference from the message.
                                                                                                    if (i$15 === messageValue.length) {
                                                                                                        while (--i$15 > -1) {
                                                                                                            // If any of their keys are different, replace the reference
                                                                                                            // in the cache with the reference in the message.
                                                                                                            if (nodeValue[i$15] !== messageValue[i$15]) {
                                                                                                                message = message;
                                                                                                                break replace_cache_reference_7552;
                                                                                                            }
                                                                                                        }
                                                                                                        if (i$15 === -1) {
                                                                                                            message = node;
                                                                                                            break replace_cache_reference_7552;
                                                                                                        }
                                                                                                    }
                                                                                                    message = message;
                                                                                                    break replace_cache_reference_7552;
                                                                                                } while (true);
                                                                                            message = message;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                                                    node = node;
                                                                                    break merge_node_7369;
                                                                                }
                                                                            } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                                                node = message = node;
                                                                                break merge_node_7369;
                                                                            }
                                                                        }
                                                                        if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                                            message = message;
                                                                            if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                messageType = 'array';
                                                                                message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                                                delete messageValue[$SIZE];
                                                                                messageValue[__CONTAINER] = message;
                                                                            } else if (messageType === SENTINEL) {
                                                                                message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                            } else if (messageType === ERROR) {
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            } else if (!(message != null && typeof message === 'object')) {
                                                                                messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                                messageType = 'sentinel';
                                                                                message = { 'value': messageValue };
                                                                                message[$TYPE] = messageType;
                                                                                message[$SIZE] = messageSize;
                                                                            } else {
                                                                                messageType = message[$TYPE] = messageType || 'leaf';
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            }
                                                                            ;
                                                                        }
                                                                        var size_offset$3 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                                                        if (node != null && node !== message) {
                                                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = message[__REFS_LENGTH] || 0, i$16 = -1, ref$14;
                                                                            while (++i$16 < nodeRefsLength$3) {
                                                                                if ((ref$14 = node[__REF + i$16]) !== void 0) {
                                                                                    ref$14[__CONTEXT] = message;
                                                                                    message[__REF + (destRefsLength$3 + i$16)] = ref$14;
                                                                                    node[__REF + i$16] = void 0;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$3, index$5, offset$3, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                    nodeParent,
                                                                                    invKey$3,
                                                                                    node
                                                                                ], depth$6 = 0;
                                                                            while (depth$6 > -1) {
                                                                                nodeParent = stack$5[offset$3 = depth$6 * 8];
                                                                                invKey$3 = stack$5[offset$3 + 1];
                                                                                node = stack$5[offset$3 + 2];
                                                                                if ((childType$3 = stack$5[offset$3 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                    childType$3 = stack$5[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$3 = stack$5[offset$3 + 4] || (stack$5[offset$3 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$3 = stack$5[offset$3 + 5]) === void 0) {
                                                                                    isBranch$3 = stack$5[offset$3 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                                }
                                                                                if (isBranch$3 === true) {
                                                                                    if ((keys$3 = stack$5[offset$3 + 6]) === void 0) {
                                                                                        keys$3 = stack$5[offset$3 + 6] = [];
                                                                                        index$5 = -1;
                                                                                        for (invKey$3 in node) {
                                                                                            !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$3[++index$5] = invKey$3);
                                                                                        }
                                                                                    }
                                                                                    index$5 = stack$5[offset$3 + 7] || (stack$5[offset$3 + 7] = 0);
                                                                                    if (index$5 < keys$3.length) {
                                                                                        stack$5[offset$3 + 7] = index$5 + 1;
                                                                                        stack$5[offset$3 = ++depth$6 * 8] = node;
                                                                                        stack$5[offset$3 + 1] = invKey$3 = keys$3[index$5];
                                                                                        stack$5[offset$3 + 2] = node[invKey$3];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                                if (ref$15 && Array.isArray(ref$15)) {
                                                                                    destination$5 = ref$15[__CONTEXT];
                                                                                    if (destination$5) {
                                                                                        var i$17 = (ref$15[__REF_INDEX] || 0) - 1, n$11 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$17 <= n$11) {
                                                                                            destination$5[__REF + i$17] = destination$5[__REF + (i$17 + 1)];
                                                                                        }
                                                                                        destination$5[__REFS_LENGTH] = n$11;
                                                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$16, i$18 = -1, n$12 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$18 < n$12) {
                                                                                    if ((ref$16 = node[__REF + i$18]) !== void 0) {
                                                                                        ref$16[__CONTEXT] = node[__REF + i$18] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6, prev$6;
                                                                                    (next$6 = node.__next) && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                                                    (prev$6 = node.__prev) && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                                                    node === head$6 && (root$7.__head = root$7.__next = head$6 = next$6);
                                                                                    node === tail$6 && (root$7.__tail = root$7.__prev = tail$6 = prev$6);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$6 = tail$6 = next$6 = prev$6 = void 0;
                                                                                }
                                                                                nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$5[offset$3 + 0];
                                                                                delete stack$5[offset$3 + 1];
                                                                                delete stack$5[offset$3 + 2];
                                                                                delete stack$5[offset$3 + 3];
                                                                                delete stack$5[offset$3 + 4];
                                                                                delete stack$5[offset$3 + 5];
                                                                                delete stack$5[offset$3 + 6];
                                                                                delete stack$5[offset$3 + 7];
                                                                                --depth$6;
                                                                            }
                                                                            nodeParent = invParent$3;
                                                                            node = invChild$3;
                                                                        }
                                                                        nodeParent[key$2] = node = message;
                                                                        nodeType = node && node[$TYPE] || void 0;
                                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                                        nodeExpires = node && node[$EXPIRES];
                                                                        var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$3) <= 0 && true && nodeParent) {
                                                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                                if (ref$17 && Array.isArray(ref$17)) {
                                                                                    destination$6 = ref$17[__CONTEXT];
                                                                                    if (destination$6) {
                                                                                        var i$19 = (ref$17[__REF_INDEX] || 0) - 1, n$13 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$19 <= n$13) {
                                                                                            destination$6[__REF + i$19] = destination$6[__REF + (i$19 + 1)];
                                                                                        }
                                                                                        destination$6[__REFS_LENGTH] = n$13;
                                                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$18, i$20 = -1, n$14 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$20 < n$14) {
                                                                                    if ((ref$18 = node[__REF + i$20]) !== void 0) {
                                                                                        ref$18[__CONTEXT] = node[__REF + i$20] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                    (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                    (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                    node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                    node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$7 = 0, references$3, ref$19, i$21, k$3, n$15;
                                                                                while (depth$7 > -1) {
                                                                                    if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                        i$21 = k$3 = -1;
                                                                                        n$15 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$15 + 1);
                                                                                            references$3[++k$3] = ref$19;
                                                                                        } else if (n$15 > 0) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$15);
                                                                                        }
                                                                                        while (++i$21 < n$15) {
                                                                                            if ((ref$19 = node[__REF + i$21]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$3[++k$3] = ref$19;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                        ++depth$7;
                                                                                    } else {
                                                                                        stack$6[depth$7--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$4;
                                                                        node = child$3;
                                                                        node = node;
                                                                        break merge_node_7369;
                                                                    } while (true);
                                                                node = node;
                                                                node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                                                if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                    nodeParent = node;
                                                                    break follow_path_7235;
                                                                }
                                                                nodeParent = node;
                                                                messageParent = message;
                                                                jsonParent = jsonNode;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_7235;
                                                            } else if (refDepth === refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                message = messageParent[key$2];
                                                                messageType = message && message[$TYPE] || void 0;
                                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                                messageTimestamp = message && message[$TIMESTAMP];
                                                                messageExpires = message && message[$EXPIRES];
                                                                if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                                                    message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                                                }
                                                                node = node;
                                                                message = message;
                                                                merge_node_7903:
                                                                    do {
                                                                        if (node === message) {
                                                                            node = node;
                                                                            break merge_node_7903;
                                                                        }
                                                                        if (node != null) {
                                                                            if (message != null) {
                                                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                        if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                                            message = message;
                                                                                            node = node;
                                                                                            nodeValue = nodeValue;
                                                                                            messageValue = messageValue;
                                                                                            replace_cache_reference_8085:
                                                                                                do {
                                                                                                    // compare the cache and message references.
                                                                                                    // if they're the same, break early so we don't insert.
                                                                                                    // if they're different, replace the cache reference.
                                                                                                    var i$22 = nodeValue.length;
                                                                                                    // If the reference lengths are equal, we have to check their keys
                                                                                                    // for equality.
                                                                                                    // If their lengths aren't the equal, the references aren't equal.
                                                                                                    // Insert the reference from the message.
                                                                                                    if (i$22 === messageValue.length) {
                                                                                                        while (--i$22 > -1) {
                                                                                                            // If any of their keys are different, replace the reference
                                                                                                            // in the cache with the reference in the message.
                                                                                                            if (nodeValue[i$22] !== messageValue[i$22]) {
                                                                                                                message = message;
                                                                                                                break replace_cache_reference_8085;
                                                                                                            }
                                                                                                        }
                                                                                                        if (i$22 === -1) {
                                                                                                            message = node;
                                                                                                            break replace_cache_reference_8085;
                                                                                                        }
                                                                                                    }
                                                                                                    message = message;
                                                                                                    break replace_cache_reference_8085;
                                                                                                } while (true);
                                                                                            message = message;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                                                    node = node;
                                                                                    break merge_node_7903;
                                                                                }
                                                                            } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                                                node = message = node;
                                                                                break merge_node_7903;
                                                                            }
                                                                        }
                                                                        if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                                            message = message;
                                                                            if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                messageType = 'array';
                                                                                message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                                                delete messageValue[$SIZE];
                                                                                messageValue[__CONTAINER] = message;
                                                                            } else if (messageType === SENTINEL) {
                                                                                message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                            } else if (messageType === ERROR) {
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            } else if (!(message != null && typeof message === 'object')) {
                                                                                messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                                messageType = 'sentinel';
                                                                                message = { 'value': messageValue };
                                                                                message[$TYPE] = messageType;
                                                                                message[$SIZE] = messageSize;
                                                                            } else {
                                                                                messageType = message[$TYPE] = messageType || 'leaf';
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            }
                                                                            ;
                                                                        }
                                                                        var size_offset$4 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                                                        if (node != null && node !== message) {
                                                                            var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = message[__REFS_LENGTH] || 0, i$23 = -1, ref$20;
                                                                            while (++i$23 < nodeRefsLength$4) {
                                                                                if ((ref$20 = node[__REF + i$23]) !== void 0) {
                                                                                    ref$20[__CONTEXT] = message;
                                                                                    message[__REF + (destRefsLength$4 + i$23)] = ref$20;
                                                                                    node[__REF + i$23] = void 0;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                            node[__REFS_LENGTH] = ref$20 = void 0;
                                                                            var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$4, index$6, offset$4, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                    nodeParent,
                                                                                    invKey$4,
                                                                                    node
                                                                                ], depth$8 = 0;
                                                                            while (depth$8 > -1) {
                                                                                nodeParent = stack$7[offset$4 = depth$8 * 8];
                                                                                invKey$4 = stack$7[offset$4 + 1];
                                                                                node = stack$7[offset$4 + 2];
                                                                                if ((childType$4 = stack$7[offset$4 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                    childType$4 = stack$7[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$4 = stack$7[offset$4 + 4] || (stack$7[offset$4 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$4 = stack$7[offset$4 + 5]) === void 0) {
                                                                                    isBranch$4 = stack$7[offset$4 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                                }
                                                                                if (isBranch$4 === true) {
                                                                                    if ((keys$4 = stack$7[offset$4 + 6]) === void 0) {
                                                                                        keys$4 = stack$7[offset$4 + 6] = [];
                                                                                        index$6 = -1;
                                                                                        for (invKey$4 in node) {
                                                                                            !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$4[++index$6] = invKey$4);
                                                                                        }
                                                                                    }
                                                                                    index$6 = stack$7[offset$4 + 7] || (stack$7[offset$4 + 7] = 0);
                                                                                    if (index$6 < keys$4.length) {
                                                                                        stack$7[offset$4 + 7] = index$6 + 1;
                                                                                        stack$7[offset$4 = ++depth$8 * 8] = node;
                                                                                        stack$7[offset$4 + 1] = invKey$4 = keys$4[index$6];
                                                                                        stack$7[offset$4 + 2] = node[invKey$4];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                                if (ref$21 && Array.isArray(ref$21)) {
                                                                                    destination$7 = ref$21[__CONTEXT];
                                                                                    if (destination$7) {
                                                                                        var i$24 = (ref$21[__REF_INDEX] || 0) - 1, n$16 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$24 <= n$16) {
                                                                                            destination$7[__REF + i$24] = destination$7[__REF + (i$24 + 1)];
                                                                                        }
                                                                                        destination$7[__REFS_LENGTH] = n$16;
                                                                                        ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$22, i$25 = -1, n$17 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$25 < n$17) {
                                                                                    if ((ref$22 = node[__REF + i$25]) !== void 0) {
                                                                                        ref$22[__CONTEXT] = node[__REF + i$25] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                    (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                    (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                    node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                    node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                                }
                                                                                nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$7[offset$4 + 0];
                                                                                delete stack$7[offset$4 + 1];
                                                                                delete stack$7[offset$4 + 2];
                                                                                delete stack$7[offset$4 + 3];
                                                                                delete stack$7[offset$4 + 4];
                                                                                delete stack$7[offset$4 + 5];
                                                                                delete stack$7[offset$4 + 6];
                                                                                delete stack$7[offset$4 + 7];
                                                                                --depth$8;
                                                                            }
                                                                            nodeParent = invParent$4;
                                                                            node = invChild$4;
                                                                        }
                                                                        nodeParent[key$2] = node = message;
                                                                        nodeType = node && node[$TYPE] || void 0;
                                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                                        nodeExpires = node && node[$EXPIRES];
                                                                        var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$4) <= 0 && true && nodeParent) {
                                                                                var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                                if (ref$23 && Array.isArray(ref$23)) {
                                                                                    destination$8 = ref$23[__CONTEXT];
                                                                                    if (destination$8) {
                                                                                        var i$26 = (ref$23[__REF_INDEX] || 0) - 1, n$18 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$26 <= n$18) {
                                                                                            destination$8[__REF + i$26] = destination$8[__REF + (i$26 + 1)];
                                                                                        }
                                                                                        destination$8[__REFS_LENGTH] = n$18;
                                                                                        ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$24, i$27 = -1, n$19 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$27 < n$19) {
                                                                                    if ((ref$24 = node[__REF + i$27]) !== void 0) {
                                                                                        ref$24[__CONTEXT] = node[__REF + i$27] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                    (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                    (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                    node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                    node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$9 = 0, references$4, ref$25, i$28, k$4, n$20;
                                                                                while (depth$9 > -1) {
                                                                                    if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                        i$28 = k$4 = -1;
                                                                                        n$20 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$20 + 1);
                                                                                            references$4[++k$4] = ref$25;
                                                                                        } else if (n$20 > 0) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$20);
                                                                                        }
                                                                                        while (++i$28 < n$20) {
                                                                                            if ((ref$25 = node[__REF + i$28]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$4[++k$4] = ref$25;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                        ++depth$9;
                                                                                    } else {
                                                                                        stack$8[depth$9--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$5;
                                                                        node = child$4;
                                                                        node = node;
                                                                        break merge_node_7903;
                                                                    } while (true);
                                                                node = node;
                                                                node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                                                if (node != null) {
                                                                    var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                    // Set up the hard-link so we don't have to do all
                                                                    // this work the next time we follow this reference.
                                                                    if (refContext === void 0) {
                                                                        // create a back reference
                                                                        var backRefs = node[__REFS_LENGTH] || 0;
                                                                        node[__REF + backRefs] = refContainer;
                                                                        node[__REFS_LENGTH] = backRefs + 1;
                                                                        // create a hard reference
                                                                        refContainer[__REF_INDEX] = backRefs;
                                                                        refContainer[__CONTEXT] = node;
                                                                        refContainer = backRefs = void 0;
                                                                    }
                                                                    ;
                                                                }
                                                                appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                nodeParent = node;
                                                                break follow_path_7235;
                                                            }
                                                        } else if (refDepth < refHeight) {
                                                            nodeParent = node;
                                                            messageParent = message;
                                                            jsonParent = jsonNode;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_7235;
                                                        }
                                                        nodeParent = node;
                                                        break follow_path_7235;
                                                    } while (true);
                                                node = nodeParent;
                                            }
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeExpires = node && node[$EXPIRES];
                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                        } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                        if (node == null) {
                                            while (refDepth <= refHeight) {
                                                optimizedPath[refDepth] = reference[refDepth++];
                                            }
                                        }
                                    }
                                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                        nodeParent = node;
                                        break follow_path_6548;
                                    }
                                    nodeParent = nodes[depth] = node;
                                    messageParent = messages[depth] = message;
                                    jsonParent = jsons[depth] = jsonNode;
                                    depth = depth + 1;
                                    continue follow_path_6548;
                                } else if (depth === height) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    message = messageParent[key];
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    messageTimestamp = message && message[$TIMESTAMP];
                                    messageExpires = message && message[$EXPIRES];
                                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                    }
                                    if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            messageType = 'array';
                                            message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                            delete messageValue[$SIZE];
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = { 'value': messageValue };
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || 'leaf';
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                        ;
                                        var size_offset$5 = messageSize - (node && node[$SIZE] || 0);
                                        if (node != null && node !== message) {
                                            var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = message[__REFS_LENGTH] || 0, i$29 = -1, ref$26;
                                            while (++i$29 < nodeRefsLength$5) {
                                                if ((ref$26 = node[__REF + i$29]) !== void 0) {
                                                    ref$26[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$5 + i$29)] = ref$26;
                                                    node[__REF + i$29] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                            node[__REFS_LENGTH] = ref$26 = void 0;
                                            var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$5, index$7, offset$5, childType$5, childValue$5, isBranch$5, stack$9 = [
                                                    nodeParent,
                                                    invKey$5,
                                                    node
                                                ], depth$10 = 0;
                                            while (depth$10 > -1) {
                                                nodeParent = stack$9[offset$5 = depth$10 * 8];
                                                invKey$5 = stack$9[offset$5 + 1];
                                                node = stack$9[offset$5 + 2];
                                                if ((childType$5 = stack$9[offset$5 + 3]) === void 0 || (childType$5 = void 0)) {
                                                    childType$5 = stack$9[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$5 = stack$9[offset$5 + 4] || (stack$9[offset$5 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$5 = stack$9[offset$5 + 5]) === void 0) {
                                                    isBranch$5 = stack$9[offset$5 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                                }
                                                if (isBranch$5 === true) {
                                                    if ((keys$5 = stack$9[offset$5 + 6]) === void 0) {
                                                        keys$5 = stack$9[offset$5 + 6] = [];
                                                        index$7 = -1;
                                                        for (invKey$5 in node) {
                                                            !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$5[++index$7] = invKey$5);
                                                        }
                                                    }
                                                    index$7 = stack$9[offset$5 + 7] || (stack$9[offset$5 + 7] = 0);
                                                    if (index$7 < keys$5.length) {
                                                        stack$9[offset$5 + 7] = index$7 + 1;
                                                        stack$9[offset$5 = ++depth$10 * 8] = node;
                                                        stack$9[offset$5 + 1] = invKey$5 = keys$5[index$7];
                                                        stack$9[offset$5 + 2] = node[invKey$5];
                                                        continue;
                                                    }
                                                }
                                                var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                                if (ref$27 && Array.isArray(ref$27)) {
                                                    destination$9 = ref$27[__CONTEXT];
                                                    if (destination$9) {
                                                        var i$30 = (ref$27[__REF_INDEX] || 0) - 1, n$21 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$30 <= n$21) {
                                                            destination$9[__REF + i$30] = destination$9[__REF + (i$30 + 1)];
                                                        }
                                                        destination$9[__REFS_LENGTH] = n$21;
                                                        ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                                    }
                                                }
                                                var ref$28, i$31 = -1, n$22 = node[__REFS_LENGTH] || 0;
                                                while (++i$31 < n$22) {
                                                    if ((ref$28 = node[__REF + i$31]) !== void 0) {
                                                        ref$28[__CONTEXT] = node[__REF + i$31] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                    (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                    (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                    node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                    node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                    node.__next = node.__prev = void 0;
                                                    head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                }
                                                nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                delete stack$9[offset$5 + 0];
                                                delete stack$9[offset$5 + 1];
                                                delete stack$9[offset$5 + 2];
                                                delete stack$9[offset$5 + 3];
                                                delete stack$9[offset$5 + 4];
                                                delete stack$9[offset$5 + 5];
                                                delete stack$9[offset$5 + 6];
                                                delete stack$9[offset$5 + 7];
                                                --depth$10;
                                            }
                                            nodeParent = invParent$5;
                                            node = invChild$5;
                                        }
                                        nodeParent[key] = node = message;
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var node$6 = nodeParent, child$5 = node, stack$10 = [];
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$5) <= 0 && true && nodeParent) {
                                                var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                                if (ref$29 && Array.isArray(ref$29)) {
                                                    destination$10 = ref$29[__CONTEXT];
                                                    if (destination$10) {
                                                        var i$32 = (ref$29[__REF_INDEX] || 0) - 1, n$23 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$32 <= n$23) {
                                                            destination$10[__REF + i$32] = destination$10[__REF + (i$32 + 1)];
                                                        }
                                                        destination$10[__REFS_LENGTH] = n$23;
                                                        ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                                    }
                                                }
                                                var ref$30, i$33 = -1, n$24 = node[__REFS_LENGTH] || 0;
                                                while (++i$33 < n$24) {
                                                    if ((ref$30 = node[__REF + i$33]) !== void 0) {
                                                        ref$30[__CONTEXT] = node[__REF + i$33] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                                    (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                                    (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                                    node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                                    node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                                    node.__next = node.__prev = void 0;
                                                    head$11 = tail$11 = next$11 = prev$11 = void 0;
                                                }
                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var depth$11 = 0, references$5, ref$31, i$34, k$5, n$25;
                                                while (depth$11 > -1) {
                                                    if ((references$5 = stack$10[depth$11]) === void 0) {
                                                        i$34 = k$5 = -1;
                                                        n$25 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                        if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$10[depth$11] = references$5 = new Array(n$25 + 1);
                                                            references$5[++k$5] = ref$31;
                                                        } else if (n$25 > 0) {
                                                            stack$10[depth$11] = references$5 = new Array(n$25);
                                                        }
                                                        while (++i$34 < n$25) {
                                                            if ((ref$31 = node[__REF + i$34]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                references$5[++k$5] = ref$31;
                                                            }
                                                        }
                                                    }
                                                    if ((node = references$5 && references$5.pop()) !== void 0) {
                                                        ++depth$11;
                                                    } else {
                                                        stack$10[depth$11--] = void 0;
                                                    }
                                                }
                                            }
                                        }
                                        nodeParent = node$6;
                                        node = child$5;
                                    }
                                    if (depth >= boundLength) {
                                        jsonKeys[depth] = isKeySet ? key : void 0;
                                    } else {
                                        jsonKeys[depth] = void 0;
                                    }
                                    appendNullKey = false;
                                    nodeParent = node;
                                    break follow_path_6548;
                                }
                            } else if (depth < height) {
                                nodeParent = nodeParent;
                                messageParent = messageParent;
                                jsonParent = jsonParent;
                                depth = depth + 1;
                                continue follow_path_6548;
                            }
                            nodeParent = node;
                            break follow_path_6548;
                        } while (true);
                    node = nodeParent;
                }
                if (node != null || boxed === true) {
                    if (nodeType === ERROR) {
                        if (nodeExpires !== 1) {
                            var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12 = node.__next, prev$12 = node.__prev;
                            if (node !== head$12) {
                                next$12 && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                prev$12 && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                (next$12 = head$12) && (head$12 != null && typeof head$12 === 'object') && (head$12.__prev = node);
                                root$13.__head = root$13.__next = head$12 = node;
                                head$12.__next = next$12;
                                head$12.__prev = void 0;
                            }
                            if (tail$12 == null || node === tail$12) {
                                root$13.__tail = root$13.__prev = tail$12 = prev$12 || node;
                            }
                            root$13 = head$12 = tail$12 = next$12 = prev$12 = void 0;
                        }
                        var nodeType$2 = node && node[$TYPE] || void 0;
                        nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                        var pbv = Object.create(null);
                        var src = requestedPath, i$35 = -1, n$26 = src.length, req = new Array(n$26);
                        while (++i$35 < n$26) {
                            req[i$35] = src[i$35];
                        }
                        if (appendNullKey === true) {
                            req[req.length] = null;
                        }
                        pbv.path = req;
                        if (boxed === true) {
                            pbv.value = node;
                        } else {
                            var dest = nodeValue, src$2 = dest, x;
                            if (dest != null && typeof dest === 'object') {
                                dest = Array.isArray(src$2) && [] || Object.create(null);
                                for (x in src$2) {
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src$2[x]);
                                }
                            }
                            pbv.value = dest;
                        }
                        errors[errors.length] = pbv;
                    }
                    if (jsonParent != null) {
                        hasValue = true;
                        var jsonKey, jsonDepth = depth;
                        do {
                            jsonKey = jsonKeys[jsonDepth];
                            jsonParent = jsons[--jsonDepth];
                        } while (jsonKey == null);
                        if (boxed === true) {
                            jsonParent[jsonKey] = node;
                        } else {
                            var dest$2 = nodeValue, src$3 = dest$2, x$2;
                            if (dest$2 != null && typeof dest$2 === 'object') {
                                dest$2 = Array.isArray(src$3) && [] || Object.create(null);
                                for (x$2 in src$3) {
                                    !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT) || x$2[0] === '$') && (dest$2[x$2] = src$3[x$2]);
                                }
                            }
                            jsonParent[jsonKey] = dest$2;
                        }
                    }
                    var src$4 = optimizedPath, i$36 = -1, n$27 = src$4.length, opt = new Array(n$27);
                    while (++i$36 < n$27) {
                        opt[i$36] = src$4[i$36];
                    }
                    var src$5 = requestedPath, i$37 = -1, n$28 = src$5.length, req$2 = new Array(n$28);
                    while (++i$37 < n$28) {
                        req$2[i$37] = src$5[i$37];
                    }
                    if (appendNullKey === true) {
                        req$2[req$2.length] = null;
                    }
                    requestedPaths[requestedPaths.length] = req$2;
                    optimizedPaths[optimizedPaths.length] = opt;
                }
                if (boxed === false && node == null || refreshing === true) {
                    var src$6 = boundPath, i$38 = -1, n$29 = src$6.length, req$3 = new Array(n$29);
                    while (++i$38 < n$29) {
                        req$3[i$38] = src$6[i$38];
                    }
                    var src$7 = optimizedPath, i$39 = -1, n$30 = src$7.length, opt$2 = new Array(n$30);
                    while (++i$39 < n$30) {
                        opt$2[i$39] = src$7[i$39];
                    }
                    var reqLen = req$3.length - 1, optLen = opt$2.length - 1, i$40 = -1, n$31 = requestedPath.length, j$2 = depth, k$6 = height, x$3;
                    while (++i$40 < n$31) {
                        req$3[++reqLen] = path[i$40 + boundLength] != null && typeof path[i$40 + boundLength] === 'object' && [requestedPath[i$40]] || requestedPath[i$40];
                    }
                    i$40 = -1;
                    n$31 = height - depth;
                    while (++i$40 < n$31) {
                        x$3 = req$3[++reqLen] = path[++j$2 + boundLength];
                        x$3 != null && (opt$2[++optLen] = x$3);
                    }
                    req$3.pathSetIndex = index$2;
                    requestedMissingPaths[requestedMissingPaths.length] = req$3;
                    optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
                }
                appendNullKey = false;
                jsonRoot != null && (values[jsonValueOffset + index$2] = hasValue && { json: jsons[-1] } || void 0);
                var key$3;
                depth = depth;
                unroll_6174:
                    do {
                        if (depth < 0) {
                            depth = (path.depth = 0) - 1;
                            break unroll_6174;
                        }
                        if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                            depth = path.depth = depth - 1;
                            continue unroll_6174;
                        }
                        if (Array.isArray(key$3)) {
                            if (++key$3.index === key$3.length) {
                                if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                    depth = path.depth = depth - 1;
                                    continue unroll_6174;
                                }
                            } else {
                                depth = path.depth = depth;
                                break unroll_6174;
                            }
                        }
                        if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                            key$3[__OFFSET] = key$3.from;
                            depth = path.depth = depth - 1;
                            continue unroll_6174;
                        }
                        depth = path.depth = depth;
                        break unroll_6174;
                    } while (true);
                depth = depth;
            }
        }
        jsonValueOffset += pathSets.length;
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGsAsJSONG(model, envelopes, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var nodeRoot = model._cache || (model._cache = {}), nodeParent = nodeRoot, node = nodeParent, boundLength = 0;
    boundPath = model._path || [];
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$8, y) {
        return y;
    });
    var nodes = envelopes.nodes || (envelopes.nodes = []);
    var messages = envelopes.messages || (envelopes.messages = []);
    var jsons = envelopes.jsons || (envelopes.jsons = []);
    var errors = envelopes.errors || (envelopes.errors = []);
    var refs = envelopes.refs || (envelopes.refs = []);
    var depth = envelopes.depth || (envelopes.depth = 0);
    var refIndex = envelopes.refIndex || (envelopes.refIndex = 0);
    var refDepth = envelopes.refDepth || (envelopes.refDepth = 0);
    var requestedPath = envelopes.requestedPath || (envelopes.requestedPath = []);
    var optimizedPath = envelopes.optimizedPath || (envelopes.optimizedPath = []);
    var requestedPaths = envelopes.requestedPaths || (envelopes.requestedPaths = []);
    var optimizedPaths = envelopes.optimizedPaths || (envelopes.optimizedPaths = []);
    var requestedMissingPaths = envelopes.requestedMissingPaths || (envelopes.requestedMissingPaths = []);
    var optimizedMissingPaths = envelopes.optimizedMissingPaths || (envelopes.optimizedMissingPaths = []);
    var hasValue = envelopes.hasValue || (envelopes.hasValue = false);
    var jsonRoot = envelopes.jsonRoot || (envelopes.jsonRoot = values && values[0]);
    var jsonParent = envelopes.jsonParent || (envelopes.jsonParent = jsonRoot);
    var jsonNode = envelopes.jsonNode || (envelopes.jsonNode = jsonParent);
    var path, length = 0, height = 0, reference, refLength = 0, refHeight = 0, messageRoot, messageParent, message, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires, messageType, messageValue, messageSize, messageTimestamp, messageExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-1] = jsonParent;
    jsons[-2] = jsons;
    var envelope, pathSets, index = -1, count = envelopes.length;
    while (++index < count) {
        envelope = envelopes[index];
        pathSets = envelope.paths;
        messages[-1] = messageRoot = envelope.jsong || envelope.values || envelope.value || Object.create(null);
        var index$2 = -1, count$2 = pathSets.length;
        while (++index$2 < count$2) {
            path = pathSets[index$2];
            depth = 0;
            length = path.length;
            height = length - 1;
            var ref;
            refs.length = 0;
            while (depth > -1) {
                refIndex = depth;
                while (--refIndex >= -1) {
                    if (!!(ref = refs[refIndex])) {
                        refLength = ref.length;
                        var i = -1, j = 0;
                        while (++i < refLength) {
                            optimizedPath[j++] = ref[i];
                        }
                        i = ++refIndex;
                        while (i < depth) {
                            optimizedPath[j++] = requestedPath[i++];
                        }
                        optimizedPath.length = j;
                        break;
                    }
                }
                var key, isKeySet;
                path = path;
                height = (length = path.length) - 1;
                nodeParent = nodes[depth - 1];
                nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                    node = nodeParent;
                    nodeParent = nodes;
                    key = depth - 1;
                    isKeySet = false;
                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                    node = nodeParent[key];
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    nodeTimestamp = node && node[$TIMESTAMP];
                    nodeExpires = node && node[$EXPIRES];
                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    message = messageParent[key];
                    messageType = message && message[$TYPE] || void 0;
                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                    messageTimestamp = message && message[$TIMESTAMP];
                    messageExpires = message && message[$EXPIRES];
                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                    }
                    if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                        message = message;
                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                            messageType = 'array';
                            message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                            delete messageValue[$SIZE];
                            messageValue[__CONTAINER] = message;
                        } else if (messageType === SENTINEL) {
                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                        } else if (messageType === ERROR) {
                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                        } else if (!(message != null && typeof message === 'object')) {
                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                            messageType = 'sentinel';
                            message = { 'value': messageValue };
                            message[$TYPE] = messageType;
                            message[$SIZE] = messageSize;
                        } else {
                            messageType = message[$TYPE] = messageType || 'leaf';
                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                        }
                        ;
                        var size_offset = messageSize - (node && node[$SIZE] || 0);
                        if (node != null && node !== message) {
                            var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = message[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                            while (++i$2 < nodeRefsLength) {
                                if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                    ref$2[__CONTEXT] = message;
                                    message[__REF + (destRefsLength + i$2)] = ref$2;
                                    node[__REF + i$2] = void 0;
                                }
                            }
                            message[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                            node[__REFS_LENGTH] = ref$2 = void 0;
                            var invParent = nodeParent, invChild = node, invKey = key, keys, index$3, offset, childType, childValue, isBranch, stack = [
                                    nodeParent,
                                    invKey,
                                    node
                                ], depth$2 = 0;
                            while (depth$2 > -1) {
                                nodeParent = stack[offset = depth$2 * 8];
                                invKey = stack[offset + 1];
                                node = stack[offset + 2];
                                if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                                    childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                                if ((isBranch = stack[offset + 5]) === void 0) {
                                    isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                }
                                if (isBranch === true) {
                                    if ((keys = stack[offset + 6]) === void 0) {
                                        keys = stack[offset + 6] = [];
                                        index$3 = -1;
                                        for (invKey in node) {
                                            !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys[++index$3] = invKey);
                                        }
                                    }
                                    index$3 = stack[offset + 7] || (stack[offset + 7] = 0);
                                    if (index$3 < keys.length) {
                                        stack[offset + 7] = index$3 + 1;
                                        stack[offset = ++depth$2 * 8] = node;
                                        stack[offset + 1] = invKey = keys[index$3];
                                        stack[offset + 2] = node[invKey];
                                        continue;
                                    }
                                }
                                var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                if (ref$3 && Array.isArray(ref$3)) {
                                    destination = ref$3[__CONTEXT];
                                    if (destination) {
                                        var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                        while (++i$3 <= n) {
                                            destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                        }
                                        destination[__REFS_LENGTH] = n;
                                        ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                    }
                                }
                                var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                while (++i$4 < n$2) {
                                    if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                        ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                                    (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                    (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                    node === head && (root$2.__head = root$2.__next = head = next);
                                    node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                                    node.__next = node.__prev = void 0;
                                    head = tail = next = prev = void 0;
                                }
                                nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                delete stack[offset + 0];
                                delete stack[offset + 1];
                                delete stack[offset + 2];
                                delete stack[offset + 3];
                                delete stack[offset + 4];
                                delete stack[offset + 5];
                                delete stack[offset + 6];
                                delete stack[offset + 7];
                                --depth$2;
                            }
                            nodeParent = invParent;
                            node = invChild;
                        }
                        nodeParent[key] = node = message;
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                        var node$2 = nodeParent, child = node, stack$2 = [];
                        while (node = nodeParent) {
                            nodeParent = node[__PARENT];
                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                                var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                if (ref$5 && Array.isArray(ref$5)) {
                                    destination$2 = ref$5[__CONTEXT];
                                    if (destination$2) {
                                        var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                        while (++i$5 <= n$3) {
                                            destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                        }
                                        destination$2[__REFS_LENGTH] = n$3;
                                        ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                                    }
                                }
                                var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                while (++i$6 < n$4) {
                                    if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                        ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                                    (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                                    (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                                    node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                                    node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                                    node.__next = node.__prev = void 0;
                                    head$2 = tail$2 = next$2 = prev$2 = void 0;
                                }
                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                var depth$3 = 0, references, ref$7, i$7, k, n$5;
                                while (depth$3 > -1) {
                                    if ((references = stack$2[depth$3]) === void 0) {
                                        i$7 = k = -1;
                                        n$5 = node[__REFS_LENGTH] || 0;
                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                        node[__GENERATION] = __GENERATION_GUID++;
                                        if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            stack$2[depth$3] = references = new Array(n$5 + 1);
                                            references[++k] = ref$7;
                                        } else if (n$5 > 0) {
                                            stack$2[depth$3] = references = new Array(n$5);
                                        }
                                        while (++i$7 < n$5) {
                                            if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                references[++k] = ref$7;
                                            }
                                        }
                                    }
                                    if ((node = references && references.pop()) !== void 0) {
                                        ++depth$3;
                                    } else {
                                        stack$2[depth$3--] = void 0;
                                    }
                                }
                            }
                        }
                        nodeParent = node$2;
                        node = child;
                    }
                    if (node != null && jsonParent != null) {
                        if (boxed === true) {
                            jsonParent[key] = node;
                        } else {
                            var val = nodeValue;
                            if (val != null && typeof val === 'object') {
                                var src = val, keys$2 = Object.keys(src), x, i$8 = -1, n$6 = keys$2.length;
                                val = Array.isArray(src) && new Array(src.length) || Object.create(null);
                                while (++i$8 < n$6) {
                                    x = keys$2[i$8];
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT)) && (val[x] = src[x]);
                                }
                            }
                            if (!nodeType && (val != null && typeof val === 'object') && !Array.isArray(val)) {
                                val[$TYPE] = LEAF;
                            }
                            jsonParent[key] = val;
                        }
                    }
                    node = node;
                } else {
                    nodeParent = node = nodes[depth - 1];
                    messageParent = message = messages[depth - 1];
                    jsonParent = jsonNode = jsons[depth - 1];
                    depth = depth;
                    follow_path_11463:
                        do {
                            key = path[depth];
                            if (isKeySet = key != null && typeof key === 'object') {
                                if (Array.isArray(key)) {
                                    if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                        key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            if (key === __NULL) {
                                key = null;
                            }
                            depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                            if (key != null) {
                                if (depth < height) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    message = messageParent[key];
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    messageTimestamp = message && message[$TIMESTAMP];
                                    messageExpires = message && message[$EXPIRES];
                                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                    }
                                    node = node;
                                    message = message;
                                    merge_node_11607:
                                        do {
                                            if (node === message) {
                                                node = node;
                                                break merge_node_11607;
                                            }
                                            if (node != null) {
                                                if (message != null) {
                                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                            if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                message = message;
                                                                node = node;
                                                                nodeValue = nodeValue;
                                                                messageValue = messageValue;
                                                                replace_cache_reference_11795:
                                                                    do {
                                                                        // compare the cache and message references.
                                                                        // if they're the same, break early so we don't insert.
                                                                        // if they're different, replace the cache reference.
                                                                        var i$9 = nodeValue.length;
                                                                        // If the reference lengths are equal, we have to check their keys
                                                                        // for equality.
                                                                        // If their lengths aren't the equal, the references aren't equal.
                                                                        // Insert the reference from the message.
                                                                        if (i$9 === messageValue.length) {
                                                                            while (--i$9 > -1) {
                                                                                // If any of their keys are different, replace the reference
                                                                                // in the cache with the reference in the message.
                                                                                if (nodeValue[i$9] !== messageValue[i$9]) {
                                                                                    message = message;
                                                                                    break replace_cache_reference_11795;
                                                                                }
                                                                            }
                                                                            if (i$9 === -1) {
                                                                                message = node;
                                                                                break replace_cache_reference_11795;
                                                                            }
                                                                        }
                                                                        message = message;
                                                                        break replace_cache_reference_11795;
                                                                    } while (true);
                                                                message = message;
                                                            }
                                                        }
                                                    }
                                                    if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                        node = node;
                                                        break merge_node_11607;
                                                    }
                                                } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                    node = message = node;
                                                    break merge_node_11607;
                                                }
                                            }
                                            if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                message = message;
                                                if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                    delete messageValue[$SIZE];
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === SENTINEL) {
                                                    message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === ERROR) {
                                                    message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                } else if (!(message != null && typeof message === 'object')) {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                    messageType = 'sentinel';
                                                    message = { 'value': messageValue };
                                                    message[$TYPE] = messageType;
                                                    message[$SIZE] = messageSize;
                                                } else {
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                    message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                }
                                                ;
                                            }
                                            var size_offset$2 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                            if (node != null && node !== message) {
                                                var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = message[__REFS_LENGTH] || 0, i$10 = -1, ref$8;
                                                while (++i$10 < nodeRefsLength$2) {
                                                    if ((ref$8 = node[__REF + i$10]) !== void 0) {
                                                        ref$8[__CONTEXT] = message;
                                                        message[__REF + (destRefsLength$2 + i$10)] = ref$8;
                                                        node[__REF + i$10] = void 0;
                                                    }
                                                }
                                                message[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                                node[__REFS_LENGTH] = ref$8 = void 0;
                                                var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$4, offset$2, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                        nodeParent,
                                                        invKey$2,
                                                        node
                                                    ], depth$4 = 0;
                                                while (depth$4 > -1) {
                                                    nodeParent = stack$3[offset$2 = depth$4 * 8];
                                                    invKey$2 = stack$3[offset$2 + 1];
                                                    node = stack$3[offset$2 + 2];
                                                    if ((childType$2 = stack$3[offset$2 + 3]) === void 0 || (childType$2 = void 0)) {
                                                        childType$2 = stack$3[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                    }
                                                    childValue$2 = stack$3[offset$2 + 4] || (stack$3[offset$2 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                    if ((isBranch$2 = stack$3[offset$2 + 5]) === void 0) {
                                                        isBranch$2 = stack$3[offset$2 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                    }
                                                    if (isBranch$2 === true) {
                                                        if ((keys$3 = stack$3[offset$2 + 6]) === void 0) {
                                                            keys$3 = stack$3[offset$2 + 6] = [];
                                                            index$4 = -1;
                                                            for (invKey$2 in node) {
                                                                !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$3[++index$4] = invKey$2);
                                                            }
                                                        }
                                                        index$4 = stack$3[offset$2 + 7] || (stack$3[offset$2 + 7] = 0);
                                                        if (index$4 < keys$3.length) {
                                                            stack$3[offset$2 + 7] = index$4 + 1;
                                                            stack$3[offset$2 = ++depth$4 * 8] = node;
                                                            stack$3[offset$2 + 1] = invKey$2 = keys$3[index$4];
                                                            stack$3[offset$2 + 2] = node[invKey$2];
                                                            continue;
                                                        }
                                                    }
                                                    var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                    if (ref$9 && Array.isArray(ref$9)) {
                                                        destination$3 = ref$9[__CONTEXT];
                                                        if (destination$3) {
                                                            var i$11 = (ref$9[__REF_INDEX] || 0) - 1, n$7 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$11 <= n$7) {
                                                                destination$3[__REF + i$11] = destination$3[__REF + (i$11 + 1)];
                                                            }
                                                            destination$3[__REFS_LENGTH] = n$7;
                                                            ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                        }
                                                    }
                                                    var ref$10, i$12 = -1, n$8 = node[__REFS_LENGTH] || 0;
                                                    while (++i$12 < n$8) {
                                                        if ((ref$10 = node[__REF + i$12]) !== void 0) {
                                                            ref$10[__CONTEXT] = node[__REF + i$12] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    if (node != null && typeof node === 'object') {
                                                        var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3, prev$3;
                                                        (next$3 = node.__next) && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                                        (prev$3 = node.__prev) && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                                        node === head$3 && (root$4.__head = root$4.__next = head$3 = next$3);
                                                        node === tail$3 && (root$4.__tail = root$4.__prev = tail$3 = prev$3);
                                                        node.__next = node.__prev = void 0;
                                                        head$3 = tail$3 = next$3 = prev$3 = void 0;
                                                    }
                                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                    delete stack$3[offset$2 + 0];
                                                    delete stack$3[offset$2 + 1];
                                                    delete stack$3[offset$2 + 2];
                                                    delete stack$3[offset$2 + 3];
                                                    delete stack$3[offset$2 + 4];
                                                    delete stack$3[offset$2 + 5];
                                                    delete stack$3[offset$2 + 6];
                                                    delete stack$3[offset$2 + 7];
                                                    --depth$4;
                                                }
                                                nodeParent = invParent$2;
                                                node = invChild$2;
                                            }
                                            nodeParent[key] = node = message;
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeTimestamp = node && node[$TIMESTAMP];
                                            nodeExpires = node && node[$EXPIRES];
                                            var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                            while (node = nodeParent) {
                                                nodeParent = node[__PARENT];
                                                if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                                    var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                    if (ref$11 && Array.isArray(ref$11)) {
                                                        destination$4 = ref$11[__CONTEXT];
                                                        if (destination$4) {
                                                            var i$13 = (ref$11[__REF_INDEX] || 0) - 1, n$9 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$13 <= n$9) {
                                                                destination$4[__REF + i$13] = destination$4[__REF + (i$13 + 1)];
                                                            }
                                                            destination$4[__REFS_LENGTH] = n$9;
                                                            ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                        }
                                                    }
                                                    var ref$12, i$14 = -1, n$10 = node[__REFS_LENGTH] || 0;
                                                    while (++i$14 < n$10) {
                                                        if ((ref$12 = node[__REF + i$14]) !== void 0) {
                                                            ref$12[__CONTEXT] = node[__REF + i$14] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    if (node != null && typeof node === 'object') {
                                                        var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                        (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                        (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                        node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                        node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                        node.__next = node.__prev = void 0;
                                                        head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                    }
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    var depth$5 = 0, references$2, ref$13, i$15, k$2, n$11;
                                                    while (depth$5 > -1) {
                                                        if ((references$2 = stack$4[depth$5]) === void 0) {
                                                            i$15 = k$2 = -1;
                                                            n$11 = node[__REFS_LENGTH] || 0;
                                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                            node[__GENERATION] = __GENERATION_GUID++;
                                                            if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                stack$4[depth$5] = references$2 = new Array(n$11 + 1);
                                                                references$2[++k$2] = ref$13;
                                                            } else if (n$11 > 0) {
                                                                stack$4[depth$5] = references$2 = new Array(n$11);
                                                            }
                                                            while (++i$15 < n$11) {
                                                                if ((ref$13 = node[__REF + i$15]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    references$2[++k$2] = ref$13;
                                                                }
                                                            }
                                                        }
                                                        if ((node = references$2 && references$2.pop()) !== void 0) {
                                                            ++depth$5;
                                                        } else {
                                                            stack$4[depth$5--] = void 0;
                                                        }
                                                    }
                                                }
                                            }
                                            nodeParent = node$3;
                                            node = child$2;
                                            node = node;
                                            break merge_node_11607;
                                        } while (true);
                                    node = node;
                                    node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                    if (node != null && jsonParent != null) {
                                        if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                            if (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                jsonNode = jsonParent[key] = Object.create(null);
                                            }
                                        } else {
                                            if (boxed === true) {
                                                jsonParent[key] = node;
                                            } else {
                                                var val$2 = nodeValue;
                                                if (val$2 != null && typeof val$2 === 'object') {
                                                    var src$2 = val$2, keys$4 = Object.keys(src$2), x$2, i$16 = -1, n$12 = keys$4.length;
                                                    val$2 = Array.isArray(src$2) && new Array(src$2.length) || Object.create(null);
                                                    while (++i$16 < n$12) {
                                                        x$2 = keys$4[i$16];
                                                        !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT)) && (val$2[x$2] = src$2[x$2]);
                                                    }
                                                }
                                                if (!nodeType && (val$2 != null && typeof val$2 === 'object') && !Array.isArray(val$2)) {
                                                    val$2[$TYPE] = LEAF;
                                                }
                                                jsonParent[key] = val$2;
                                            }
                                        }
                                    }
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        do {
                                            if (nodeExpires !== 1) {
                                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                                if (node !== head$5) {
                                                    next$5 && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                    prev$5 && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                    (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                                    root$6.__head = root$6.__next = head$5 = node;
                                                    head$5.__next = next$5;
                                                    head$5.__prev = void 0;
                                                }
                                                if (tail$5 == null || node === tail$5) {
                                                    root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                                }
                                                root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                            }
                                            refs[depth] = nodeValue;
                                            refIndex = depth + 1;
                                            refDepth = 0;
                                            var key$2, isKeySet$2;
                                            reference = nodeValue;
                                            refHeight = (refLength = reference.length) - 1;
                                            nodeParent = nodeRoot;
                                            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                node = node = nodeParent;
                                            } else {
                                                nodeParent = nodeRoot;
                                                messageParent = messageRoot;
                                                jsonParent = jsonRoot;
                                                refDepth = refDepth;
                                                follow_path_12170:
                                                    do {
                                                        key$2 = reference[refDepth];
                                                        isKeySet$2 = false;
                                                        if (key$2 != null) {
                                                            if (refDepth < refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                message = messageParent[key$2];
                                                                messageType = message && message[$TYPE] || void 0;
                                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                                messageTimestamp = message && message[$TIMESTAMP];
                                                                messageExpires = message && message[$EXPIRES];
                                                                if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                                                    message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                                                }
                                                                node = node;
                                                                message = message;
                                                                merge_node_12306:
                                                                    do {
                                                                        if (node === message) {
                                                                            node = node;
                                                                            break merge_node_12306;
                                                                        }
                                                                        if (node != null) {
                                                                            if (message != null) {
                                                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                        if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                                            message = message;
                                                                                            node = node;
                                                                                            nodeValue = nodeValue;
                                                                                            messageValue = messageValue;
                                                                                            replace_cache_reference_12493:
                                                                                                do {
                                                                                                    // compare the cache and message references.
                                                                                                    // if they're the same, break early so we don't insert.
                                                                                                    // if they're different, replace the cache reference.
                                                                                                    var i$17 = nodeValue.length;
                                                                                                    // If the reference lengths are equal, we have to check their keys
                                                                                                    // for equality.
                                                                                                    // If their lengths aren't the equal, the references aren't equal.
                                                                                                    // Insert the reference from the message.
                                                                                                    if (i$17 === messageValue.length) {
                                                                                                        while (--i$17 > -1) {
                                                                                                            // If any of their keys are different, replace the reference
                                                                                                            // in the cache with the reference in the message.
                                                                                                            if (nodeValue[i$17] !== messageValue[i$17]) {
                                                                                                                message = message;
                                                                                                                break replace_cache_reference_12493;
                                                                                                            }
                                                                                                        }
                                                                                                        if (i$17 === -1) {
                                                                                                            message = node;
                                                                                                            break replace_cache_reference_12493;
                                                                                                        }
                                                                                                    }
                                                                                                    message = message;
                                                                                                    break replace_cache_reference_12493;
                                                                                                } while (true);
                                                                                            message = message;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                                                    node = node;
                                                                                    break merge_node_12306;
                                                                                }
                                                                            } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                                                node = message = node;
                                                                                break merge_node_12306;
                                                                            }
                                                                        }
                                                                        if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                                            message = message;
                                                                            if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                messageType = 'array';
                                                                                message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                                                delete messageValue[$SIZE];
                                                                                messageValue[__CONTAINER] = message;
                                                                            } else if (messageType === SENTINEL) {
                                                                                message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                            } else if (messageType === ERROR) {
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            } else if (!(message != null && typeof message === 'object')) {
                                                                                messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                                messageType = 'sentinel';
                                                                                message = { 'value': messageValue };
                                                                                message[$TYPE] = messageType;
                                                                                message[$SIZE] = messageSize;
                                                                            } else {
                                                                                messageType = message[$TYPE] = messageType || 'leaf';
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            }
                                                                            ;
                                                                        }
                                                                        var size_offset$3 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                                                        if (node != null && node !== message) {
                                                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = message[__REFS_LENGTH] || 0, i$18 = -1, ref$14;
                                                                            while (++i$18 < nodeRefsLength$3) {
                                                                                if ((ref$14 = node[__REF + i$18]) !== void 0) {
                                                                                    ref$14[__CONTEXT] = message;
                                                                                    message[__REF + (destRefsLength$3 + i$18)] = ref$14;
                                                                                    node[__REF + i$18] = void 0;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$5, index$5, offset$3, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                    nodeParent,
                                                                                    invKey$3,
                                                                                    node
                                                                                ], depth$6 = 0;
                                                                            while (depth$6 > -1) {
                                                                                nodeParent = stack$5[offset$3 = depth$6 * 8];
                                                                                invKey$3 = stack$5[offset$3 + 1];
                                                                                node = stack$5[offset$3 + 2];
                                                                                if ((childType$3 = stack$5[offset$3 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                    childType$3 = stack$5[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$3 = stack$5[offset$3 + 4] || (stack$5[offset$3 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$3 = stack$5[offset$3 + 5]) === void 0) {
                                                                                    isBranch$3 = stack$5[offset$3 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                                }
                                                                                if (isBranch$3 === true) {
                                                                                    if ((keys$5 = stack$5[offset$3 + 6]) === void 0) {
                                                                                        keys$5 = stack$5[offset$3 + 6] = [];
                                                                                        index$5 = -1;
                                                                                        for (invKey$3 in node) {
                                                                                            !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$5[++index$5] = invKey$3);
                                                                                        }
                                                                                    }
                                                                                    index$5 = stack$5[offset$3 + 7] || (stack$5[offset$3 + 7] = 0);
                                                                                    if (index$5 < keys$5.length) {
                                                                                        stack$5[offset$3 + 7] = index$5 + 1;
                                                                                        stack$5[offset$3 = ++depth$6 * 8] = node;
                                                                                        stack$5[offset$3 + 1] = invKey$3 = keys$5[index$5];
                                                                                        stack$5[offset$3 + 2] = node[invKey$3];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                                if (ref$15 && Array.isArray(ref$15)) {
                                                                                    destination$5 = ref$15[__CONTEXT];
                                                                                    if (destination$5) {
                                                                                        var i$19 = (ref$15[__REF_INDEX] || 0) - 1, n$13 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$19 <= n$13) {
                                                                                            destination$5[__REF + i$19] = destination$5[__REF + (i$19 + 1)];
                                                                                        }
                                                                                        destination$5[__REFS_LENGTH] = n$13;
                                                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$16, i$20 = -1, n$14 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$20 < n$14) {
                                                                                    if ((ref$16 = node[__REF + i$20]) !== void 0) {
                                                                                        ref$16[__CONTEXT] = node[__REF + i$20] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6, prev$6;
                                                                                    (next$6 = node.__next) && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                                                    (prev$6 = node.__prev) && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                                                    node === head$6 && (root$7.__head = root$7.__next = head$6 = next$6);
                                                                                    node === tail$6 && (root$7.__tail = root$7.__prev = tail$6 = prev$6);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$6 = tail$6 = next$6 = prev$6 = void 0;
                                                                                }
                                                                                nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$5[offset$3 + 0];
                                                                                delete stack$5[offset$3 + 1];
                                                                                delete stack$5[offset$3 + 2];
                                                                                delete stack$5[offset$3 + 3];
                                                                                delete stack$5[offset$3 + 4];
                                                                                delete stack$5[offset$3 + 5];
                                                                                delete stack$5[offset$3 + 6];
                                                                                delete stack$5[offset$3 + 7];
                                                                                --depth$6;
                                                                            }
                                                                            nodeParent = invParent$3;
                                                                            node = invChild$3;
                                                                        }
                                                                        nodeParent[key$2] = node = message;
                                                                        nodeType = node && node[$TYPE] || void 0;
                                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                                        nodeExpires = node && node[$EXPIRES];
                                                                        var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$3) <= 0 && true && nodeParent) {
                                                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                                if (ref$17 && Array.isArray(ref$17)) {
                                                                                    destination$6 = ref$17[__CONTEXT];
                                                                                    if (destination$6) {
                                                                                        var i$21 = (ref$17[__REF_INDEX] || 0) - 1, n$15 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$21 <= n$15) {
                                                                                            destination$6[__REF + i$21] = destination$6[__REF + (i$21 + 1)];
                                                                                        }
                                                                                        destination$6[__REFS_LENGTH] = n$15;
                                                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$18, i$22 = -1, n$16 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$22 < n$16) {
                                                                                    if ((ref$18 = node[__REF + i$22]) !== void 0) {
                                                                                        ref$18[__CONTEXT] = node[__REF + i$22] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                    (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                    (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                    node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                    node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$7 = 0, references$3, ref$19, i$23, k$3, n$17;
                                                                                while (depth$7 > -1) {
                                                                                    if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                        i$23 = k$3 = -1;
                                                                                        n$17 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$17 + 1);
                                                                                            references$3[++k$3] = ref$19;
                                                                                        } else if (n$17 > 0) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$17);
                                                                                        }
                                                                                        while (++i$23 < n$17) {
                                                                                            if ((ref$19 = node[__REF + i$23]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$3[++k$3] = ref$19;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                        ++depth$7;
                                                                                    } else {
                                                                                        stack$6[depth$7--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$4;
                                                                        node = child$3;
                                                                        node = node;
                                                                        break merge_node_12306;
                                                                    } while (true);
                                                                node = node;
                                                                node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                                                if (node != null && jsonParent != null) {
                                                                    if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                                        if (!(jsonNode = jsonParent[key$2]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                                            jsonNode = jsonParent[key$2] = Object.create(null);
                                                                        }
                                                                    } else {
                                                                        if (boxed === true) {
                                                                            jsonParent[key$2] = node;
                                                                        } else {
                                                                            var val$3 = nodeValue;
                                                                            if (val$3 != null && typeof val$3 === 'object') {
                                                                                var src$3 = val$3, keys$6 = Object.keys(src$3), x$3, i$24 = -1, n$18 = keys$6.length;
                                                                                val$3 = Array.isArray(src$3) && new Array(src$3.length) || Object.create(null);
                                                                                while (++i$24 < n$18) {
                                                                                    x$3 = keys$6[i$24];
                                                                                    !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT)) && (val$3[x$3] = src$3[x$3]);
                                                                                }
                                                                            }
                                                                            if (!nodeType && (val$3 != null && typeof val$3 === 'object') && !Array.isArray(val$3)) {
                                                                                val$3[$TYPE] = LEAF;
                                                                            }
                                                                            jsonParent[key$2] = val$3;
                                                                        }
                                                                    }
                                                                }
                                                                if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                    nodeParent = node;
                                                                    break follow_path_12170;
                                                                }
                                                                nodeParent = node;
                                                                messageParent = message;
                                                                jsonParent = jsonNode;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_12170;
                                                            } else if (refDepth === refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                message = messageParent[key$2];
                                                                messageType = message && message[$TYPE] || void 0;
                                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                                messageTimestamp = message && message[$TIMESTAMP];
                                                                messageExpires = message && message[$EXPIRES];
                                                                if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                                                    message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                                                }
                                                                node = node;
                                                                message = message;
                                                                merge_node_12874:
                                                                    do {
                                                                        if (node === message) {
                                                                            node = node;
                                                                            break merge_node_12874;
                                                                        }
                                                                        if (node != null) {
                                                                            if (message != null) {
                                                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                        if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                                            message = message;
                                                                                            node = node;
                                                                                            nodeValue = nodeValue;
                                                                                            messageValue = messageValue;
                                                                                            replace_cache_reference_13060:
                                                                                                do {
                                                                                                    // compare the cache and message references.
                                                                                                    // if they're the same, break early so we don't insert.
                                                                                                    // if they're different, replace the cache reference.
                                                                                                    var i$25 = nodeValue.length;
                                                                                                    // If the reference lengths are equal, we have to check their keys
                                                                                                    // for equality.
                                                                                                    // If their lengths aren't the equal, the references aren't equal.
                                                                                                    // Insert the reference from the message.
                                                                                                    if (i$25 === messageValue.length) {
                                                                                                        while (--i$25 > -1) {
                                                                                                            // If any of their keys are different, replace the reference
                                                                                                            // in the cache with the reference in the message.
                                                                                                            if (nodeValue[i$25] !== messageValue[i$25]) {
                                                                                                                message = message;
                                                                                                                break replace_cache_reference_13060;
                                                                                                            }
                                                                                                        }
                                                                                                        if (i$25 === -1) {
                                                                                                            message = node;
                                                                                                            break replace_cache_reference_13060;
                                                                                                        }
                                                                                                    }
                                                                                                    message = message;
                                                                                                    break replace_cache_reference_13060;
                                                                                                } while (true);
                                                                                            message = message;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                                                    node = node;
                                                                                    break merge_node_12874;
                                                                                }
                                                                            } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                                                node = message = node;
                                                                                break merge_node_12874;
                                                                            }
                                                                        }
                                                                        if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                                            message = message;
                                                                            if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                messageType = 'array';
                                                                                message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                                                delete messageValue[$SIZE];
                                                                                messageValue[__CONTAINER] = message;
                                                                            } else if (messageType === SENTINEL) {
                                                                                message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                            } else if (messageType === ERROR) {
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            } else if (!(message != null && typeof message === 'object')) {
                                                                                messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                                messageType = 'sentinel';
                                                                                message = { 'value': messageValue };
                                                                                message[$TYPE] = messageType;
                                                                                message[$SIZE] = messageSize;
                                                                            } else {
                                                                                messageType = message[$TYPE] = messageType || 'leaf';
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            }
                                                                            ;
                                                                        }
                                                                        var size_offset$4 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                                                        if (node != null && node !== message) {
                                                                            var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = message[__REFS_LENGTH] || 0, i$26 = -1, ref$20;
                                                                            while (++i$26 < nodeRefsLength$4) {
                                                                                if ((ref$20 = node[__REF + i$26]) !== void 0) {
                                                                                    ref$20[__CONTEXT] = message;
                                                                                    message[__REF + (destRefsLength$4 + i$26)] = ref$20;
                                                                                    node[__REF + i$26] = void 0;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                            node[__REFS_LENGTH] = ref$20 = void 0;
                                                                            var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$7, index$6, offset$4, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                    nodeParent,
                                                                                    invKey$4,
                                                                                    node
                                                                                ], depth$8 = 0;
                                                                            while (depth$8 > -1) {
                                                                                nodeParent = stack$7[offset$4 = depth$8 * 8];
                                                                                invKey$4 = stack$7[offset$4 + 1];
                                                                                node = stack$7[offset$4 + 2];
                                                                                if ((childType$4 = stack$7[offset$4 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                    childType$4 = stack$7[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$4 = stack$7[offset$4 + 4] || (stack$7[offset$4 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$4 = stack$7[offset$4 + 5]) === void 0) {
                                                                                    isBranch$4 = stack$7[offset$4 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                                }
                                                                                if (isBranch$4 === true) {
                                                                                    if ((keys$7 = stack$7[offset$4 + 6]) === void 0) {
                                                                                        keys$7 = stack$7[offset$4 + 6] = [];
                                                                                        index$6 = -1;
                                                                                        for (invKey$4 in node) {
                                                                                            !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$7[++index$6] = invKey$4);
                                                                                        }
                                                                                    }
                                                                                    index$6 = stack$7[offset$4 + 7] || (stack$7[offset$4 + 7] = 0);
                                                                                    if (index$6 < keys$7.length) {
                                                                                        stack$7[offset$4 + 7] = index$6 + 1;
                                                                                        stack$7[offset$4 = ++depth$8 * 8] = node;
                                                                                        stack$7[offset$4 + 1] = invKey$4 = keys$7[index$6];
                                                                                        stack$7[offset$4 + 2] = node[invKey$4];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                                if (ref$21 && Array.isArray(ref$21)) {
                                                                                    destination$7 = ref$21[__CONTEXT];
                                                                                    if (destination$7) {
                                                                                        var i$27 = (ref$21[__REF_INDEX] || 0) - 1, n$19 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$27 <= n$19) {
                                                                                            destination$7[__REF + i$27] = destination$7[__REF + (i$27 + 1)];
                                                                                        }
                                                                                        destination$7[__REFS_LENGTH] = n$19;
                                                                                        ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$22, i$28 = -1, n$20 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$28 < n$20) {
                                                                                    if ((ref$22 = node[__REF + i$28]) !== void 0) {
                                                                                        ref$22[__CONTEXT] = node[__REF + i$28] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                    (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                    (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                    node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                    node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                                }
                                                                                nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$7[offset$4 + 0];
                                                                                delete stack$7[offset$4 + 1];
                                                                                delete stack$7[offset$4 + 2];
                                                                                delete stack$7[offset$4 + 3];
                                                                                delete stack$7[offset$4 + 4];
                                                                                delete stack$7[offset$4 + 5];
                                                                                delete stack$7[offset$4 + 6];
                                                                                delete stack$7[offset$4 + 7];
                                                                                --depth$8;
                                                                            }
                                                                            nodeParent = invParent$4;
                                                                            node = invChild$4;
                                                                        }
                                                                        nodeParent[key$2] = node = message;
                                                                        nodeType = node && node[$TYPE] || void 0;
                                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                                        nodeExpires = node && node[$EXPIRES];
                                                                        var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$4) <= 0 && true && nodeParent) {
                                                                                var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                                if (ref$23 && Array.isArray(ref$23)) {
                                                                                    destination$8 = ref$23[__CONTEXT];
                                                                                    if (destination$8) {
                                                                                        var i$29 = (ref$23[__REF_INDEX] || 0) - 1, n$21 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$29 <= n$21) {
                                                                                            destination$8[__REF + i$29] = destination$8[__REF + (i$29 + 1)];
                                                                                        }
                                                                                        destination$8[__REFS_LENGTH] = n$21;
                                                                                        ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$24, i$30 = -1, n$22 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$30 < n$22) {
                                                                                    if ((ref$24 = node[__REF + i$30]) !== void 0) {
                                                                                        ref$24[__CONTEXT] = node[__REF + i$30] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                    (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                    (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                    node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                    node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$9 = 0, references$4, ref$25, i$31, k$4, n$23;
                                                                                while (depth$9 > -1) {
                                                                                    if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                        i$31 = k$4 = -1;
                                                                                        n$23 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$23 + 1);
                                                                                            references$4[++k$4] = ref$25;
                                                                                        } else if (n$23 > 0) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$23);
                                                                                        }
                                                                                        while (++i$31 < n$23) {
                                                                                            if ((ref$25 = node[__REF + i$31]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$4[++k$4] = ref$25;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                        ++depth$9;
                                                                                    } else {
                                                                                        stack$8[depth$9--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$5;
                                                                        node = child$4;
                                                                        node = node;
                                                                        break merge_node_12874;
                                                                    } while (true);
                                                                node = node;
                                                                node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                                                if (node != null && jsonParent != null) {
                                                                    if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                                        if (!(jsonNode = jsonParent[key$2]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                                            jsonNode = jsonParent[key$2] = Object.create(null);
                                                                        }
                                                                    } else {
                                                                        if (boxed === true) {
                                                                            jsonParent[key$2] = node;
                                                                        } else {
                                                                            var val$4 = nodeValue;
                                                                            if (val$4 != null && typeof val$4 === 'object') {
                                                                                var src$4 = val$4, keys$8 = Object.keys(src$4), x$4, i$32 = -1, n$24 = keys$8.length;
                                                                                val$4 = Array.isArray(src$4) && new Array(src$4.length) || Object.create(null);
                                                                                while (++i$32 < n$24) {
                                                                                    x$4 = keys$8[i$32];
                                                                                    !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT)) && (val$4[x$4] = src$4[x$4]);
                                                                                }
                                                                            }
                                                                            if (!nodeType && (val$4 != null && typeof val$4 === 'object') && !Array.isArray(val$4)) {
                                                                                val$4[$TYPE] = LEAF;
                                                                            }
                                                                            jsonParent[key$2] = val$4;
                                                                        }
                                                                    }
                                                                }
                                                                if (node != null) {
                                                                    var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                    // Set up the hard-link so we don't have to do all
                                                                    // this work the next time we follow this reference.
                                                                    if (refContext === void 0) {
                                                                        // create a back reference
                                                                        var backRefs = node[__REFS_LENGTH] || 0;
                                                                        node[__REF + backRefs] = refContainer;
                                                                        node[__REFS_LENGTH] = backRefs + 1;
                                                                        // create a hard reference
                                                                        refContainer[__REF_INDEX] = backRefs;
                                                                        refContainer[__CONTEXT] = node;
                                                                        refContainer = backRefs = void 0;
                                                                    }
                                                                    ;
                                                                }
                                                                appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                nodeParent = node;
                                                                break follow_path_12170;
                                                            }
                                                        } else if (refDepth < refHeight) {
                                                            nodeParent = node;
                                                            messageParent = message;
                                                            jsonParent = jsonNode;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_12170;
                                                        }
                                                        nodeParent = node;
                                                        break follow_path_12170;
                                                    } while (true);
                                                node = nodeParent;
                                            }
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeExpires = node && node[$EXPIRES];
                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                        } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                        if (node == null) {
                                            while (refDepth <= refHeight) {
                                                optimizedPath[refDepth] = reference[refDepth++];
                                            }
                                        }
                                    }
                                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                        nodeParent = node;
                                        break follow_path_11463;
                                    }
                                    nodeParent = nodes[depth] = node;
                                    messageParent = messages[depth] = message;
                                    jsonParent = jsons[depth] = jsonNode;
                                    depth = depth + 1;
                                    continue follow_path_11463;
                                } else if (depth === height) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    message = messageParent[key];
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    messageTimestamp = message && message[$TIMESTAMP];
                                    messageExpires = message && message[$EXPIRES];
                                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                    }
                                    if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            messageType = 'array';
                                            message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                            delete messageValue[$SIZE];
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = { 'value': messageValue };
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || 'leaf';
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                        ;
                                        var size_offset$5 = messageSize - (node && node[$SIZE] || 0);
                                        if (node != null && node !== message) {
                                            var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = message[__REFS_LENGTH] || 0, i$33 = -1, ref$26;
                                            while (++i$33 < nodeRefsLength$5) {
                                                if ((ref$26 = node[__REF + i$33]) !== void 0) {
                                                    ref$26[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$5 + i$33)] = ref$26;
                                                    node[__REF + i$33] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                            node[__REFS_LENGTH] = ref$26 = void 0;
                                            var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$9, index$7, offset$5, childType$5, childValue$5, isBranch$5, stack$9 = [
                                                    nodeParent,
                                                    invKey$5,
                                                    node
                                                ], depth$10 = 0;
                                            while (depth$10 > -1) {
                                                nodeParent = stack$9[offset$5 = depth$10 * 8];
                                                invKey$5 = stack$9[offset$5 + 1];
                                                node = stack$9[offset$5 + 2];
                                                if ((childType$5 = stack$9[offset$5 + 3]) === void 0 || (childType$5 = void 0)) {
                                                    childType$5 = stack$9[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$5 = stack$9[offset$5 + 4] || (stack$9[offset$5 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$5 = stack$9[offset$5 + 5]) === void 0) {
                                                    isBranch$5 = stack$9[offset$5 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                                }
                                                if (isBranch$5 === true) {
                                                    if ((keys$9 = stack$9[offset$5 + 6]) === void 0) {
                                                        keys$9 = stack$9[offset$5 + 6] = [];
                                                        index$7 = -1;
                                                        for (invKey$5 in node) {
                                                            !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$9[++index$7] = invKey$5);
                                                        }
                                                    }
                                                    index$7 = stack$9[offset$5 + 7] || (stack$9[offset$5 + 7] = 0);
                                                    if (index$7 < keys$9.length) {
                                                        stack$9[offset$5 + 7] = index$7 + 1;
                                                        stack$9[offset$5 = ++depth$10 * 8] = node;
                                                        stack$9[offset$5 + 1] = invKey$5 = keys$9[index$7];
                                                        stack$9[offset$5 + 2] = node[invKey$5];
                                                        continue;
                                                    }
                                                }
                                                var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                                if (ref$27 && Array.isArray(ref$27)) {
                                                    destination$9 = ref$27[__CONTEXT];
                                                    if (destination$9) {
                                                        var i$34 = (ref$27[__REF_INDEX] || 0) - 1, n$25 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$34 <= n$25) {
                                                            destination$9[__REF + i$34] = destination$9[__REF + (i$34 + 1)];
                                                        }
                                                        destination$9[__REFS_LENGTH] = n$25;
                                                        ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                                    }
                                                }
                                                var ref$28, i$35 = -1, n$26 = node[__REFS_LENGTH] || 0;
                                                while (++i$35 < n$26) {
                                                    if ((ref$28 = node[__REF + i$35]) !== void 0) {
                                                        ref$28[__CONTEXT] = node[__REF + i$35] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                    (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                    (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                    node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                    node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                    node.__next = node.__prev = void 0;
                                                    head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                }
                                                nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                delete stack$9[offset$5 + 0];
                                                delete stack$9[offset$5 + 1];
                                                delete stack$9[offset$5 + 2];
                                                delete stack$9[offset$5 + 3];
                                                delete stack$9[offset$5 + 4];
                                                delete stack$9[offset$5 + 5];
                                                delete stack$9[offset$5 + 6];
                                                delete stack$9[offset$5 + 7];
                                                --depth$10;
                                            }
                                            nodeParent = invParent$5;
                                            node = invChild$5;
                                        }
                                        nodeParent[key] = node = message;
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var node$6 = nodeParent, child$5 = node, stack$10 = [];
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$5) <= 0 && true && nodeParent) {
                                                var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                                if (ref$29 && Array.isArray(ref$29)) {
                                                    destination$10 = ref$29[__CONTEXT];
                                                    if (destination$10) {
                                                        var i$36 = (ref$29[__REF_INDEX] || 0) - 1, n$27 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$36 <= n$27) {
                                                            destination$10[__REF + i$36] = destination$10[__REF + (i$36 + 1)];
                                                        }
                                                        destination$10[__REFS_LENGTH] = n$27;
                                                        ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                                    }
                                                }
                                                var ref$30, i$37 = -1, n$28 = node[__REFS_LENGTH] || 0;
                                                while (++i$37 < n$28) {
                                                    if ((ref$30 = node[__REF + i$37]) !== void 0) {
                                                        ref$30[__CONTEXT] = node[__REF + i$37] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                                    (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                                    (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                                    node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                                    node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                                    node.__next = node.__prev = void 0;
                                                    head$11 = tail$11 = next$11 = prev$11 = void 0;
                                                }
                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var depth$11 = 0, references$5, ref$31, i$38, k$5, n$29;
                                                while (depth$11 > -1) {
                                                    if ((references$5 = stack$10[depth$11]) === void 0) {
                                                        i$38 = k$5 = -1;
                                                        n$29 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                        if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$10[depth$11] = references$5 = new Array(n$29 + 1);
                                                            references$5[++k$5] = ref$31;
                                                        } else if (n$29 > 0) {
                                                            stack$10[depth$11] = references$5 = new Array(n$29);
                                                        }
                                                        while (++i$38 < n$29) {
                                                            if ((ref$31 = node[__REF + i$38]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                references$5[++k$5] = ref$31;
                                                            }
                                                        }
                                                    }
                                                    if ((node = references$5 && references$5.pop()) !== void 0) {
                                                        ++depth$11;
                                                    } else {
                                                        stack$10[depth$11--] = void 0;
                                                    }
                                                }
                                            }
                                        }
                                        nodeParent = node$6;
                                        node = child$5;
                                    }
                                    if (node != null && jsonParent != null) {
                                        if (boxed === true) {
                                            jsonParent[key] = node;
                                        } else {
                                            var val$5 = nodeValue;
                                            if (val$5 != null && typeof val$5 === 'object') {
                                                var src$5 = val$5, keys$10 = Object.keys(src$5), x$5, i$39 = -1, n$30 = keys$10.length;
                                                val$5 = Array.isArray(src$5) && new Array(src$5.length) || Object.create(null);
                                                while (++i$39 < n$30) {
                                                    x$5 = keys$10[i$39];
                                                    !(!(x$5[0] !== '_' || x$5[1] !== '_') || (x$5 === __SELF || x$5 === __PARENT || x$5 === __ROOT)) && (val$5[x$5] = src$5[x$5]);
                                                }
                                            }
                                            if (!nodeType && (val$5 != null && typeof val$5 === 'object') && !Array.isArray(val$5)) {
                                                val$5[$TYPE] = LEAF;
                                            }
                                            jsonParent[key] = val$5;
                                        }
                                    }
                                    appendNullKey = false;
                                    nodeParent = node;
                                    break follow_path_11463;
                                }
                            } else if (depth < height) {
                                nodeParent = nodeParent;
                                messageParent = messageParent;
                                jsonParent = jsonParent;
                                depth = depth + 1;
                                continue follow_path_11463;
                            }
                            nodeParent = node;
                            break follow_path_11463;
                        } while (true);
                    node = nodeParent;
                }
                if (node != null || boxed === true) {
                    if (nodeType === ERROR) {
                        if (nodeExpires !== 1) {
                            var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12 = node.__next, prev$12 = node.__prev;
                            if (node !== head$12) {
                                next$12 && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                prev$12 && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                (next$12 = head$12) && (head$12 != null && typeof head$12 === 'object') && (head$12.__prev = node);
                                root$13.__head = root$13.__next = head$12 = node;
                                head$12.__next = next$12;
                                head$12.__prev = void 0;
                            }
                            if (tail$12 == null || node === tail$12) {
                                root$13.__tail = root$13.__prev = tail$12 = prev$12 || node;
                            }
                            root$13 = head$12 = tail$12 = next$12 = prev$12 = void 0;
                        }
                        var nodeType$2 = node && node[$TYPE] || void 0;
                        nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                        var pbv = Object.create(null);
                        var src$6 = requestedPath, i$40 = -1, n$31 = src$6.length, req = new Array(n$31);
                        while (++i$40 < n$31) {
                            req[i$40] = src$6[i$40];
                        }
                        if (appendNullKey === true) {
                            req[req.length] = null;
                        }
                        pbv.path = req;
                        if (boxed === true) {
                            pbv.value = node;
                        } else {
                            var dest = nodeValue, src$7 = dest, x$6;
                            if (dest != null && typeof dest === 'object') {
                                dest = Array.isArray(src$7) && [] || Object.create(null);
                                for (x$6 in src$7) {
                                    !(!(x$6[0] !== '_' || x$6[1] !== '_') || (x$6 === __SELF || x$6 === __PARENT || x$6 === __ROOT)) && (dest[x$6] = src$7[x$6]);
                                }
                            }
                            pbv.value = dest;
                        }
                        errors[errors.length] = pbv;
                    }
                    hasValue || (hasValue = jsonParent != null);
                    var src$8 = optimizedPath, i$41 = -1, n$32 = src$8.length, opt = new Array(n$32);
                    while (++i$41 < n$32) {
                        opt[i$41] = src$8[i$41];
                    }
                    var src$9 = requestedPath, i$42 = -1, n$33 = src$9.length, req$2 = new Array(n$33);
                    while (++i$42 < n$33) {
                        req$2[i$42] = src$9[i$42];
                    }
                    if (appendNullKey === true) {
                        req$2[req$2.length] = null;
                    }
                    requestedPaths[requestedPaths.length] = req$2;
                    optimizedPaths[optimizedPaths.length] = opt;
                }
                if (boxed === false && node == null || refreshing === true) {
                    var src$10 = boundPath, i$43 = -1, n$34 = src$10.length, req$3 = new Array(n$34);
                    while (++i$43 < n$34) {
                        req$3[i$43] = src$10[i$43];
                    }
                    var src$11 = optimizedPath, i$44 = -1, n$35 = src$11.length, opt$2 = new Array(n$35);
                    while (++i$44 < n$35) {
                        opt$2[i$44] = src$11[i$44];
                    }
                    var reqLen = req$3.length - 1, optLen = opt$2.length - 1, i$45 = -1, n$36 = requestedPath.length, j$2 = depth, k$6 = height, x$7;
                    while (++i$45 < n$36) {
                        req$3[++reqLen] = path[i$45 + boundLength] != null && typeof path[i$45 + boundLength] === 'object' && [requestedPath[i$45]] || requestedPath[i$45];
                    }
                    i$45 = -1;
                    n$36 = height - depth;
                    while (++i$45 < n$36) {
                        x$7 = req$3[++reqLen] = path[++j$2 + boundLength];
                        x$7 != null && (opt$2[++optLen] = x$7);
                    }
                    req$3.pathSetIndex = index$2;
                    requestedMissingPaths[requestedMissingPaths.length] = req$3;
                    optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
                }
                appendNullKey = false;
                var key$3;
                depth = depth;
                unroll_11071:
                    do {
                        if (depth < 0) {
                            depth = (path.depth = 0) - 1;
                            break unroll_11071;
                        }
                        if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                            depth = path.depth = depth - 1;
                            continue unroll_11071;
                        }
                        if (Array.isArray(key$3)) {
                            if (++key$3.index === key$3.length) {
                                if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                    depth = path.depth = depth - 1;
                                    continue unroll_11071;
                                }
                            } else {
                                depth = path.depth = depth;
                                break unroll_11071;
                            }
                        }
                        if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                            key$3[__OFFSET] = key$3.from;
                            depth = path.depth = depth - 1;
                            continue unroll_11071;
                        }
                        depth = path.depth = depth;
                        break unroll_11071;
                    } while (true);
                depth = depth;
            }
        }
    }
    values && (values[0] = hasValue && {
        paths: requestedPaths,
        jsong: jsons[-1]
    } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGsAsPathMap(model, envelopes, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    var boundLength = 0, nodeRoot = model._cache || (model._cache = {}), nodeParent, node;
    if (Array.isArray(boundPath)) {
        nodeParent = nodeRoot;
        boundLength = boundPath.length;
    } else {
        nodeParent = getBoundContext(model);
        boundPath = model._path || [];
    }
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$6, y) {
        return y;
    });
    var nodes = envelopes.nodes || (envelopes.nodes = []);
    var messages = envelopes.messages || (envelopes.messages = []);
    var jsons = envelopes.jsons || (envelopes.jsons = []);
    var errors = envelopes.errors || (envelopes.errors = []);
    var refs = envelopes.refs || (envelopes.refs = []);
    var depth = envelopes.depth || (envelopes.depth = 0);
    var refIndex = envelopes.refIndex || (envelopes.refIndex = 0);
    var refDepth = envelopes.refDepth || (envelopes.refDepth = 0);
    var requestedPath = envelopes.requestedPath || (envelopes.requestedPath = []);
    var optimizedPath = envelopes.optimizedPath || (envelopes.optimizedPath = []);
    var requestedPaths = envelopes.requestedPaths || (envelopes.requestedPaths = []);
    var optimizedPaths = envelopes.optimizedPaths || (envelopes.optimizedPaths = []);
    var requestedMissingPaths = envelopes.requestedMissingPaths || (envelopes.requestedMissingPaths = []);
    var optimizedMissingPaths = envelopes.optimizedMissingPaths || (envelopes.optimizedMissingPaths = []);
    var hasValue = envelopes.hasValue || (envelopes.hasValue = false);
    var jsonRoot = envelopes.jsonRoot || (envelopes.jsonRoot = values && values[0]);
    var jsonParent = envelopes.jsonParent || (envelopes.jsonParent = jsonRoot);
    var jsonNode = envelopes.jsonNode || (envelopes.jsonNode = jsonParent);
    var path, length = 0, height = 0, reference, refLength = 0, refHeight = 0, messageRoot, messageParent, message, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires, messageType, messageValue, messageSize, messageTimestamp, messageExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    jsons[-1] = jsonParent;
    jsons[-2] = jsons;
    var envelope, pathSets, index = -1, count = envelopes.length;
    while (++index < count) {
        envelope = envelopes[index];
        pathSets = envelope.paths;
        messages[-1] = messageRoot = envelope.jsong || envelope.values || envelope.value || Object.create(null);
        var index$2 = -1, count$2 = pathSets.length;
        while (++index$2 < count$2) {
            path = pathSets[index$2];
            depth = 0;
            length = path.length;
            height = length - 1;
            var ref;
            refs.length = 0;
            while (depth > -1) {
                refIndex = depth;
                while (--refIndex >= -1) {
                    if (!!(ref = refs[refIndex])) {
                        refLength = ref.length;
                        var i = -1, j = 0;
                        while (++i < refLength) {
                            optimizedPath[j++] = ref[i];
                        }
                        i = ++refIndex;
                        while (i < depth) {
                            optimizedPath[j++] = requestedPath[i++];
                        }
                        optimizedPath.length = j;
                        break;
                    }
                }
                var key, isKeySet;
                path = path;
                height = (length = path.length) - 1;
                nodeParent = nodes[depth - 1];
                nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                    node = nodeParent;
                    nodeParent = nodes;
                    key = depth - 1;
                    isKeySet = false;
                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                    node = nodeParent[key];
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    nodeTimestamp = node && node[$TIMESTAMP];
                    nodeExpires = node && node[$EXPIRES];
                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    message = messageParent[key];
                    messageType = message && message[$TYPE] || void 0;
                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                    messageTimestamp = message && message[$TIMESTAMP];
                    messageExpires = message && message[$EXPIRES];
                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                    }
                    if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                        message = message;
                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                            messageType = 'array';
                            message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                            delete messageValue[$SIZE];
                            messageValue[__CONTAINER] = message;
                        } else if (messageType === SENTINEL) {
                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                        } else if (messageType === ERROR) {
                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                        } else if (!(message != null && typeof message === 'object')) {
                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                            messageType = 'sentinel';
                            message = { 'value': messageValue };
                            message[$TYPE] = messageType;
                            message[$SIZE] = messageSize;
                        } else {
                            messageType = message[$TYPE] = messageType || 'leaf';
                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                        }
                        ;
                        var size_offset = messageSize - (node && node[$SIZE] || 0);
                        if (node != null && node !== message) {
                            var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = message[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                            while (++i$2 < nodeRefsLength) {
                                if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                    ref$2[__CONTEXT] = message;
                                    message[__REF + (destRefsLength + i$2)] = ref$2;
                                    node[__REF + i$2] = void 0;
                                }
                            }
                            message[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                            node[__REFS_LENGTH] = ref$2 = void 0;
                            var invParent = nodeParent, invChild = node, invKey = key, keys, index$3, offset, childType, childValue, isBranch, stack = [
                                    nodeParent,
                                    invKey,
                                    node
                                ], depth$2 = 0;
                            while (depth$2 > -1) {
                                nodeParent = stack[offset = depth$2 * 8];
                                invKey = stack[offset + 1];
                                node = stack[offset + 2];
                                if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                                    childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                                if ((isBranch = stack[offset + 5]) === void 0) {
                                    isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                }
                                if (isBranch === true) {
                                    if ((keys = stack[offset + 6]) === void 0) {
                                        keys = stack[offset + 6] = [];
                                        index$3 = -1;
                                        for (invKey in node) {
                                            !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys[++index$3] = invKey);
                                        }
                                    }
                                    index$3 = stack[offset + 7] || (stack[offset + 7] = 0);
                                    if (index$3 < keys.length) {
                                        stack[offset + 7] = index$3 + 1;
                                        stack[offset = ++depth$2 * 8] = node;
                                        stack[offset + 1] = invKey = keys[index$3];
                                        stack[offset + 2] = node[invKey];
                                        continue;
                                    }
                                }
                                var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                if (ref$3 && Array.isArray(ref$3)) {
                                    destination = ref$3[__CONTEXT];
                                    if (destination) {
                                        var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                        while (++i$3 <= n) {
                                            destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                        }
                                        destination[__REFS_LENGTH] = n;
                                        ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                    }
                                }
                                var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                while (++i$4 < n$2) {
                                    if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                        ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                                    (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                    (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                    node === head && (root$2.__head = root$2.__next = head = next);
                                    node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                                    node.__next = node.__prev = void 0;
                                    head = tail = next = prev = void 0;
                                }
                                nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                delete stack[offset + 0];
                                delete stack[offset + 1];
                                delete stack[offset + 2];
                                delete stack[offset + 3];
                                delete stack[offset + 4];
                                delete stack[offset + 5];
                                delete stack[offset + 6];
                                delete stack[offset + 7];
                                --depth$2;
                            }
                            nodeParent = invParent;
                            node = invChild;
                        }
                        nodeParent[key] = node = message;
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                        var node$2 = nodeParent, child = node, stack$2 = [];
                        while (node = nodeParent) {
                            nodeParent = node[__PARENT];
                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                                var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                if (ref$5 && Array.isArray(ref$5)) {
                                    destination$2 = ref$5[__CONTEXT];
                                    if (destination$2) {
                                        var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                        while (++i$5 <= n$3) {
                                            destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                        }
                                        destination$2[__REFS_LENGTH] = n$3;
                                        ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                                    }
                                }
                                var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                while (++i$6 < n$4) {
                                    if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                        ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                                    (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                                    (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                                    node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                                    node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                                    node.__next = node.__prev = void 0;
                                    head$2 = tail$2 = next$2 = prev$2 = void 0;
                                }
                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                var depth$3 = 0, references, ref$7, i$7, k, n$5;
                                while (depth$3 > -1) {
                                    if ((references = stack$2[depth$3]) === void 0) {
                                        i$7 = k = -1;
                                        n$5 = node[__REFS_LENGTH] || 0;
                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                        node[__GENERATION] = __GENERATION_GUID++;
                                        if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            stack$2[depth$3] = references = new Array(n$5 + 1);
                                            references[++k] = ref$7;
                                        } else if (n$5 > 0) {
                                            stack$2[depth$3] = references = new Array(n$5);
                                        }
                                        while (++i$7 < n$5) {
                                            if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                references[++k] = ref$7;
                                            }
                                        }
                                    }
                                    if ((node = references && references.pop()) !== void 0) {
                                        ++depth$3;
                                    } else {
                                        stack$2[depth$3--] = void 0;
                                    }
                                }
                            }
                        }
                        nodeParent = node$2;
                        node = child;
                    }
                    if (depth >= boundLength) {
                        if (node != null && jsonParent != null) {
                            if (boxed === true) {
                                jsonParent[key] = node;
                            } else {
                                var val = nodeValue;
                                if (val != null && typeof val === 'object') {
                                    var src = val, keys$2 = Object.keys(src), x, i$8 = -1, n$6 = keys$2.length;
                                    val = Array.isArray(src) && new Array(src.length) || Object.create(null);
                                    while (++i$8 < n$6) {
                                        x = keys$2[i$8];
                                        !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (val[x] = src[x]);
                                    }
                                }
                                if (val != null && typeof val === 'object' && !Array.isArray(val)) {
                                    val[$TYPE] = LEAF;
                                }
                                jsonParent[key] = val;
                            }
                        }
                    }
                    node = node;
                } else {
                    nodeParent = node = nodes[depth - 1];
                    messageParent = message = messages[depth - 1];
                    jsonParent = jsonNode = jsons[depth - 1];
                    depth = depth;
                    follow_path_16440:
                        do {
                            key = path[depth];
                            if (isKeySet = key != null && typeof key === 'object') {
                                if (Array.isArray(key)) {
                                    if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                        key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            if (key === __NULL) {
                                key = null;
                            }
                            depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                            if (key != null) {
                                if (depth < height) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    message = messageParent[key];
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    messageTimestamp = message && message[$TIMESTAMP];
                                    messageExpires = message && message[$EXPIRES];
                                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                    }
                                    node = node;
                                    message = message;
                                    merge_node_16584:
                                        do {
                                            if (node === message) {
                                                node = node;
                                                break merge_node_16584;
                                            }
                                            if (node != null) {
                                                if (message != null) {
                                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                            if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                message = message;
                                                                node = node;
                                                                nodeValue = nodeValue;
                                                                messageValue = messageValue;
                                                                replace_cache_reference_16768:
                                                                    do {
                                                                        // compare the cache and message references.
                                                                        // if they're the same, break early so we don't insert.
                                                                        // if they're different, replace the cache reference.
                                                                        var i$9 = nodeValue.length;
                                                                        // If the reference lengths are equal, we have to check their keys
                                                                        // for equality.
                                                                        // If their lengths aren't the equal, the references aren't equal.
                                                                        // Insert the reference from the message.
                                                                        if (i$9 === messageValue.length) {
                                                                            while (--i$9 > -1) {
                                                                                // If any of their keys are different, replace the reference
                                                                                // in the cache with the reference in the message.
                                                                                if (nodeValue[i$9] !== messageValue[i$9]) {
                                                                                    message = message;
                                                                                    break replace_cache_reference_16768;
                                                                                }
                                                                            }
                                                                            if (i$9 === -1) {
                                                                                message = node;
                                                                                break replace_cache_reference_16768;
                                                                            }
                                                                        }
                                                                        message = message;
                                                                        break replace_cache_reference_16768;
                                                                    } while (true);
                                                                message = message;
                                                            }
                                                        }
                                                    }
                                                    if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                        node = node;
                                                        break merge_node_16584;
                                                    }
                                                } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                    node = message = node;
                                                    break merge_node_16584;
                                                }
                                            }
                                            if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                message = message;
                                                if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                    delete messageValue[$SIZE];
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === SENTINEL) {
                                                    message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === ERROR) {
                                                    message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                } else if (!(message != null && typeof message === 'object')) {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                    messageType = 'sentinel';
                                                    message = { 'value': messageValue };
                                                    message[$TYPE] = messageType;
                                                    message[$SIZE] = messageSize;
                                                } else {
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                    message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                }
                                                ;
                                            }
                                            var size_offset$2 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                            if (node != null && node !== message) {
                                                var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = message[__REFS_LENGTH] || 0, i$10 = -1, ref$8;
                                                while (++i$10 < nodeRefsLength$2) {
                                                    if ((ref$8 = node[__REF + i$10]) !== void 0) {
                                                        ref$8[__CONTEXT] = message;
                                                        message[__REF + (destRefsLength$2 + i$10)] = ref$8;
                                                        node[__REF + i$10] = void 0;
                                                    }
                                                }
                                                message[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                                node[__REFS_LENGTH] = ref$8 = void 0;
                                                var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$3, index$4, offset$2, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                        nodeParent,
                                                        invKey$2,
                                                        node
                                                    ], depth$4 = 0;
                                                while (depth$4 > -1) {
                                                    nodeParent = stack$3[offset$2 = depth$4 * 8];
                                                    invKey$2 = stack$3[offset$2 + 1];
                                                    node = stack$3[offset$2 + 2];
                                                    if ((childType$2 = stack$3[offset$2 + 3]) === void 0 || (childType$2 = void 0)) {
                                                        childType$2 = stack$3[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                    }
                                                    childValue$2 = stack$3[offset$2 + 4] || (stack$3[offset$2 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                    if ((isBranch$2 = stack$3[offset$2 + 5]) === void 0) {
                                                        isBranch$2 = stack$3[offset$2 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                    }
                                                    if (isBranch$2 === true) {
                                                        if ((keys$3 = stack$3[offset$2 + 6]) === void 0) {
                                                            keys$3 = stack$3[offset$2 + 6] = [];
                                                            index$4 = -1;
                                                            for (invKey$2 in node) {
                                                                !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$3[++index$4] = invKey$2);
                                                            }
                                                        }
                                                        index$4 = stack$3[offset$2 + 7] || (stack$3[offset$2 + 7] = 0);
                                                        if (index$4 < keys$3.length) {
                                                            stack$3[offset$2 + 7] = index$4 + 1;
                                                            stack$3[offset$2 = ++depth$4 * 8] = node;
                                                            stack$3[offset$2 + 1] = invKey$2 = keys$3[index$4];
                                                            stack$3[offset$2 + 2] = node[invKey$2];
                                                            continue;
                                                        }
                                                    }
                                                    var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                    if (ref$9 && Array.isArray(ref$9)) {
                                                        destination$3 = ref$9[__CONTEXT];
                                                        if (destination$3) {
                                                            var i$11 = (ref$9[__REF_INDEX] || 0) - 1, n$7 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$11 <= n$7) {
                                                                destination$3[__REF + i$11] = destination$3[__REF + (i$11 + 1)];
                                                            }
                                                            destination$3[__REFS_LENGTH] = n$7;
                                                            ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                        }
                                                    }
                                                    var ref$10, i$12 = -1, n$8 = node[__REFS_LENGTH] || 0;
                                                    while (++i$12 < n$8) {
                                                        if ((ref$10 = node[__REF + i$12]) !== void 0) {
                                                            ref$10[__CONTEXT] = node[__REF + i$12] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    if (node != null && typeof node === 'object') {
                                                        var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3, prev$3;
                                                        (next$3 = node.__next) && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                                        (prev$3 = node.__prev) && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                                        node === head$3 && (root$4.__head = root$4.__next = head$3 = next$3);
                                                        node === tail$3 && (root$4.__tail = root$4.__prev = tail$3 = prev$3);
                                                        node.__next = node.__prev = void 0;
                                                        head$3 = tail$3 = next$3 = prev$3 = void 0;
                                                    }
                                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                    delete stack$3[offset$2 + 0];
                                                    delete stack$3[offset$2 + 1];
                                                    delete stack$3[offset$2 + 2];
                                                    delete stack$3[offset$2 + 3];
                                                    delete stack$3[offset$2 + 4];
                                                    delete stack$3[offset$2 + 5];
                                                    delete stack$3[offset$2 + 6];
                                                    delete stack$3[offset$2 + 7];
                                                    --depth$4;
                                                }
                                                nodeParent = invParent$2;
                                                node = invChild$2;
                                            }
                                            nodeParent[key] = node = message;
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeTimestamp = node && node[$TIMESTAMP];
                                            nodeExpires = node && node[$EXPIRES];
                                            var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                            while (node = nodeParent) {
                                                nodeParent = node[__PARENT];
                                                if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                                    var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                    if (ref$11 && Array.isArray(ref$11)) {
                                                        destination$4 = ref$11[__CONTEXT];
                                                        if (destination$4) {
                                                            var i$13 = (ref$11[__REF_INDEX] || 0) - 1, n$9 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$13 <= n$9) {
                                                                destination$4[__REF + i$13] = destination$4[__REF + (i$13 + 1)];
                                                            }
                                                            destination$4[__REFS_LENGTH] = n$9;
                                                            ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                        }
                                                    }
                                                    var ref$12, i$14 = -1, n$10 = node[__REFS_LENGTH] || 0;
                                                    while (++i$14 < n$10) {
                                                        if ((ref$12 = node[__REF + i$14]) !== void 0) {
                                                            ref$12[__CONTEXT] = node[__REF + i$14] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    if (node != null && typeof node === 'object') {
                                                        var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                        (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                        (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                        node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                        node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                        node.__next = node.__prev = void 0;
                                                        head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                    }
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    var depth$5 = 0, references$2, ref$13, i$15, k$2, n$11;
                                                    while (depth$5 > -1) {
                                                        if ((references$2 = stack$4[depth$5]) === void 0) {
                                                            i$15 = k$2 = -1;
                                                            n$11 = node[__REFS_LENGTH] || 0;
                                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                            node[__GENERATION] = __GENERATION_GUID++;
                                                            if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                stack$4[depth$5] = references$2 = new Array(n$11 + 1);
                                                                references$2[++k$2] = ref$13;
                                                            } else if (n$11 > 0) {
                                                                stack$4[depth$5] = references$2 = new Array(n$11);
                                                            }
                                                            while (++i$15 < n$11) {
                                                                if ((ref$13 = node[__REF + i$15]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    references$2[++k$2] = ref$13;
                                                                }
                                                            }
                                                        }
                                                        if ((node = references$2 && references$2.pop()) !== void 0) {
                                                            ++depth$5;
                                                        } else {
                                                            stack$4[depth$5--] = void 0;
                                                        }
                                                    }
                                                }
                                            }
                                            nodeParent = node$3;
                                            node = child$2;
                                            node = node;
                                            break merge_node_16584;
                                        } while (true);
                                    node = node;
                                    node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        do {
                                            if (nodeExpires !== 1) {
                                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                                if (node !== head$5) {
                                                    next$5 && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                    prev$5 && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                    (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                                    root$6.__head = root$6.__next = head$5 = node;
                                                    head$5.__next = next$5;
                                                    head$5.__prev = void 0;
                                                }
                                                if (tail$5 == null || node === tail$5) {
                                                    root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                                }
                                                root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                            }
                                            refs[depth] = nodeValue;
                                            refIndex = depth + 1;
                                            refDepth = 0;
                                            var key$2, isKeySet$2;
                                            reference = nodeValue;
                                            refHeight = (refLength = reference.length) - 1;
                                            nodeParent = nodeRoot;
                                            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                node = node = nodeParent;
                                            } else {
                                                nodeParent = nodeRoot;
                                                messageParent = messageRoot;
                                                jsonParent = jsonRoot;
                                                refDepth = refDepth;
                                                follow_path_17115:
                                                    do {
                                                        key$2 = reference[refDepth];
                                                        isKeySet$2 = false;
                                                        if (key$2 != null) {
                                                            if (refDepth < refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                message = messageParent[key$2];
                                                                messageType = message && message[$TYPE] || void 0;
                                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                                messageTimestamp = message && message[$TIMESTAMP];
                                                                messageExpires = message && message[$EXPIRES];
                                                                if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                                                    message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                                                }
                                                                node = node;
                                                                message = message;
                                                                merge_node_17249:
                                                                    do {
                                                                        if (node === message) {
                                                                            node = node;
                                                                            break merge_node_17249;
                                                                        }
                                                                        if (node != null) {
                                                                            if (message != null) {
                                                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                        if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                                            message = message;
                                                                                            node = node;
                                                                                            nodeValue = nodeValue;
                                                                                            messageValue = messageValue;
                                                                                            replace_cache_reference_17432:
                                                                                                do {
                                                                                                    // compare the cache and message references.
                                                                                                    // if they're the same, break early so we don't insert.
                                                                                                    // if they're different, replace the cache reference.
                                                                                                    var i$16 = nodeValue.length;
                                                                                                    // If the reference lengths are equal, we have to check their keys
                                                                                                    // for equality.
                                                                                                    // If their lengths aren't the equal, the references aren't equal.
                                                                                                    // Insert the reference from the message.
                                                                                                    if (i$16 === messageValue.length) {
                                                                                                        while (--i$16 > -1) {
                                                                                                            // If any of their keys are different, replace the reference
                                                                                                            // in the cache with the reference in the message.
                                                                                                            if (nodeValue[i$16] !== messageValue[i$16]) {
                                                                                                                message = message;
                                                                                                                break replace_cache_reference_17432;
                                                                                                            }
                                                                                                        }
                                                                                                        if (i$16 === -1) {
                                                                                                            message = node;
                                                                                                            break replace_cache_reference_17432;
                                                                                                        }
                                                                                                    }
                                                                                                    message = message;
                                                                                                    break replace_cache_reference_17432;
                                                                                                } while (true);
                                                                                            message = message;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                                                    node = node;
                                                                                    break merge_node_17249;
                                                                                }
                                                                            } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                                                node = message = node;
                                                                                break merge_node_17249;
                                                                            }
                                                                        }
                                                                        if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                                            message = message;
                                                                            if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                messageType = 'array';
                                                                                message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                                                delete messageValue[$SIZE];
                                                                                messageValue[__CONTAINER] = message;
                                                                            } else if (messageType === SENTINEL) {
                                                                                message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                            } else if (messageType === ERROR) {
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            } else if (!(message != null && typeof message === 'object')) {
                                                                                messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                                messageType = 'sentinel';
                                                                                message = { 'value': messageValue };
                                                                                message[$TYPE] = messageType;
                                                                                message[$SIZE] = messageSize;
                                                                            } else {
                                                                                messageType = message[$TYPE] = messageType || 'leaf';
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            }
                                                                            ;
                                                                        }
                                                                        var size_offset$3 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                                                        if (node != null && node !== message) {
                                                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = message[__REFS_LENGTH] || 0, i$17 = -1, ref$14;
                                                                            while (++i$17 < nodeRefsLength$3) {
                                                                                if ((ref$14 = node[__REF + i$17]) !== void 0) {
                                                                                    ref$14[__CONTEXT] = message;
                                                                                    message[__REF + (destRefsLength$3 + i$17)] = ref$14;
                                                                                    node[__REF + i$17] = void 0;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$4, index$5, offset$3, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                    nodeParent,
                                                                                    invKey$3,
                                                                                    node
                                                                                ], depth$6 = 0;
                                                                            while (depth$6 > -1) {
                                                                                nodeParent = stack$5[offset$3 = depth$6 * 8];
                                                                                invKey$3 = stack$5[offset$3 + 1];
                                                                                node = stack$5[offset$3 + 2];
                                                                                if ((childType$3 = stack$5[offset$3 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                    childType$3 = stack$5[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$3 = stack$5[offset$3 + 4] || (stack$5[offset$3 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$3 = stack$5[offset$3 + 5]) === void 0) {
                                                                                    isBranch$3 = stack$5[offset$3 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                                }
                                                                                if (isBranch$3 === true) {
                                                                                    if ((keys$4 = stack$5[offset$3 + 6]) === void 0) {
                                                                                        keys$4 = stack$5[offset$3 + 6] = [];
                                                                                        index$5 = -1;
                                                                                        for (invKey$3 in node) {
                                                                                            !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$4[++index$5] = invKey$3);
                                                                                        }
                                                                                    }
                                                                                    index$5 = stack$5[offset$3 + 7] || (stack$5[offset$3 + 7] = 0);
                                                                                    if (index$5 < keys$4.length) {
                                                                                        stack$5[offset$3 + 7] = index$5 + 1;
                                                                                        stack$5[offset$3 = ++depth$6 * 8] = node;
                                                                                        stack$5[offset$3 + 1] = invKey$3 = keys$4[index$5];
                                                                                        stack$5[offset$3 + 2] = node[invKey$3];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                                if (ref$15 && Array.isArray(ref$15)) {
                                                                                    destination$5 = ref$15[__CONTEXT];
                                                                                    if (destination$5) {
                                                                                        var i$18 = (ref$15[__REF_INDEX] || 0) - 1, n$12 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$18 <= n$12) {
                                                                                            destination$5[__REF + i$18] = destination$5[__REF + (i$18 + 1)];
                                                                                        }
                                                                                        destination$5[__REFS_LENGTH] = n$12;
                                                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$16, i$19 = -1, n$13 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$19 < n$13) {
                                                                                    if ((ref$16 = node[__REF + i$19]) !== void 0) {
                                                                                        ref$16[__CONTEXT] = node[__REF + i$19] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6, prev$6;
                                                                                    (next$6 = node.__next) && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                                                    (prev$6 = node.__prev) && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                                                    node === head$6 && (root$7.__head = root$7.__next = head$6 = next$6);
                                                                                    node === tail$6 && (root$7.__tail = root$7.__prev = tail$6 = prev$6);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$6 = tail$6 = next$6 = prev$6 = void 0;
                                                                                }
                                                                                nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$5[offset$3 + 0];
                                                                                delete stack$5[offset$3 + 1];
                                                                                delete stack$5[offset$3 + 2];
                                                                                delete stack$5[offset$3 + 3];
                                                                                delete stack$5[offset$3 + 4];
                                                                                delete stack$5[offset$3 + 5];
                                                                                delete stack$5[offset$3 + 6];
                                                                                delete stack$5[offset$3 + 7];
                                                                                --depth$6;
                                                                            }
                                                                            nodeParent = invParent$3;
                                                                            node = invChild$3;
                                                                        }
                                                                        nodeParent[key$2] = node = message;
                                                                        nodeType = node && node[$TYPE] || void 0;
                                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                                        nodeExpires = node && node[$EXPIRES];
                                                                        var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$3) <= 0 && true && nodeParent) {
                                                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                                if (ref$17 && Array.isArray(ref$17)) {
                                                                                    destination$6 = ref$17[__CONTEXT];
                                                                                    if (destination$6) {
                                                                                        var i$20 = (ref$17[__REF_INDEX] || 0) - 1, n$14 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$20 <= n$14) {
                                                                                            destination$6[__REF + i$20] = destination$6[__REF + (i$20 + 1)];
                                                                                        }
                                                                                        destination$6[__REFS_LENGTH] = n$14;
                                                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$18, i$21 = -1, n$15 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$21 < n$15) {
                                                                                    if ((ref$18 = node[__REF + i$21]) !== void 0) {
                                                                                        ref$18[__CONTEXT] = node[__REF + i$21] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                    (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                    (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                    node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                    node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$7 = 0, references$3, ref$19, i$22, k$3, n$16;
                                                                                while (depth$7 > -1) {
                                                                                    if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                        i$22 = k$3 = -1;
                                                                                        n$16 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$16 + 1);
                                                                                            references$3[++k$3] = ref$19;
                                                                                        } else if (n$16 > 0) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$16);
                                                                                        }
                                                                                        while (++i$22 < n$16) {
                                                                                            if ((ref$19 = node[__REF + i$22]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$3[++k$3] = ref$19;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                        ++depth$7;
                                                                                    } else {
                                                                                        stack$6[depth$7--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$4;
                                                                        node = child$3;
                                                                        node = node;
                                                                        break merge_node_17249;
                                                                    } while (true);
                                                                node = node;
                                                                node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                                                if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                    nodeParent = node;
                                                                    break follow_path_17115;
                                                                }
                                                                nodeParent = node;
                                                                messageParent = message;
                                                                jsonParent = jsonNode;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_17115;
                                                            } else if (refDepth === refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                message = messageParent[key$2];
                                                                messageType = message && message[$TYPE] || void 0;
                                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                                messageTimestamp = message && message[$TIMESTAMP];
                                                                messageExpires = message && message[$EXPIRES];
                                                                if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                                                    message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                                                }
                                                                node = node;
                                                                message = message;
                                                                merge_node_17783:
                                                                    do {
                                                                        if (node === message) {
                                                                            node = node;
                                                                            break merge_node_17783;
                                                                        }
                                                                        if (node != null) {
                                                                            if (message != null) {
                                                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                        if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                                            message = message;
                                                                                            node = node;
                                                                                            nodeValue = nodeValue;
                                                                                            messageValue = messageValue;
                                                                                            replace_cache_reference_17965:
                                                                                                do {
                                                                                                    // compare the cache and message references.
                                                                                                    // if they're the same, break early so we don't insert.
                                                                                                    // if they're different, replace the cache reference.
                                                                                                    var i$23 = nodeValue.length;
                                                                                                    // If the reference lengths are equal, we have to check their keys
                                                                                                    // for equality.
                                                                                                    // If their lengths aren't the equal, the references aren't equal.
                                                                                                    // Insert the reference from the message.
                                                                                                    if (i$23 === messageValue.length) {
                                                                                                        while (--i$23 > -1) {
                                                                                                            // If any of their keys are different, replace the reference
                                                                                                            // in the cache with the reference in the message.
                                                                                                            if (nodeValue[i$23] !== messageValue[i$23]) {
                                                                                                                message = message;
                                                                                                                break replace_cache_reference_17965;
                                                                                                            }
                                                                                                        }
                                                                                                        if (i$23 === -1) {
                                                                                                            message = node;
                                                                                                            break replace_cache_reference_17965;
                                                                                                        }
                                                                                                    }
                                                                                                    message = message;
                                                                                                    break replace_cache_reference_17965;
                                                                                                } while (true);
                                                                                            message = message;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                                                    node = node;
                                                                                    break merge_node_17783;
                                                                                }
                                                                            } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                                                node = message = node;
                                                                                break merge_node_17783;
                                                                            }
                                                                        }
                                                                        if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                                            message = message;
                                                                            if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                messageType = 'array';
                                                                                message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                                                delete messageValue[$SIZE];
                                                                                messageValue[__CONTAINER] = message;
                                                                            } else if (messageType === SENTINEL) {
                                                                                message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                            } else if (messageType === ERROR) {
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            } else if (!(message != null && typeof message === 'object')) {
                                                                                messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                                messageType = 'sentinel';
                                                                                message = { 'value': messageValue };
                                                                                message[$TYPE] = messageType;
                                                                                message[$SIZE] = messageSize;
                                                                            } else {
                                                                                messageType = message[$TYPE] = messageType || 'leaf';
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            }
                                                                            ;
                                                                        }
                                                                        var size_offset$4 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                                                        if (node != null && node !== message) {
                                                                            var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = message[__REFS_LENGTH] || 0, i$24 = -1, ref$20;
                                                                            while (++i$24 < nodeRefsLength$4) {
                                                                                if ((ref$20 = node[__REF + i$24]) !== void 0) {
                                                                                    ref$20[__CONTEXT] = message;
                                                                                    message[__REF + (destRefsLength$4 + i$24)] = ref$20;
                                                                                    node[__REF + i$24] = void 0;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                            node[__REFS_LENGTH] = ref$20 = void 0;
                                                                            var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$5, index$6, offset$4, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                    nodeParent,
                                                                                    invKey$4,
                                                                                    node
                                                                                ], depth$8 = 0;
                                                                            while (depth$8 > -1) {
                                                                                nodeParent = stack$7[offset$4 = depth$8 * 8];
                                                                                invKey$4 = stack$7[offset$4 + 1];
                                                                                node = stack$7[offset$4 + 2];
                                                                                if ((childType$4 = stack$7[offset$4 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                    childType$4 = stack$7[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$4 = stack$7[offset$4 + 4] || (stack$7[offset$4 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$4 = stack$7[offset$4 + 5]) === void 0) {
                                                                                    isBranch$4 = stack$7[offset$4 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                                }
                                                                                if (isBranch$4 === true) {
                                                                                    if ((keys$5 = stack$7[offset$4 + 6]) === void 0) {
                                                                                        keys$5 = stack$7[offset$4 + 6] = [];
                                                                                        index$6 = -1;
                                                                                        for (invKey$4 in node) {
                                                                                            !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$5[++index$6] = invKey$4);
                                                                                        }
                                                                                    }
                                                                                    index$6 = stack$7[offset$4 + 7] || (stack$7[offset$4 + 7] = 0);
                                                                                    if (index$6 < keys$5.length) {
                                                                                        stack$7[offset$4 + 7] = index$6 + 1;
                                                                                        stack$7[offset$4 = ++depth$8 * 8] = node;
                                                                                        stack$7[offset$4 + 1] = invKey$4 = keys$5[index$6];
                                                                                        stack$7[offset$4 + 2] = node[invKey$4];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                                if (ref$21 && Array.isArray(ref$21)) {
                                                                                    destination$7 = ref$21[__CONTEXT];
                                                                                    if (destination$7) {
                                                                                        var i$25 = (ref$21[__REF_INDEX] || 0) - 1, n$17 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$25 <= n$17) {
                                                                                            destination$7[__REF + i$25] = destination$7[__REF + (i$25 + 1)];
                                                                                        }
                                                                                        destination$7[__REFS_LENGTH] = n$17;
                                                                                        ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$22, i$26 = -1, n$18 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$26 < n$18) {
                                                                                    if ((ref$22 = node[__REF + i$26]) !== void 0) {
                                                                                        ref$22[__CONTEXT] = node[__REF + i$26] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                    (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                    (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                    node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                    node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                                }
                                                                                nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$7[offset$4 + 0];
                                                                                delete stack$7[offset$4 + 1];
                                                                                delete stack$7[offset$4 + 2];
                                                                                delete stack$7[offset$4 + 3];
                                                                                delete stack$7[offset$4 + 4];
                                                                                delete stack$7[offset$4 + 5];
                                                                                delete stack$7[offset$4 + 6];
                                                                                delete stack$7[offset$4 + 7];
                                                                                --depth$8;
                                                                            }
                                                                            nodeParent = invParent$4;
                                                                            node = invChild$4;
                                                                        }
                                                                        nodeParent[key$2] = node = message;
                                                                        nodeType = node && node[$TYPE] || void 0;
                                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                                        nodeExpires = node && node[$EXPIRES];
                                                                        var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$4) <= 0 && true && nodeParent) {
                                                                                var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                                if (ref$23 && Array.isArray(ref$23)) {
                                                                                    destination$8 = ref$23[__CONTEXT];
                                                                                    if (destination$8) {
                                                                                        var i$27 = (ref$23[__REF_INDEX] || 0) - 1, n$19 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$27 <= n$19) {
                                                                                            destination$8[__REF + i$27] = destination$8[__REF + (i$27 + 1)];
                                                                                        }
                                                                                        destination$8[__REFS_LENGTH] = n$19;
                                                                                        ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$24, i$28 = -1, n$20 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$28 < n$20) {
                                                                                    if ((ref$24 = node[__REF + i$28]) !== void 0) {
                                                                                        ref$24[__CONTEXT] = node[__REF + i$28] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                    (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                    (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                    node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                    node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$9 = 0, references$4, ref$25, i$29, k$4, n$21;
                                                                                while (depth$9 > -1) {
                                                                                    if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                        i$29 = k$4 = -1;
                                                                                        n$21 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$21 + 1);
                                                                                            references$4[++k$4] = ref$25;
                                                                                        } else if (n$21 > 0) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$21);
                                                                                        }
                                                                                        while (++i$29 < n$21) {
                                                                                            if ((ref$25 = node[__REF + i$29]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$4[++k$4] = ref$25;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                        ++depth$9;
                                                                                    } else {
                                                                                        stack$8[depth$9--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$5;
                                                                        node = child$4;
                                                                        node = node;
                                                                        break merge_node_17783;
                                                                    } while (true);
                                                                node = node;
                                                                node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                                                if (node != null) {
                                                                    var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                    // Set up the hard-link so we don't have to do all
                                                                    // this work the next time we follow this reference.
                                                                    if (refContext === void 0) {
                                                                        // create a back reference
                                                                        var backRefs = node[__REFS_LENGTH] || 0;
                                                                        node[__REF + backRefs] = refContainer;
                                                                        node[__REFS_LENGTH] = backRefs + 1;
                                                                        // create a hard reference
                                                                        refContainer[__REF_INDEX] = backRefs;
                                                                        refContainer[__CONTEXT] = node;
                                                                        refContainer = backRefs = void 0;
                                                                    }
                                                                    ;
                                                                }
                                                                appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                nodeParent = node;
                                                                break follow_path_17115;
                                                            }
                                                        } else if (refDepth < refHeight) {
                                                            nodeParent = node;
                                                            messageParent = message;
                                                            jsonParent = jsonNode;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_17115;
                                                        }
                                                        nodeParent = node;
                                                        break follow_path_17115;
                                                    } while (true);
                                                node = nodeParent;
                                            }
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeExpires = node && node[$EXPIRES];
                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                        } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                        if (node == null) {
                                            while (refDepth <= refHeight) {
                                                optimizedPath[refDepth] = reference[refDepth++];
                                            }
                                        }
                                    }
                                    if (depth >= boundLength) {
                                        if (node != null && jsonParent != null) {
                                            if (!nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue)) {
                                                if (!(jsonNode = jsonParent[key]) || !(jsonNode != null && typeof jsonNode === 'object')) {
                                                    jsonNode = jsonParent[key] = Object.create(null);
                                                }
                                                jsonNode[__KEY] = key;
                                                jsonNode[__GENERATION] = node[__GENERATION] || 0;
                                            } else {
                                                if (boxed === true) {
                                                    jsonParent[key] = node;
                                                } else {
                                                    var val$2 = nodeValue;
                                                    if (val$2 != null && typeof val$2 === 'object') {
                                                        var src$2 = val$2, keys$6 = Object.keys(src$2), x$2, i$30 = -1, n$22 = keys$6.length;
                                                        val$2 = Array.isArray(src$2) && new Array(src$2.length) || Object.create(null);
                                                        while (++i$30 < n$22) {
                                                            x$2 = keys$6[i$30];
                                                            !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT) || x$2[0] === '$') && (val$2[x$2] = src$2[x$2]);
                                                        }
                                                    }
                                                    if (val$2 != null && typeof val$2 === 'object' && !Array.isArray(val$2)) {
                                                        val$2[$TYPE] = LEAF;
                                                    }
                                                    jsonParent[key] = val$2;
                                                }
                                            }
                                        }
                                    }
                                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                        nodeParent = node;
                                        break follow_path_16440;
                                    }
                                    nodeParent = nodes[depth] = node;
                                    messageParent = messages[depth] = message;
                                    jsonParent = jsons[depth] = jsonNode;
                                    depth = depth + 1;
                                    continue follow_path_16440;
                                } else if (depth === height) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    message = messageParent[key];
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    messageTimestamp = message && message[$TIMESTAMP];
                                    messageExpires = message && message[$EXPIRES];
                                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                    }
                                    if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            messageType = 'array';
                                            message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                            delete messageValue[$SIZE];
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = { 'value': messageValue };
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || 'leaf';
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                        ;
                                        var size_offset$5 = messageSize - (node && node[$SIZE] || 0);
                                        if (node != null && node !== message) {
                                            var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = message[__REFS_LENGTH] || 0, i$31 = -1, ref$26;
                                            while (++i$31 < nodeRefsLength$5) {
                                                if ((ref$26 = node[__REF + i$31]) !== void 0) {
                                                    ref$26[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$5 + i$31)] = ref$26;
                                                    node[__REF + i$31] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                            node[__REFS_LENGTH] = ref$26 = void 0;
                                            var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$7, index$7, offset$5, childType$5, childValue$5, isBranch$5, stack$9 = [
                                                    nodeParent,
                                                    invKey$5,
                                                    node
                                                ], depth$10 = 0;
                                            while (depth$10 > -1) {
                                                nodeParent = stack$9[offset$5 = depth$10 * 8];
                                                invKey$5 = stack$9[offset$5 + 1];
                                                node = stack$9[offset$5 + 2];
                                                if ((childType$5 = stack$9[offset$5 + 3]) === void 0 || (childType$5 = void 0)) {
                                                    childType$5 = stack$9[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$5 = stack$9[offset$5 + 4] || (stack$9[offset$5 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$5 = stack$9[offset$5 + 5]) === void 0) {
                                                    isBranch$5 = stack$9[offset$5 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                                }
                                                if (isBranch$5 === true) {
                                                    if ((keys$7 = stack$9[offset$5 + 6]) === void 0) {
                                                        keys$7 = stack$9[offset$5 + 6] = [];
                                                        index$7 = -1;
                                                        for (invKey$5 in node) {
                                                            !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$7[++index$7] = invKey$5);
                                                        }
                                                    }
                                                    index$7 = stack$9[offset$5 + 7] || (stack$9[offset$5 + 7] = 0);
                                                    if (index$7 < keys$7.length) {
                                                        stack$9[offset$5 + 7] = index$7 + 1;
                                                        stack$9[offset$5 = ++depth$10 * 8] = node;
                                                        stack$9[offset$5 + 1] = invKey$5 = keys$7[index$7];
                                                        stack$9[offset$5 + 2] = node[invKey$5];
                                                        continue;
                                                    }
                                                }
                                                var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                                if (ref$27 && Array.isArray(ref$27)) {
                                                    destination$9 = ref$27[__CONTEXT];
                                                    if (destination$9) {
                                                        var i$32 = (ref$27[__REF_INDEX] || 0) - 1, n$23 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$32 <= n$23) {
                                                            destination$9[__REF + i$32] = destination$9[__REF + (i$32 + 1)];
                                                        }
                                                        destination$9[__REFS_LENGTH] = n$23;
                                                        ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                                    }
                                                }
                                                var ref$28, i$33 = -1, n$24 = node[__REFS_LENGTH] || 0;
                                                while (++i$33 < n$24) {
                                                    if ((ref$28 = node[__REF + i$33]) !== void 0) {
                                                        ref$28[__CONTEXT] = node[__REF + i$33] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                    (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                    (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                    node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                    node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                    node.__next = node.__prev = void 0;
                                                    head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                }
                                                nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                delete stack$9[offset$5 + 0];
                                                delete stack$9[offset$5 + 1];
                                                delete stack$9[offset$5 + 2];
                                                delete stack$9[offset$5 + 3];
                                                delete stack$9[offset$5 + 4];
                                                delete stack$9[offset$5 + 5];
                                                delete stack$9[offset$5 + 6];
                                                delete stack$9[offset$5 + 7];
                                                --depth$10;
                                            }
                                            nodeParent = invParent$5;
                                            node = invChild$5;
                                        }
                                        nodeParent[key] = node = message;
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var node$6 = nodeParent, child$5 = node, stack$10 = [];
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$5) <= 0 && true && nodeParent) {
                                                var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                                if (ref$29 && Array.isArray(ref$29)) {
                                                    destination$10 = ref$29[__CONTEXT];
                                                    if (destination$10) {
                                                        var i$34 = (ref$29[__REF_INDEX] || 0) - 1, n$25 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$34 <= n$25) {
                                                            destination$10[__REF + i$34] = destination$10[__REF + (i$34 + 1)];
                                                        }
                                                        destination$10[__REFS_LENGTH] = n$25;
                                                        ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                                    }
                                                }
                                                var ref$30, i$35 = -1, n$26 = node[__REFS_LENGTH] || 0;
                                                while (++i$35 < n$26) {
                                                    if ((ref$30 = node[__REF + i$35]) !== void 0) {
                                                        ref$30[__CONTEXT] = node[__REF + i$35] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                                    (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                                    (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                                    node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                                    node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                                    node.__next = node.__prev = void 0;
                                                    head$11 = tail$11 = next$11 = prev$11 = void 0;
                                                }
                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var depth$11 = 0, references$5, ref$31, i$36, k$5, n$27;
                                                while (depth$11 > -1) {
                                                    if ((references$5 = stack$10[depth$11]) === void 0) {
                                                        i$36 = k$5 = -1;
                                                        n$27 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                        if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$10[depth$11] = references$5 = new Array(n$27 + 1);
                                                            references$5[++k$5] = ref$31;
                                                        } else if (n$27 > 0) {
                                                            stack$10[depth$11] = references$5 = new Array(n$27);
                                                        }
                                                        while (++i$36 < n$27) {
                                                            if ((ref$31 = node[__REF + i$36]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                references$5[++k$5] = ref$31;
                                                            }
                                                        }
                                                    }
                                                    if ((node = references$5 && references$5.pop()) !== void 0) {
                                                        ++depth$11;
                                                    } else {
                                                        stack$10[depth$11--] = void 0;
                                                    }
                                                }
                                            }
                                        }
                                        nodeParent = node$6;
                                        node = child$5;
                                    }
                                    if (depth >= boundLength) {
                                        if (node != null && jsonParent != null) {
                                            if (boxed === true) {
                                                jsonParent[key] = node;
                                            } else {
                                                var val$3 = nodeValue;
                                                if (val$3 != null && typeof val$3 === 'object') {
                                                    var src$3 = val$3, keys$8 = Object.keys(src$3), x$3, i$37 = -1, n$28 = keys$8.length;
                                                    val$3 = Array.isArray(src$3) && new Array(src$3.length) || Object.create(null);
                                                    while (++i$37 < n$28) {
                                                        x$3 = keys$8[i$37];
                                                        !(!(x$3[0] !== '_' || x$3[1] !== '_') || (x$3 === __SELF || x$3 === __PARENT || x$3 === __ROOT) || x$3[0] === '$') && (val$3[x$3] = src$3[x$3]);
                                                    }
                                                }
                                                if (val$3 != null && typeof val$3 === 'object' && !Array.isArray(val$3)) {
                                                    val$3[$TYPE] = LEAF;
                                                }
                                                jsonParent[key] = val$3;
                                            }
                                        }
                                    }
                                    appendNullKey = false;
                                    nodeParent = node;
                                    break follow_path_16440;
                                }
                            } else if (depth < height) {
                                nodeParent = nodeParent;
                                messageParent = messageParent;
                                jsonParent = jsonParent;
                                depth = depth + 1;
                                continue follow_path_16440;
                            }
                            nodeParent = node;
                            break follow_path_16440;
                        } while (true);
                    node = nodeParent;
                }
                if (node != null || boxed === true) {
                    if (nodeType === ERROR) {
                        if (nodeExpires !== 1) {
                            var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12 = node.__next, prev$12 = node.__prev;
                            if (node !== head$12) {
                                next$12 && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                prev$12 && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                (next$12 = head$12) && (head$12 != null && typeof head$12 === 'object') && (head$12.__prev = node);
                                root$13.__head = root$13.__next = head$12 = node;
                                head$12.__next = next$12;
                                head$12.__prev = void 0;
                            }
                            if (tail$12 == null || node === tail$12) {
                                root$13.__tail = root$13.__prev = tail$12 = prev$12 || node;
                            }
                            root$13 = head$12 = tail$12 = next$12 = prev$12 = void 0;
                        }
                        var nodeType$2 = node && node[$TYPE] || void 0;
                        nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                        var pbv = Object.create(null);
                        var src$4 = requestedPath, i$38 = -1, n$29 = src$4.length, req = new Array(n$29);
                        while (++i$38 < n$29) {
                            req[i$38] = src$4[i$38];
                        }
                        if (appendNullKey === true) {
                            req[req.length] = null;
                        }
                        pbv.path = req;
                        if (boxed === true) {
                            pbv.value = node;
                        } else {
                            var dest = nodeValue, src$5 = dest, x$4;
                            if (dest != null && typeof dest === 'object') {
                                dest = Array.isArray(src$5) && [] || Object.create(null);
                                for (x$4 in src$5) {
                                    !(!(x$4[0] !== '_' || x$4[1] !== '_') || (x$4 === __SELF || x$4 === __PARENT || x$4 === __ROOT) || x$4[0] === '$') && (dest[x$4] = src$5[x$4]);
                                }
                            }
                            pbv.value = dest;
                        }
                        errors[errors.length] = pbv;
                    }
                    hasValue || (hasValue = jsonParent != null);
                    var src$6 = optimizedPath, i$39 = -1, n$30 = src$6.length, opt = new Array(n$30);
                    while (++i$39 < n$30) {
                        opt[i$39] = src$6[i$39];
                    }
                    var src$7 = requestedPath, i$40 = -1, n$31 = src$7.length, req$2 = new Array(n$31);
                    while (++i$40 < n$31) {
                        req$2[i$40] = src$7[i$40];
                    }
                    if (appendNullKey === true) {
                        req$2[req$2.length] = null;
                    }
                    requestedPaths[requestedPaths.length] = req$2;
                    optimizedPaths[optimizedPaths.length] = opt;
                }
                if (boxed === false && node == null || refreshing === true) {
                    var src$8 = boundPath, i$41 = -1, n$32 = src$8.length, req$3 = new Array(n$32);
                    while (++i$41 < n$32) {
                        req$3[i$41] = src$8[i$41];
                    }
                    var src$9 = optimizedPath, i$42 = -1, n$33 = src$9.length, opt$2 = new Array(n$33);
                    while (++i$42 < n$33) {
                        opt$2[i$42] = src$9[i$42];
                    }
                    var reqLen = req$3.length - 1, optLen = opt$2.length - 1, i$43 = -1, n$34 = requestedPath.length, j$2 = depth, k$6 = height, x$5;
                    while (++i$43 < n$34) {
                        req$3[++reqLen] = path[i$43 + boundLength] != null && typeof path[i$43 + boundLength] === 'object' && [requestedPath[i$43]] || requestedPath[i$43];
                    }
                    i$43 = -1;
                    n$34 = height - depth;
                    while (++i$43 < n$34) {
                        x$5 = req$3[++reqLen] = path[++j$2 + boundLength];
                        x$5 != null && (opt$2[++optLen] = x$5);
                    }
                    req$3.pathSetIndex = index$2;
                    requestedMissingPaths[requestedMissingPaths.length] = req$3;
                    optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
                }
                appendNullKey = false;
                var key$3;
                depth = depth;
                unroll_16047:
                    do {
                        if (depth < 0) {
                            depth = (path.depth = 0) - 1;
                            break unroll_16047;
                        }
                        if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                            depth = path.depth = depth - 1;
                            continue unroll_16047;
                        }
                        if (Array.isArray(key$3)) {
                            if (++key$3.index === key$3.length) {
                                if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                    depth = path.depth = depth - 1;
                                    continue unroll_16047;
                                }
                            } else {
                                depth = path.depth = depth;
                                break unroll_16047;
                            }
                        }
                        if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                            key$3[__OFFSET] = key$3.from;
                            depth = path.depth = depth - 1;
                            continue unroll_16047;
                        }
                        depth = path.depth = depth;
                        break unroll_16047;
                    } while (true);
                depth = depth;
            }
        }
    }
    values && (values[0] = hasValue && { json: jsons[-1] } || undefined);
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
function setJSONGsAsValues(model, envelopes, values, errorSelector, boundPath) {
    ++__GENERATION_VERSION;
    Array.isArray(values) && (values.length = 0);
    var boundLength = 0, nodeRoot = model._cache || (model._cache = {}), nodeParent, node;
    if (Array.isArray(boundPath)) {
        nodeParent = nodeRoot;
        boundLength = boundPath.length;
    } else {
        nodeParent = getBoundContext(model);
        boundPath = model._path || [];
    }
    var root = model._root || model, boxed = model._boxed || false, expired = root.expired || (root.expired = []), refreshing = model._refreshing || false, appendNullKey = false;
    typeof errorSelector === 'function' || (errorSelector = model._errorSelector) || (errorSelector = function (x$4, y) {
        return y;
    });
    var nodes = envelopes.nodes || (envelopes.nodes = []);
    var messages = envelopes.messages || (envelopes.messages = []);
    var errors = envelopes.errors || (envelopes.errors = []);
    var refs = envelopes.refs || (envelopes.refs = []);
    var depth = envelopes.depth || (envelopes.depth = 0);
    var refIndex = envelopes.refIndex || (envelopes.refIndex = 0);
    var refDepth = envelopes.refDepth || (envelopes.refDepth = 0);
    var requestedPath = envelopes.requestedPath || (envelopes.requestedPath = []);
    var optimizedPath = envelopes.optimizedPath || (envelopes.optimizedPath = []);
    var requestedPaths = envelopes.requestedPaths || (envelopes.requestedPaths = []);
    var optimizedPaths = envelopes.optimizedPaths || (envelopes.optimizedPaths = []);
    var requestedMissingPaths = envelopes.requestedMissingPaths || (envelopes.requestedMissingPaths = []);
    var optimizedMissingPaths = envelopes.optimizedMissingPaths || (envelopes.optimizedMissingPaths = []);
    var hasValue = envelopes.hasValue || (envelopes.hasValue = false);
    var path, length = 0, height = 0, reference, refLength = 0, refHeight = 0, messageRoot, messageParent, message, nodeType, nodeValue, nodeSize, nodeTimestamp, nodeExpires, messageType, messageValue, messageSize, messageTimestamp, messageExpires;
    refs[-1] = boundPath;
    nodes[-1] = nodeParent;
    var envelope, pathSets, index = -1, count = envelopes.length;
    while (++index < count) {
        envelope = envelopes[index];
        pathSets = envelope.paths;
        messages[-1] = messageRoot = envelope.jsong || envelope.values || envelope.value || Object.create(null);
        var index$2 = -1, count$2 = pathSets.length;
        while (++index$2 < count$2) {
            path = pathSets[index$2];
            depth = 0;
            length = path.length;
            height = length - 1;
            var ref;
            refs.length = 0;
            while (depth > -1) {
                refIndex = depth;
                while (--refIndex >= -1) {
                    if (!!(ref = refs[refIndex])) {
                        refLength = ref.length;
                        var i = -1, j = 0;
                        while (++i < refLength) {
                            optimizedPath[j++] = ref[i];
                        }
                        i = ++refIndex;
                        while (i < depth) {
                            optimizedPath[j++] = requestedPath[i++];
                        }
                        optimizedPath.length = j;
                        break;
                    }
                }
                var key, isKeySet;
                path = path;
                height = (length = path.length) - 1;
                nodeParent = nodes[depth - 1];
                nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                    node = nodeParent;
                    nodeParent = nodes;
                    key = depth - 1;
                    isKeySet = false;
                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                    node = nodeParent[key];
                    nodeType = node && node[$TYPE] || void 0;
                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                    nodeTimestamp = node && node[$TIMESTAMP];
                    nodeExpires = node && node[$EXPIRES];
                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                    }
                    message = messageParent[key];
                    messageType = message && message[$TYPE] || void 0;
                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                    messageTimestamp = message && message[$TIMESTAMP];
                    messageExpires = message && message[$EXPIRES];
                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                    }
                    if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                        message = message;
                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                            messageType = 'array';
                            message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                            delete messageValue[$SIZE];
                            messageValue[__CONTAINER] = message;
                        } else if (messageType === SENTINEL) {
                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                        } else if (messageType === ERROR) {
                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                        } else if (!(message != null && typeof message === 'object')) {
                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                            messageType = 'sentinel';
                            message = { 'value': messageValue };
                            message[$TYPE] = messageType;
                            message[$SIZE] = messageSize;
                        } else {
                            messageType = message[$TYPE] = messageType || 'leaf';
                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                        }
                        ;
                        var size_offset = messageSize - (node && node[$SIZE] || 0);
                        if (node != null && node !== message) {
                            var nodeRefsLength = node[__REFS_LENGTH] || 0, destRefsLength = message[__REFS_LENGTH] || 0, i$2 = -1, ref$2;
                            while (++i$2 < nodeRefsLength) {
                                if ((ref$2 = node[__REF + i$2]) !== void 0) {
                                    ref$2[__CONTEXT] = message;
                                    message[__REF + (destRefsLength + i$2)] = ref$2;
                                    node[__REF + i$2] = void 0;
                                }
                            }
                            message[__REFS_LENGTH] = nodeRefsLength + destRefsLength;
                            node[__REFS_LENGTH] = ref$2 = void 0;
                            var invParent = nodeParent, invChild = node, invKey = key, keys, index$3, offset, childType, childValue, isBranch, stack = [
                                    nodeParent,
                                    invKey,
                                    node
                                ], depth$2 = 0;
                            while (depth$2 > -1) {
                                nodeParent = stack[offset = depth$2 * 8];
                                invKey = stack[offset + 1];
                                node = stack[offset + 2];
                                if ((childType = stack[offset + 3]) === void 0 || (childType = void 0)) {
                                    childType = stack[offset + 3] = node && node[$TYPE] || void 0 || null;
                                }
                                childValue = stack[offset + 4] || (stack[offset + 4] = childType === SENTINEL ? node[VALUE] : node);
                                if ((isBranch = stack[offset + 5]) === void 0) {
                                    isBranch = stack[offset + 5] = !childType && (node != null && typeof node === 'object') && !Array.isArray(childValue);
                                }
                                if (isBranch === true) {
                                    if ((keys = stack[offset + 6]) === void 0) {
                                        keys = stack[offset + 6] = [];
                                        index$3 = -1;
                                        for (invKey in node) {
                                            !(!(invKey[0] !== '_' || invKey[1] !== '_') || (invKey === __SELF || invKey === __PARENT || invKey === __ROOT) || invKey[0] === '$') && (keys[++index$3] = invKey);
                                        }
                                    }
                                    index$3 = stack[offset + 7] || (stack[offset + 7] = 0);
                                    if (index$3 < keys.length) {
                                        stack[offset + 7] = index$3 + 1;
                                        stack[offset = ++depth$2 * 8] = node;
                                        stack[offset + 1] = invKey = keys[index$3];
                                        stack[offset + 2] = node[invKey];
                                        continue;
                                    }
                                }
                                var ref$3 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination;
                                if (ref$3 && Array.isArray(ref$3)) {
                                    destination = ref$3[__CONTEXT];
                                    if (destination) {
                                        var i$3 = (ref$3[__REF_INDEX] || 0) - 1, n = (destination[__REFS_LENGTH] || 0) - 1;
                                        while (++i$3 <= n) {
                                            destination[__REF + i$3] = destination[__REF + (i$3 + 1)];
                                        }
                                        destination[__REFS_LENGTH] = n;
                                        ref$3[__REF_INDEX] = ref$3[__CONTEXT] = destination = void 0;
                                    }
                                }
                                var ref$4, i$4 = -1, n$2 = node[__REFS_LENGTH] || 0;
                                while (++i$4 < n$2) {
                                    if ((ref$4 = node[__REF + i$4]) !== void 0) {
                                        ref$4[__CONTEXT] = node[__REF + i$4] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$2 = root, head = root$2.__head, tail = root$2.__tail, next, prev;
                                    (next = node.__next) && (next != null && typeof next === 'object') && (next.__prev = prev);
                                    (prev = node.__prev) && (prev != null && typeof prev === 'object') && (prev.__next = next);
                                    node === head && (root$2.__head = root$2.__next = head = next);
                                    node === tail && (root$2.__tail = root$2.__prev = tail = prev);
                                    node.__next = node.__prev = void 0;
                                    head = tail = next = prev = void 0;
                                }
                                nodeParent[invKey] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                delete stack[offset + 0];
                                delete stack[offset + 1];
                                delete stack[offset + 2];
                                delete stack[offset + 3];
                                delete stack[offset + 4];
                                delete stack[offset + 5];
                                delete stack[offset + 6];
                                delete stack[offset + 7];
                                --depth$2;
                            }
                            nodeParent = invParent;
                            node = invChild;
                        }
                        nodeParent[key] = node = message;
                        nodeType = node && node[$TYPE] || void 0;
                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                        var node$2 = nodeParent, child = node, stack$2 = [];
                        while (node = nodeParent) {
                            nodeParent = node[__PARENT];
                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset) <= 0 && true && nodeParent) {
                                var ref$5 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$2;
                                if (ref$5 && Array.isArray(ref$5)) {
                                    destination$2 = ref$5[__CONTEXT];
                                    if (destination$2) {
                                        var i$5 = (ref$5[__REF_INDEX] || 0) - 1, n$3 = (destination$2[__REFS_LENGTH] || 0) - 1;
                                        while (++i$5 <= n$3) {
                                            destination$2[__REF + i$5] = destination$2[__REF + (i$5 + 1)];
                                        }
                                        destination$2[__REFS_LENGTH] = n$3;
                                        ref$5[__REF_INDEX] = ref$5[__CONTEXT] = destination$2 = void 0;
                                    }
                                }
                                var ref$6, i$6 = -1, n$4 = node[__REFS_LENGTH] || 0;
                                while (++i$6 < n$4) {
                                    if ((ref$6 = node[__REF + i$6]) !== void 0) {
                                        ref$6[__CONTEXT] = node[__REF + i$6] = void 0;
                                    }
                                }
                                node[__REFS_LENGTH] = void 0;
                                if (node != null && typeof node === 'object') {
                                    var root$3 = root, head$2 = root$3.__head, tail$2 = root$3.__tail, next$2, prev$2;
                                    (next$2 = node.__next) && (next$2 != null && typeof next$2 === 'object') && (next$2.__prev = prev$2);
                                    (prev$2 = node.__prev) && (prev$2 != null && typeof prev$2 === 'object') && (prev$2.__next = next$2);
                                    node === head$2 && (root$3.__head = root$3.__next = head$2 = next$2);
                                    node === tail$2 && (root$3.__tail = root$3.__prev = tail$2 = prev$2);
                                    node.__next = node.__prev = void 0;
                                    head$2 = tail$2 = next$2 = prev$2 = void 0;
                                }
                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                var depth$3 = 0, references, ref$7, i$7, k, n$5;
                                while (depth$3 > -1) {
                                    if ((references = stack$2[depth$3]) === void 0) {
                                        i$7 = k = -1;
                                        n$5 = node[__REFS_LENGTH] || 0;
                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                        node[__GENERATION] = __GENERATION_GUID++;
                                        if ((ref$7 = node[__PARENT]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                            stack$2[depth$3] = references = new Array(n$5 + 1);
                                            references[++k] = ref$7;
                                        } else if (n$5 > 0) {
                                            stack$2[depth$3] = references = new Array(n$5);
                                        }
                                        while (++i$7 < n$5) {
                                            if ((ref$7 = node[__REF + i$7]) !== void 0 && ref$7[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                references[++k] = ref$7;
                                            }
                                        }
                                    }
                                    if ((node = references && references.pop()) !== void 0) {
                                        ++depth$3;
                                    } else {
                                        stack$2[depth$3--] = void 0;
                                    }
                                }
                            }
                        }
                        nodeParent = node$2;
                        node = child;
                    }
                    node = node;
                } else {
                    nodeParent = node = nodes[depth - 1];
                    messageParent = message = messages[depth - 1];
                    depth = depth;
                    follow_path_20645:
                        do {
                            key = path[depth];
                            if (isKeySet = key != null && typeof key === 'object') {
                                if (Array.isArray(key)) {
                                    if ((key = key[key.index || (key.index = 0)]) != null && typeof key === 'object') {
                                        key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                    }
                                } else {
                                    key = key[__OFFSET] === void 0 && (key[__OFFSET] = key.from || (key.from = 0)) || key[__OFFSET];
                                }
                            }
                            if (key === __NULL) {
                                key = null;
                            }
                            depth >= boundLength && (requestedPath[requestedPath.length = depth - boundLength] = key);
                            if (key != null) {
                                if (depth < height) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    message = messageParent[key];
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    messageTimestamp = message && message[$TIMESTAMP];
                                    messageExpires = message && message[$EXPIRES];
                                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                    }
                                    node = node;
                                    message = message;
                                    merge_node_20787:
                                        do {
                                            if (node === message) {
                                                node = node;
                                                break merge_node_20787;
                                            }
                                            if (node != null) {
                                                if (message != null) {
                                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                            if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                message = message;
                                                                node = node;
                                                                nodeValue = nodeValue;
                                                                messageValue = messageValue;
                                                                replace_cache_reference_20969:
                                                                    do {
                                                                        // compare the cache and message references.
                                                                        // if they're the same, break early so we don't insert.
                                                                        // if they're different, replace the cache reference.
                                                                        var i$8 = nodeValue.length;
                                                                        // If the reference lengths are equal, we have to check their keys
                                                                        // for equality.
                                                                        // If their lengths aren't the equal, the references aren't equal.
                                                                        // Insert the reference from the message.
                                                                        if (i$8 === messageValue.length) {
                                                                            while (--i$8 > -1) {
                                                                                // If any of their keys are different, replace the reference
                                                                                // in the cache with the reference in the message.
                                                                                if (nodeValue[i$8] !== messageValue[i$8]) {
                                                                                    message = message;
                                                                                    break replace_cache_reference_20969;
                                                                                }
                                                                            }
                                                                            if (i$8 === -1) {
                                                                                message = node;
                                                                                break replace_cache_reference_20969;
                                                                            }
                                                                        }
                                                                        message = message;
                                                                        break replace_cache_reference_20969;
                                                                    } while (true);
                                                                message = message;
                                                            }
                                                        }
                                                    }
                                                    if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                        node = node;
                                                        break merge_node_20787;
                                                    }
                                                } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                    node = message = node;
                                                    break merge_node_20787;
                                                }
                                            }
                                            if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                message = message;
                                                if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                    messageType = 'array';
                                                    message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                    delete messageValue[$SIZE];
                                                    messageValue[__CONTAINER] = message;
                                                } else if (messageType === SENTINEL) {
                                                    message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                } else if (messageType === ERROR) {
                                                    message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                } else if (!(message != null && typeof message === 'object')) {
                                                    messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                    messageType = 'sentinel';
                                                    message = { 'value': messageValue };
                                                    message[$TYPE] = messageType;
                                                    message[$SIZE] = messageSize;
                                                } else {
                                                    messageType = message[$TYPE] = messageType || 'leaf';
                                                    message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                }
                                                ;
                                            }
                                            var size_offset$2 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                            if (node != null && node !== message) {
                                                var nodeRefsLength$2 = node[__REFS_LENGTH] || 0, destRefsLength$2 = message[__REFS_LENGTH] || 0, i$9 = -1, ref$8;
                                                while (++i$9 < nodeRefsLength$2) {
                                                    if ((ref$8 = node[__REF + i$9]) !== void 0) {
                                                        ref$8[__CONTEXT] = message;
                                                        message[__REF + (destRefsLength$2 + i$9)] = ref$8;
                                                        node[__REF + i$9] = void 0;
                                                    }
                                                }
                                                message[__REFS_LENGTH] = nodeRefsLength$2 + destRefsLength$2;
                                                node[__REFS_LENGTH] = ref$8 = void 0;
                                                var invParent$2 = nodeParent, invChild$2 = node, invKey$2 = key, keys$2, index$4, offset$2, childType$2, childValue$2, isBranch$2, stack$3 = [
                                                        nodeParent,
                                                        invKey$2,
                                                        node
                                                    ], depth$4 = 0;
                                                while (depth$4 > -1) {
                                                    nodeParent = stack$3[offset$2 = depth$4 * 8];
                                                    invKey$2 = stack$3[offset$2 + 1];
                                                    node = stack$3[offset$2 + 2];
                                                    if ((childType$2 = stack$3[offset$2 + 3]) === void 0 || (childType$2 = void 0)) {
                                                        childType$2 = stack$3[offset$2 + 3] = node && node[$TYPE] || void 0 || null;
                                                    }
                                                    childValue$2 = stack$3[offset$2 + 4] || (stack$3[offset$2 + 4] = childType$2 === SENTINEL ? node[VALUE] : node);
                                                    if ((isBranch$2 = stack$3[offset$2 + 5]) === void 0) {
                                                        isBranch$2 = stack$3[offset$2 + 5] = !childType$2 && (node != null && typeof node === 'object') && !Array.isArray(childValue$2);
                                                    }
                                                    if (isBranch$2 === true) {
                                                        if ((keys$2 = stack$3[offset$2 + 6]) === void 0) {
                                                            keys$2 = stack$3[offset$2 + 6] = [];
                                                            index$4 = -1;
                                                            for (invKey$2 in node) {
                                                                !(!(invKey$2[0] !== '_' || invKey$2[1] !== '_') || (invKey$2 === __SELF || invKey$2 === __PARENT || invKey$2 === __ROOT) || invKey$2[0] === '$') && (keys$2[++index$4] = invKey$2);
                                                            }
                                                        }
                                                        index$4 = stack$3[offset$2 + 7] || (stack$3[offset$2 + 7] = 0);
                                                        if (index$4 < keys$2.length) {
                                                            stack$3[offset$2 + 7] = index$4 + 1;
                                                            stack$3[offset$2 = ++depth$4 * 8] = node;
                                                            stack$3[offset$2 + 1] = invKey$2 = keys$2[index$4];
                                                            stack$3[offset$2 + 2] = node[invKey$2];
                                                            continue;
                                                        }
                                                    }
                                                    var ref$9 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$3;
                                                    if (ref$9 && Array.isArray(ref$9)) {
                                                        destination$3 = ref$9[__CONTEXT];
                                                        if (destination$3) {
                                                            var i$10 = (ref$9[__REF_INDEX] || 0) - 1, n$6 = (destination$3[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$10 <= n$6) {
                                                                destination$3[__REF + i$10] = destination$3[__REF + (i$10 + 1)];
                                                            }
                                                            destination$3[__REFS_LENGTH] = n$6;
                                                            ref$9[__REF_INDEX] = ref$9[__CONTEXT] = destination$3 = void 0;
                                                        }
                                                    }
                                                    var ref$10, i$11 = -1, n$7 = node[__REFS_LENGTH] || 0;
                                                    while (++i$11 < n$7) {
                                                        if ((ref$10 = node[__REF + i$11]) !== void 0) {
                                                            ref$10[__CONTEXT] = node[__REF + i$11] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    if (node != null && typeof node === 'object') {
                                                        var root$4 = root, head$3 = root$4.__head, tail$3 = root$4.__tail, next$3, prev$3;
                                                        (next$3 = node.__next) && (next$3 != null && typeof next$3 === 'object') && (next$3.__prev = prev$3);
                                                        (prev$3 = node.__prev) && (prev$3 != null && typeof prev$3 === 'object') && (prev$3.__next = next$3);
                                                        node === head$3 && (root$4.__head = root$4.__next = head$3 = next$3);
                                                        node === tail$3 && (root$4.__tail = root$4.__prev = tail$3 = prev$3);
                                                        node.__next = node.__prev = void 0;
                                                        head$3 = tail$3 = next$3 = prev$3 = void 0;
                                                    }
                                                    nodeParent[invKey$2] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                    delete stack$3[offset$2 + 0];
                                                    delete stack$3[offset$2 + 1];
                                                    delete stack$3[offset$2 + 2];
                                                    delete stack$3[offset$2 + 3];
                                                    delete stack$3[offset$2 + 4];
                                                    delete stack$3[offset$2 + 5];
                                                    delete stack$3[offset$2 + 6];
                                                    delete stack$3[offset$2 + 7];
                                                    --depth$4;
                                                }
                                                nodeParent = invParent$2;
                                                node = invChild$2;
                                            }
                                            nodeParent[key] = node = message;
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeTimestamp = node && node[$TIMESTAMP];
                                            nodeExpires = node && node[$EXPIRES];
                                            var node$3 = nodeParent, child$2 = node, stack$4 = [];
                                            while (node = nodeParent) {
                                                nodeParent = node[__PARENT];
                                                if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$2) <= 0 && true && nodeParent) {
                                                    var ref$11 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$4;
                                                    if (ref$11 && Array.isArray(ref$11)) {
                                                        destination$4 = ref$11[__CONTEXT];
                                                        if (destination$4) {
                                                            var i$12 = (ref$11[__REF_INDEX] || 0) - 1, n$8 = (destination$4[__REFS_LENGTH] || 0) - 1;
                                                            while (++i$12 <= n$8) {
                                                                destination$4[__REF + i$12] = destination$4[__REF + (i$12 + 1)];
                                                            }
                                                            destination$4[__REFS_LENGTH] = n$8;
                                                            ref$11[__REF_INDEX] = ref$11[__CONTEXT] = destination$4 = void 0;
                                                        }
                                                    }
                                                    var ref$12, i$13 = -1, n$9 = node[__REFS_LENGTH] || 0;
                                                    while (++i$13 < n$9) {
                                                        if ((ref$12 = node[__REF + i$13]) !== void 0) {
                                                            ref$12[__CONTEXT] = node[__REF + i$13] = void 0;
                                                        }
                                                    }
                                                    node[__REFS_LENGTH] = void 0;
                                                    if (node != null && typeof node === 'object') {
                                                        var root$5 = root, head$4 = root$5.__head, tail$4 = root$5.__tail, next$4, prev$4;
                                                        (next$4 = node.__next) && (next$4 != null && typeof next$4 === 'object') && (next$4.__prev = prev$4);
                                                        (prev$4 = node.__prev) && (prev$4 != null && typeof prev$4 === 'object') && (prev$4.__next = next$4);
                                                        node === head$4 && (root$5.__head = root$5.__next = head$4 = next$4);
                                                        node === tail$4 && (root$5.__tail = root$5.__prev = tail$4 = prev$4);
                                                        node.__next = node.__prev = void 0;
                                                        head$4 = tail$4 = next$4 = prev$4 = void 0;
                                                    }
                                                    nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                    var depth$5 = 0, references$2, ref$13, i$14, k$2, n$10;
                                                    while (depth$5 > -1) {
                                                        if ((references$2 = stack$4[depth$5]) === void 0) {
                                                            i$14 = k$2 = -1;
                                                            n$10 = node[__REFS_LENGTH] || 0;
                                                            node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                            node[__GENERATION] = __GENERATION_GUID++;
                                                            if ((ref$13 = node[__PARENT]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                stack$4[depth$5] = references$2 = new Array(n$10 + 1);
                                                                references$2[++k$2] = ref$13;
                                                            } else if (n$10 > 0) {
                                                                stack$4[depth$5] = references$2 = new Array(n$10);
                                                            }
                                                            while (++i$14 < n$10) {
                                                                if ((ref$13 = node[__REF + i$14]) !== void 0 && ref$13[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                    references$2[++k$2] = ref$13;
                                                                }
                                                            }
                                                        }
                                                        if ((node = references$2 && references$2.pop()) !== void 0) {
                                                            ++depth$5;
                                                        } else {
                                                            stack$4[depth$5--] = void 0;
                                                        }
                                                    }
                                                }
                                            }
                                            nodeParent = node$3;
                                            node = child$2;
                                            node = node;
                                            break merge_node_20787;
                                        } while (true);
                                    node = node;
                                    node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                    if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                        do {
                                            if (nodeExpires !== 1) {
                                                var root$6 = root, head$5 = root$6.__head, tail$5 = root$6.__tail, next$5 = node.__next, prev$5 = node.__prev;
                                                if (node !== head$5) {
                                                    next$5 && (next$5 != null && typeof next$5 === 'object') && (next$5.__prev = prev$5);
                                                    prev$5 && (prev$5 != null && typeof prev$5 === 'object') && (prev$5.__next = next$5);
                                                    (next$5 = head$5) && (head$5 != null && typeof head$5 === 'object') && (head$5.__prev = node);
                                                    root$6.__head = root$6.__next = head$5 = node;
                                                    head$5.__next = next$5;
                                                    head$5.__prev = void 0;
                                                }
                                                if (tail$5 == null || node === tail$5) {
                                                    root$6.__tail = root$6.__prev = tail$5 = prev$5 || node;
                                                }
                                                root$6 = head$5 = tail$5 = next$5 = prev$5 = void 0;
                                            }
                                            refs[depth] = nodeValue;
                                            refIndex = depth + 1;
                                            refDepth = 0;
                                            var key$2, isKeySet$2;
                                            reference = nodeValue;
                                            refHeight = (refLength = reference.length) - 1;
                                            nodeParent = nodeRoot;
                                            nodeType = nodeParent && nodeParent[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? nodeParent[VALUE] : nodeParent;
                                            if (nodeParent == null || nodeType !== void 0 || typeof nodeParent !== 'object' || Array.isArray(nodeValue)) {
                                                node = node = nodeParent;
                                            } else {
                                                nodeParent = nodeRoot;
                                                messageParent = messageRoot;
                                                refDepth = refDepth;
                                                follow_path_21314:
                                                    do {
                                                        key$2 = reference[refDepth];
                                                        isKeySet$2 = false;
                                                        if (key$2 != null) {
                                                            if (refDepth < refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                message = messageParent[key$2];
                                                                messageType = message && message[$TYPE] || void 0;
                                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                                messageTimestamp = message && message[$TIMESTAMP];
                                                                messageExpires = message && message[$EXPIRES];
                                                                if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                                                    message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                                                }
                                                                node = node;
                                                                message = message;
                                                                merge_node_21448:
                                                                    do {
                                                                        if (node === message) {
                                                                            node = node;
                                                                            break merge_node_21448;
                                                                        }
                                                                        if (node != null) {
                                                                            if (message != null) {
                                                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                        if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                                            message = message;
                                                                                            node = node;
                                                                                            nodeValue = nodeValue;
                                                                                            messageValue = messageValue;
                                                                                            replace_cache_reference_21629:
                                                                                                do {
                                                                                                    // compare the cache and message references.
                                                                                                    // if they're the same, break early so we don't insert.
                                                                                                    // if they're different, replace the cache reference.
                                                                                                    var i$15 = nodeValue.length;
                                                                                                    // If the reference lengths are equal, we have to check their keys
                                                                                                    // for equality.
                                                                                                    // If their lengths aren't the equal, the references aren't equal.
                                                                                                    // Insert the reference from the message.
                                                                                                    if (i$15 === messageValue.length) {
                                                                                                        while (--i$15 > -1) {
                                                                                                            // If any of their keys are different, replace the reference
                                                                                                            // in the cache with the reference in the message.
                                                                                                            if (nodeValue[i$15] !== messageValue[i$15]) {
                                                                                                                message = message;
                                                                                                                break replace_cache_reference_21629;
                                                                                                            }
                                                                                                        }
                                                                                                        if (i$15 === -1) {
                                                                                                            message = node;
                                                                                                            break replace_cache_reference_21629;
                                                                                                        }
                                                                                                    }
                                                                                                    message = message;
                                                                                                    break replace_cache_reference_21629;
                                                                                                } while (true);
                                                                                            message = message;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                                                    node = node;
                                                                                    break merge_node_21448;
                                                                                }
                                                                            } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                                                node = message = node;
                                                                                break merge_node_21448;
                                                                            }
                                                                        }
                                                                        if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                                            message = message;
                                                                            if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                messageType = 'array';
                                                                                message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                                                delete messageValue[$SIZE];
                                                                                messageValue[__CONTAINER] = message;
                                                                            } else if (messageType === SENTINEL) {
                                                                                message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                            } else if (messageType === ERROR) {
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            } else if (!(message != null && typeof message === 'object')) {
                                                                                messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                                messageType = 'sentinel';
                                                                                message = { 'value': messageValue };
                                                                                message[$TYPE] = messageType;
                                                                                message[$SIZE] = messageSize;
                                                                            } else {
                                                                                messageType = message[$TYPE] = messageType || 'leaf';
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            }
                                                                            ;
                                                                        }
                                                                        var size_offset$3 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                                                        if (node != null && node !== message) {
                                                                            var nodeRefsLength$3 = node[__REFS_LENGTH] || 0, destRefsLength$3 = message[__REFS_LENGTH] || 0, i$16 = -1, ref$14;
                                                                            while (++i$16 < nodeRefsLength$3) {
                                                                                if ((ref$14 = node[__REF + i$16]) !== void 0) {
                                                                                    ref$14[__CONTEXT] = message;
                                                                                    message[__REF + (destRefsLength$3 + i$16)] = ref$14;
                                                                                    node[__REF + i$16] = void 0;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = nodeRefsLength$3 + destRefsLength$3;
                                                                            node[__REFS_LENGTH] = ref$14 = void 0;
                                                                            var invParent$3 = nodeParent, invChild$3 = node, invKey$3 = key$2, keys$3, index$5, offset$3, childType$3, childValue$3, isBranch$3, stack$5 = [
                                                                                    nodeParent,
                                                                                    invKey$3,
                                                                                    node
                                                                                ], depth$6 = 0;
                                                                            while (depth$6 > -1) {
                                                                                nodeParent = stack$5[offset$3 = depth$6 * 8];
                                                                                invKey$3 = stack$5[offset$3 + 1];
                                                                                node = stack$5[offset$3 + 2];
                                                                                if ((childType$3 = stack$5[offset$3 + 3]) === void 0 || (childType$3 = void 0)) {
                                                                                    childType$3 = stack$5[offset$3 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$3 = stack$5[offset$3 + 4] || (stack$5[offset$3 + 4] = childType$3 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$3 = stack$5[offset$3 + 5]) === void 0) {
                                                                                    isBranch$3 = stack$5[offset$3 + 5] = !childType$3 && (node != null && typeof node === 'object') && !Array.isArray(childValue$3);
                                                                                }
                                                                                if (isBranch$3 === true) {
                                                                                    if ((keys$3 = stack$5[offset$3 + 6]) === void 0) {
                                                                                        keys$3 = stack$5[offset$3 + 6] = [];
                                                                                        index$5 = -1;
                                                                                        for (invKey$3 in node) {
                                                                                            !(!(invKey$3[0] !== '_' || invKey$3[1] !== '_') || (invKey$3 === __SELF || invKey$3 === __PARENT || invKey$3 === __ROOT) || invKey$3[0] === '$') && (keys$3[++index$5] = invKey$3);
                                                                                        }
                                                                                    }
                                                                                    index$5 = stack$5[offset$3 + 7] || (stack$5[offset$3 + 7] = 0);
                                                                                    if (index$5 < keys$3.length) {
                                                                                        stack$5[offset$3 + 7] = index$5 + 1;
                                                                                        stack$5[offset$3 = ++depth$6 * 8] = node;
                                                                                        stack$5[offset$3 + 1] = invKey$3 = keys$3[index$5];
                                                                                        stack$5[offset$3 + 2] = node[invKey$3];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$15 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$5;
                                                                                if (ref$15 && Array.isArray(ref$15)) {
                                                                                    destination$5 = ref$15[__CONTEXT];
                                                                                    if (destination$5) {
                                                                                        var i$17 = (ref$15[__REF_INDEX] || 0) - 1, n$11 = (destination$5[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$17 <= n$11) {
                                                                                            destination$5[__REF + i$17] = destination$5[__REF + (i$17 + 1)];
                                                                                        }
                                                                                        destination$5[__REFS_LENGTH] = n$11;
                                                                                        ref$15[__REF_INDEX] = ref$15[__CONTEXT] = destination$5 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$16, i$18 = -1, n$12 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$18 < n$12) {
                                                                                    if ((ref$16 = node[__REF + i$18]) !== void 0) {
                                                                                        ref$16[__CONTEXT] = node[__REF + i$18] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$7 = root, head$6 = root$7.__head, tail$6 = root$7.__tail, next$6, prev$6;
                                                                                    (next$6 = node.__next) && (next$6 != null && typeof next$6 === 'object') && (next$6.__prev = prev$6);
                                                                                    (prev$6 = node.__prev) && (prev$6 != null && typeof prev$6 === 'object') && (prev$6.__next = next$6);
                                                                                    node === head$6 && (root$7.__head = root$7.__next = head$6 = next$6);
                                                                                    node === tail$6 && (root$7.__tail = root$7.__prev = tail$6 = prev$6);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$6 = tail$6 = next$6 = prev$6 = void 0;
                                                                                }
                                                                                nodeParent[invKey$3] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$5[offset$3 + 0];
                                                                                delete stack$5[offset$3 + 1];
                                                                                delete stack$5[offset$3 + 2];
                                                                                delete stack$5[offset$3 + 3];
                                                                                delete stack$5[offset$3 + 4];
                                                                                delete stack$5[offset$3 + 5];
                                                                                delete stack$5[offset$3 + 6];
                                                                                delete stack$5[offset$3 + 7];
                                                                                --depth$6;
                                                                            }
                                                                            nodeParent = invParent$3;
                                                                            node = invChild$3;
                                                                        }
                                                                        nodeParent[key$2] = node = message;
                                                                        nodeType = node && node[$TYPE] || void 0;
                                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                                        nodeExpires = node && node[$EXPIRES];
                                                                        var node$4 = nodeParent, child$3 = node, stack$6 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$3) <= 0 && true && nodeParent) {
                                                                                var ref$17 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$6;
                                                                                if (ref$17 && Array.isArray(ref$17)) {
                                                                                    destination$6 = ref$17[__CONTEXT];
                                                                                    if (destination$6) {
                                                                                        var i$19 = (ref$17[__REF_INDEX] || 0) - 1, n$13 = (destination$6[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$19 <= n$13) {
                                                                                            destination$6[__REF + i$19] = destination$6[__REF + (i$19 + 1)];
                                                                                        }
                                                                                        destination$6[__REFS_LENGTH] = n$13;
                                                                                        ref$17[__REF_INDEX] = ref$17[__CONTEXT] = destination$6 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$18, i$20 = -1, n$14 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$20 < n$14) {
                                                                                    if ((ref$18 = node[__REF + i$20]) !== void 0) {
                                                                                        ref$18[__CONTEXT] = node[__REF + i$20] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$8 = root, head$7 = root$8.__head, tail$7 = root$8.__tail, next$7, prev$7;
                                                                                    (next$7 = node.__next) && (next$7 != null && typeof next$7 === 'object') && (next$7.__prev = prev$7);
                                                                                    (prev$7 = node.__prev) && (prev$7 != null && typeof prev$7 === 'object') && (prev$7.__next = next$7);
                                                                                    node === head$7 && (root$8.__head = root$8.__next = head$7 = next$7);
                                                                                    node === tail$7 && (root$8.__tail = root$8.__prev = tail$7 = prev$7);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$7 = tail$7 = next$7 = prev$7 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$7 = 0, references$3, ref$19, i$21, k$3, n$15;
                                                                                while (depth$7 > -1) {
                                                                                    if ((references$3 = stack$6[depth$7]) === void 0) {
                                                                                        i$21 = k$3 = -1;
                                                                                        n$15 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$19 = node[__PARENT]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$15 + 1);
                                                                                            references$3[++k$3] = ref$19;
                                                                                        } else if (n$15 > 0) {
                                                                                            stack$6[depth$7] = references$3 = new Array(n$15);
                                                                                        }
                                                                                        while (++i$21 < n$15) {
                                                                                            if ((ref$19 = node[__REF + i$21]) !== void 0 && ref$19[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$3[++k$3] = ref$19;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$3 && references$3.pop()) !== void 0) {
                                                                                        ++depth$7;
                                                                                    } else {
                                                                                        stack$6[depth$7--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$4;
                                                                        node = child$3;
                                                                        node = node;
                                                                        break merge_node_21448;
                                                                    } while (true);
                                                                node = node;
                                                                node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                                                if (appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                                                    nodeParent = node;
                                                                    break follow_path_21314;
                                                                }
                                                                nodeParent = node;
                                                                messageParent = message;
                                                                refDepth = refDepth + 1;
                                                                continue follow_path_21314;
                                                            } else if (refDepth === refHeight) {
                                                                optimizedPath[optimizedPath.length = refDepth] = key$2;
                                                                node = nodeParent[key$2];
                                                                nodeType = node && node[$TYPE] || void 0;
                                                                nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                nodeTimestamp = node && node[$TIMESTAMP];
                                                                nodeExpires = node && node[$EXPIRES];
                                                                if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                                    node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                                                }
                                                                message = messageParent[key$2];
                                                                messageType = message && message[$TYPE] || void 0;
                                                                messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                                                messageTimestamp = message && message[$TIMESTAMP];
                                                                messageExpires = message && message[$EXPIRES];
                                                                if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                                                    message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                                                }
                                                                node = node;
                                                                message = message;
                                                                merge_node_21980:
                                                                    do {
                                                                        if (node === message) {
                                                                            node = node;
                                                                            break merge_node_21980;
                                                                        }
                                                                        if (node != null) {
                                                                            if (message != null) {
                                                                                if ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue)) {
                                                                                    if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                        if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                                                                            message = message;
                                                                                            node = node;
                                                                                            nodeValue = nodeValue;
                                                                                            messageValue = messageValue;
                                                                                            replace_cache_reference_22162:
                                                                                                do {
                                                                                                    // compare the cache and message references.
                                                                                                    // if they're the same, break early so we don't insert.
                                                                                                    // if they're different, replace the cache reference.
                                                                                                    var i$22 = nodeValue.length;
                                                                                                    // If the reference lengths are equal, we have to check their keys
                                                                                                    // for equality.
                                                                                                    // If their lengths aren't the equal, the references aren't equal.
                                                                                                    // Insert the reference from the message.
                                                                                                    if (i$22 === messageValue.length) {
                                                                                                        while (--i$22 > -1) {
                                                                                                            // If any of their keys are different, replace the reference
                                                                                                            // in the cache with the reference in the message.
                                                                                                            if (nodeValue[i$22] !== messageValue[i$22]) {
                                                                                                                message = message;
                                                                                                                break replace_cache_reference_22162;
                                                                                                            }
                                                                                                        }
                                                                                                        if (i$22 === -1) {
                                                                                                            message = node;
                                                                                                            break replace_cache_reference_22162;
                                                                                                        }
                                                                                                    }
                                                                                                    message = message;
                                                                                                    break replace_cache_reference_22162;
                                                                                                } while (true);
                                                                                            message = message;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                if (node === message || !nodeType && (node != null && typeof node === 'object') && !Array.isArray(nodeValue) && (!messageType && (message != null && typeof message === 'object') && !Array.isArray(messageValue))) {
                                                                                    node = node;
                                                                                    break merge_node_21980;
                                                                                }
                                                                            } else if (!nodeType && (node != null && typeof node === 'object') || nodeType === SENTINEL && Array.isArray(nodeValue)) {
                                                                                node = message = node;
                                                                                break merge_node_21980;
                                                                            }
                                                                        }
                                                                        if (message == null || messageType !== void 0 || typeof message !== 'object' || Array.isArray(messageValue)) {
                                                                            message = message;
                                                                            if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                                                                messageType = 'array';
                                                                                message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                                                                delete messageValue[$SIZE];
                                                                                messageValue[__CONTAINER] = message;
                                                                            } else if (messageType === SENTINEL) {
                                                                                message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                            } else if (messageType === ERROR) {
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            } else if (!(message != null && typeof message === 'object')) {
                                                                                messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                                                                messageType = 'sentinel';
                                                                                message = { 'value': messageValue };
                                                                                message[$TYPE] = messageType;
                                                                                message[$SIZE] = messageSize;
                                                                            } else {
                                                                                messageType = message[$TYPE] = messageType || 'leaf';
                                                                                message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                                                            }
                                                                            ;
                                                                        }
                                                                        var size_offset$4 = (message && message[$SIZE] || 0) - (node && node[$SIZE] || 0);
                                                                        if (node != null && node !== message) {
                                                                            var nodeRefsLength$4 = node[__REFS_LENGTH] || 0, destRefsLength$4 = message[__REFS_LENGTH] || 0, i$23 = -1, ref$20;
                                                                            while (++i$23 < nodeRefsLength$4) {
                                                                                if ((ref$20 = node[__REF + i$23]) !== void 0) {
                                                                                    ref$20[__CONTEXT] = message;
                                                                                    message[__REF + (destRefsLength$4 + i$23)] = ref$20;
                                                                                    node[__REF + i$23] = void 0;
                                                                                }
                                                                            }
                                                                            message[__REFS_LENGTH] = nodeRefsLength$4 + destRefsLength$4;
                                                                            node[__REFS_LENGTH] = ref$20 = void 0;
                                                                            var invParent$4 = nodeParent, invChild$4 = node, invKey$4 = key$2, keys$4, index$6, offset$4, childType$4, childValue$4, isBranch$4, stack$7 = [
                                                                                    nodeParent,
                                                                                    invKey$4,
                                                                                    node
                                                                                ], depth$8 = 0;
                                                                            while (depth$8 > -1) {
                                                                                nodeParent = stack$7[offset$4 = depth$8 * 8];
                                                                                invKey$4 = stack$7[offset$4 + 1];
                                                                                node = stack$7[offset$4 + 2];
                                                                                if ((childType$4 = stack$7[offset$4 + 3]) === void 0 || (childType$4 = void 0)) {
                                                                                    childType$4 = stack$7[offset$4 + 3] = node && node[$TYPE] || void 0 || null;
                                                                                }
                                                                                childValue$4 = stack$7[offset$4 + 4] || (stack$7[offset$4 + 4] = childType$4 === SENTINEL ? node[VALUE] : node);
                                                                                if ((isBranch$4 = stack$7[offset$4 + 5]) === void 0) {
                                                                                    isBranch$4 = stack$7[offset$4 + 5] = !childType$4 && (node != null && typeof node === 'object') && !Array.isArray(childValue$4);
                                                                                }
                                                                                if (isBranch$4 === true) {
                                                                                    if ((keys$4 = stack$7[offset$4 + 6]) === void 0) {
                                                                                        keys$4 = stack$7[offset$4 + 6] = [];
                                                                                        index$6 = -1;
                                                                                        for (invKey$4 in node) {
                                                                                            !(!(invKey$4[0] !== '_' || invKey$4[1] !== '_') || (invKey$4 === __SELF || invKey$4 === __PARENT || invKey$4 === __ROOT) || invKey$4[0] === '$') && (keys$4[++index$6] = invKey$4);
                                                                                        }
                                                                                    }
                                                                                    index$6 = stack$7[offset$4 + 7] || (stack$7[offset$4 + 7] = 0);
                                                                                    if (index$6 < keys$4.length) {
                                                                                        stack$7[offset$4 + 7] = index$6 + 1;
                                                                                        stack$7[offset$4 = ++depth$8 * 8] = node;
                                                                                        stack$7[offset$4 + 1] = invKey$4 = keys$4[index$6];
                                                                                        stack$7[offset$4 + 2] = node[invKey$4];
                                                                                        continue;
                                                                                    }
                                                                                }
                                                                                var ref$21 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$7;
                                                                                if (ref$21 && Array.isArray(ref$21)) {
                                                                                    destination$7 = ref$21[__CONTEXT];
                                                                                    if (destination$7) {
                                                                                        var i$24 = (ref$21[__REF_INDEX] || 0) - 1, n$16 = (destination$7[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$24 <= n$16) {
                                                                                            destination$7[__REF + i$24] = destination$7[__REF + (i$24 + 1)];
                                                                                        }
                                                                                        destination$7[__REFS_LENGTH] = n$16;
                                                                                        ref$21[__REF_INDEX] = ref$21[__CONTEXT] = destination$7 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$22, i$25 = -1, n$17 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$25 < n$17) {
                                                                                    if ((ref$22 = node[__REF + i$25]) !== void 0) {
                                                                                        ref$22[__CONTEXT] = node[__REF + i$25] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$9 = root, head$8 = root$9.__head, tail$8 = root$9.__tail, next$8, prev$8;
                                                                                    (next$8 = node.__next) && (next$8 != null && typeof next$8 === 'object') && (next$8.__prev = prev$8);
                                                                                    (prev$8 = node.__prev) && (prev$8 != null && typeof prev$8 === 'object') && (prev$8.__next = next$8);
                                                                                    node === head$8 && (root$9.__head = root$9.__next = head$8 = next$8);
                                                                                    node === tail$8 && (root$9.__tail = root$9.__prev = tail$8 = prev$8);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$8 = tail$8 = next$8 = prev$8 = void 0;
                                                                                }
                                                                                nodeParent[invKey$4] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                                delete stack$7[offset$4 + 0];
                                                                                delete stack$7[offset$4 + 1];
                                                                                delete stack$7[offset$4 + 2];
                                                                                delete stack$7[offset$4 + 3];
                                                                                delete stack$7[offset$4 + 4];
                                                                                delete stack$7[offset$4 + 5];
                                                                                delete stack$7[offset$4 + 6];
                                                                                delete stack$7[offset$4 + 7];
                                                                                --depth$8;
                                                                            }
                                                                            nodeParent = invParent$4;
                                                                            node = invChild$4;
                                                                        }
                                                                        nodeParent[key$2] = node = message;
                                                                        nodeType = node && node[$TYPE] || void 0;
                                                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                                                        nodeTimestamp = node && node[$TIMESTAMP];
                                                                        nodeExpires = node && node[$EXPIRES];
                                                                        var node$5 = nodeParent, child$4 = node, stack$8 = [];
                                                                        while (node = nodeParent) {
                                                                            nodeParent = node[__PARENT];
                                                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$4) <= 0 && true && nodeParent) {
                                                                                var ref$23 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$8;
                                                                                if (ref$23 && Array.isArray(ref$23)) {
                                                                                    destination$8 = ref$23[__CONTEXT];
                                                                                    if (destination$8) {
                                                                                        var i$26 = (ref$23[__REF_INDEX] || 0) - 1, n$18 = (destination$8[__REFS_LENGTH] || 0) - 1;
                                                                                        while (++i$26 <= n$18) {
                                                                                            destination$8[__REF + i$26] = destination$8[__REF + (i$26 + 1)];
                                                                                        }
                                                                                        destination$8[__REFS_LENGTH] = n$18;
                                                                                        ref$23[__REF_INDEX] = ref$23[__CONTEXT] = destination$8 = void 0;
                                                                                    }
                                                                                }
                                                                                var ref$24, i$27 = -1, n$19 = node[__REFS_LENGTH] || 0;
                                                                                while (++i$27 < n$19) {
                                                                                    if ((ref$24 = node[__REF + i$27]) !== void 0) {
                                                                                        ref$24[__CONTEXT] = node[__REF + i$27] = void 0;
                                                                                    }
                                                                                }
                                                                                node[__REFS_LENGTH] = void 0;
                                                                                if (node != null && typeof node === 'object') {
                                                                                    var root$10 = root, head$9 = root$10.__head, tail$9 = root$10.__tail, next$9, prev$9;
                                                                                    (next$9 = node.__next) && (next$9 != null && typeof next$9 === 'object') && (next$9.__prev = prev$9);
                                                                                    (prev$9 = node.__prev) && (prev$9 != null && typeof prev$9 === 'object') && (prev$9.__next = next$9);
                                                                                    node === head$9 && (root$10.__head = root$10.__next = head$9 = next$9);
                                                                                    node === tail$9 && (root$10.__tail = root$10.__prev = tail$9 = prev$9);
                                                                                    node.__next = node.__prev = void 0;
                                                                                    head$9 = tail$9 = next$9 = prev$9 = void 0;
                                                                                }
                                                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                var depth$9 = 0, references$4, ref$25, i$28, k$4, n$20;
                                                                                while (depth$9 > -1) {
                                                                                    if ((references$4 = stack$8[depth$9]) === void 0) {
                                                                                        i$28 = k$4 = -1;
                                                                                        n$20 = node[__REFS_LENGTH] || 0;
                                                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                                                        if ((ref$25 = node[__PARENT]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$20 + 1);
                                                                                            references$4[++k$4] = ref$25;
                                                                                        } else if (n$20 > 0) {
                                                                                            stack$8[depth$9] = references$4 = new Array(n$20);
                                                                                        }
                                                                                        while (++i$28 < n$20) {
                                                                                            if ((ref$25 = node[__REF + i$28]) !== void 0 && ref$25[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                                                references$4[++k$4] = ref$25;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    if ((node = references$4 && references$4.pop()) !== void 0) {
                                                                                        ++depth$9;
                                                                                    } else {
                                                                                        stack$8[depth$9--] = void 0;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        nodeParent = node$5;
                                                                        node = child$4;
                                                                        node = node;
                                                                        break merge_node_21980;
                                                                    } while (true);
                                                                node = node;
                                                                node != null && (node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key$2) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node);
                                                                if (node != null) {
                                                                    var refContainer = reference[__CONTAINER] || reference, refContext = refContainer[__CONTEXT];
                                                                    // Set up the hard-link so we don't have to do all
                                                                    // this work the next time we follow this reference.
                                                                    if (refContext === void 0) {
                                                                        // create a back reference
                                                                        var backRefs = node[__REFS_LENGTH] || 0;
                                                                        node[__REF + backRefs] = refContainer;
                                                                        node[__REFS_LENGTH] = backRefs + 1;
                                                                        // create a hard reference
                                                                        refContainer[__REF_INDEX] = backRefs;
                                                                        refContainer[__CONTEXT] = node;
                                                                        refContainer = backRefs = void 0;
                                                                    }
                                                                    ;
                                                                }
                                                                appendNullKey = node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue);
                                                                nodeParent = node;
                                                                break follow_path_21314;
                                                            }
                                                        } else if (refDepth < refHeight) {
                                                            nodeParent = node;
                                                            messageParent = message;
                                                            refDepth = refDepth + 1;
                                                            continue follow_path_21314;
                                                        }
                                                        nodeParent = node;
                                                        break follow_path_21314;
                                                    } while (true);
                                                node = nodeParent;
                                            }
                                            nodeType = node && node[$TYPE] || void 0;
                                            nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                            nodeExpires = node && node[$EXPIRES];
                                            if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                                node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                            }
                                        } while ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue));
                                        if (node == null) {
                                            while (refDepth <= refHeight) {
                                                optimizedPath[refDepth] = reference[refDepth++];
                                            }
                                        }
                                    }
                                    if (node == null || nodeType !== void 0 || typeof node !== 'object' || Array.isArray(nodeValue)) {
                                        nodeParent = node;
                                        break follow_path_20645;
                                    }
                                    nodeParent = nodes[depth] = node;
                                    messageParent = messages[depth] = message;
                                    depth = depth + 1;
                                    continue follow_path_20645;
                                } else if (depth === height) {
                                    optimizedPath[optimizedPath.length = depth + (refLength - refIndex)] = key;
                                    node = nodeParent[key];
                                    nodeType = node && node[$TYPE] || void 0;
                                    nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                    nodeTimestamp = node && node[$TIMESTAMP];
                                    nodeExpires = node && node[$EXPIRES];
                                    if (node != null && typeof node === 'object' && (nodeExpires != null && nodeExpires !== 1 && (nodeExpires === 0 || nodeExpires < Date.now()) || node[__INVALIDATED] === true)) {
                                        node = nodeValue = (expired[expired.length] = node) && (node[__INVALIDATED] = true) && void 0;
                                    }
                                    message = messageParent[key];
                                    messageType = message && message[$TYPE] || void 0;
                                    messageValue = messageType === SENTINEL ? message[VALUE] : message;
                                    messageTimestamp = message && message[$TIMESTAMP];
                                    messageExpires = message && message[$EXPIRES];
                                    if (message != null && typeof message === 'object' && (messageExpires != null && messageExpires !== 1 && (messageExpires === 0 || messageExpires < Date.now()) || message[__INVALIDATED] === true)) {
                                        message = messageValue = (expired[expired.length] = message) && (message[__INVALIDATED] = true) && void 0;
                                    }
                                    if ((messageTimestamp < nodeTimestamp || messageExpires === 0 && ((node = message) || true)) === false) {
                                        messageValue = messageType === SENTINEL ? message[VALUE] : messageType === ERROR ? message = errorSelector(requestedPath, message) : message;
                                        message = message;
                                        if ((!messageType || messageType === SENTINEL) && Array.isArray(messageValue)) {
                                            messageType = 'array';
                                            message[$SIZE] = messageSize = (messageType === SENTINEL && 50 || 0) + (messageValue.length || 1);
                                            delete messageValue[$SIZE];
                                            messageValue[__CONTAINER] = message;
                                        } else if (messageType === SENTINEL) {
                                            message[$SIZE] = messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                        } else if (messageType === ERROR) {
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        } else if (!(message != null && typeof message === 'object')) {
                                            messageSize = 50 + (typeof messageValue === 'string' && messageValue.length || 1);
                                            messageType = 'sentinel';
                                            message = { 'value': messageValue };
                                            message[$TYPE] = messageType;
                                            message[$SIZE] = messageSize;
                                        } else {
                                            messageType = message[$TYPE] = messageType || 'leaf';
                                            message[$SIZE] = messageSize = message && message[$SIZE] || 0 || 50 + 1;
                                        }
                                        ;
                                        var size_offset$5 = messageSize - (node && node[$SIZE] || 0);
                                        if (node != null && node !== message) {
                                            var nodeRefsLength$5 = node[__REFS_LENGTH] || 0, destRefsLength$5 = message[__REFS_LENGTH] || 0, i$29 = -1, ref$26;
                                            while (++i$29 < nodeRefsLength$5) {
                                                if ((ref$26 = node[__REF + i$29]) !== void 0) {
                                                    ref$26[__CONTEXT] = message;
                                                    message[__REF + (destRefsLength$5 + i$29)] = ref$26;
                                                    node[__REF + i$29] = void 0;
                                                }
                                            }
                                            message[__REFS_LENGTH] = nodeRefsLength$5 + destRefsLength$5;
                                            node[__REFS_LENGTH] = ref$26 = void 0;
                                            var invParent$5 = nodeParent, invChild$5 = node, invKey$5 = key, keys$5, index$7, offset$5, childType$5, childValue$5, isBranch$5, stack$9 = [
                                                    nodeParent,
                                                    invKey$5,
                                                    node
                                                ], depth$10 = 0;
                                            while (depth$10 > -1) {
                                                nodeParent = stack$9[offset$5 = depth$10 * 8];
                                                invKey$5 = stack$9[offset$5 + 1];
                                                node = stack$9[offset$5 + 2];
                                                if ((childType$5 = stack$9[offset$5 + 3]) === void 0 || (childType$5 = void 0)) {
                                                    childType$5 = stack$9[offset$5 + 3] = node && node[$TYPE] || void 0 || null;
                                                }
                                                childValue$5 = stack$9[offset$5 + 4] || (stack$9[offset$5 + 4] = childType$5 === SENTINEL ? node[VALUE] : node);
                                                if ((isBranch$5 = stack$9[offset$5 + 5]) === void 0) {
                                                    isBranch$5 = stack$9[offset$5 + 5] = !childType$5 && (node != null && typeof node === 'object') && !Array.isArray(childValue$5);
                                                }
                                                if (isBranch$5 === true) {
                                                    if ((keys$5 = stack$9[offset$5 + 6]) === void 0) {
                                                        keys$5 = stack$9[offset$5 + 6] = [];
                                                        index$7 = -1;
                                                        for (invKey$5 in node) {
                                                            !(!(invKey$5[0] !== '_' || invKey$5[1] !== '_') || (invKey$5 === __SELF || invKey$5 === __PARENT || invKey$5 === __ROOT) || invKey$5[0] === '$') && (keys$5[++index$7] = invKey$5);
                                                        }
                                                    }
                                                    index$7 = stack$9[offset$5 + 7] || (stack$9[offset$5 + 7] = 0);
                                                    if (index$7 < keys$5.length) {
                                                        stack$9[offset$5 + 7] = index$7 + 1;
                                                        stack$9[offset$5 = ++depth$10 * 8] = node;
                                                        stack$9[offset$5 + 1] = invKey$5 = keys$5[index$7];
                                                        stack$9[offset$5 + 2] = node[invKey$5];
                                                        continue;
                                                    }
                                                }
                                                var ref$27 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$9;
                                                if (ref$27 && Array.isArray(ref$27)) {
                                                    destination$9 = ref$27[__CONTEXT];
                                                    if (destination$9) {
                                                        var i$30 = (ref$27[__REF_INDEX] || 0) - 1, n$21 = (destination$9[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$30 <= n$21) {
                                                            destination$9[__REF + i$30] = destination$9[__REF + (i$30 + 1)];
                                                        }
                                                        destination$9[__REFS_LENGTH] = n$21;
                                                        ref$27[__REF_INDEX] = ref$27[__CONTEXT] = destination$9 = void 0;
                                                    }
                                                }
                                                var ref$28, i$31 = -1, n$22 = node[__REFS_LENGTH] || 0;
                                                while (++i$31 < n$22) {
                                                    if ((ref$28 = node[__REF + i$31]) !== void 0) {
                                                        ref$28[__CONTEXT] = node[__REF + i$31] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$11 = root, head$10 = root$11.__head, tail$10 = root$11.__tail, next$10, prev$10;
                                                    (next$10 = node.__next) && (next$10 != null && typeof next$10 === 'object') && (next$10.__prev = prev$10);
                                                    (prev$10 = node.__prev) && (prev$10 != null && typeof prev$10 === 'object') && (prev$10.__next = next$10);
                                                    node === head$10 && (root$11.__head = root$11.__next = head$10 = next$10);
                                                    node === tail$10 && (root$11.__tail = root$11.__prev = tail$10 = prev$10);
                                                    node.__next = node.__prev = void 0;
                                                    head$10 = tail$10 = next$10 = prev$10 = void 0;
                                                }
                                                nodeParent[invKey$5] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                                delete stack$9[offset$5 + 0];
                                                delete stack$9[offset$5 + 1];
                                                delete stack$9[offset$5 + 2];
                                                delete stack$9[offset$5 + 3];
                                                delete stack$9[offset$5 + 4];
                                                delete stack$9[offset$5 + 5];
                                                delete stack$9[offset$5 + 6];
                                                delete stack$9[offset$5 + 7];
                                                --depth$10;
                                            }
                                            nodeParent = invParent$5;
                                            node = invChild$5;
                                        }
                                        nodeParent[key] = node = message;
                                        nodeType = node && node[$TYPE] || void 0;
                                        nodeValue = nodeType === SENTINEL ? node[VALUE] : node;
                                        node = !node[__SELF] && ((node[__SELF] = node) || true) && ((node[__KEY] = key) || true) && ((node[__PARENT] = nodeParent) || true) && ((node[__ROOT] = nodeRoot) || true) && (node[__GENERATION] || (node[__GENERATION] = 0) || node) && ((!nodeType || nodeType === SENTINEL) && Array.isArray(nodeValue) && (nodeValue[__CONTAINER] = node)) || node;
                                        var node$6 = nodeParent, child$5 = node, stack$10 = [];
                                        while (node = nodeParent) {
                                            nodeParent = node[__PARENT];
                                            if ((node[$SIZE] = (node[$SIZE] || 0) - size_offset$5) <= 0 && true && nodeParent) {
                                                var ref$29 = node[$TYPE] === SENTINEL ? node[VALUE] : node, destination$10;
                                                if (ref$29 && Array.isArray(ref$29)) {
                                                    destination$10 = ref$29[__CONTEXT];
                                                    if (destination$10) {
                                                        var i$32 = (ref$29[__REF_INDEX] || 0) - 1, n$23 = (destination$10[__REFS_LENGTH] || 0) - 1;
                                                        while (++i$32 <= n$23) {
                                                            destination$10[__REF + i$32] = destination$10[__REF + (i$32 + 1)];
                                                        }
                                                        destination$10[__REFS_LENGTH] = n$23;
                                                        ref$29[__REF_INDEX] = ref$29[__CONTEXT] = destination$10 = void 0;
                                                    }
                                                }
                                                var ref$30, i$33 = -1, n$24 = node[__REFS_LENGTH] || 0;
                                                while (++i$33 < n$24) {
                                                    if ((ref$30 = node[__REF + i$33]) !== void 0) {
                                                        ref$30[__CONTEXT] = node[__REF + i$33] = void 0;
                                                    }
                                                }
                                                node[__REFS_LENGTH] = void 0;
                                                if (node != null && typeof node === 'object') {
                                                    var root$12 = root, head$11 = root$12.__head, tail$11 = root$12.__tail, next$11, prev$11;
                                                    (next$11 = node.__next) && (next$11 != null && typeof next$11 === 'object') && (next$11.__prev = prev$11);
                                                    (prev$11 = node.__prev) && (prev$11 != null && typeof prev$11 === 'object') && (prev$11.__next = next$11);
                                                    node === head$11 && (root$12.__head = root$12.__next = head$11 = next$11);
                                                    node === tail$11 && (root$12.__tail = root$12.__prev = tail$11 = prev$11);
                                                    node.__next = node.__prev = void 0;
                                                    head$11 = tail$11 = next$11 = prev$11 = void 0;
                                                }
                                                nodeParent[node[__KEY]] = node[__SELF] = node[__PARENT] = node[__ROOT] = void 0;
                                            } else if (node[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                var depth$11 = 0, references$5, ref$31, i$34, k$5, n$25;
                                                while (depth$11 > -1) {
                                                    if ((references$5 = stack$10[depth$11]) === void 0) {
                                                        i$34 = k$5 = -1;
                                                        n$25 = node[__REFS_LENGTH] || 0;
                                                        node[__GENERATION_UPDATED] = __GENERATION_VERSION;
                                                        node[__GENERATION] = __GENERATION_GUID++;
                                                        if ((ref$31 = node[__PARENT]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                            stack$10[depth$11] = references$5 = new Array(n$25 + 1);
                                                            references$5[++k$5] = ref$31;
                                                        } else if (n$25 > 0) {
                                                            stack$10[depth$11] = references$5 = new Array(n$25);
                                                        }
                                                        while (++i$34 < n$25) {
                                                            if ((ref$31 = node[__REF + i$34]) !== void 0 && ref$31[__GENERATION_UPDATED] !== __GENERATION_VERSION) {
                                                                references$5[++k$5] = ref$31;
                                                            }
                                                        }
                                                    }
                                                    if ((node = references$5 && references$5.pop()) !== void 0) {
                                                        ++depth$11;
                                                    } else {
                                                        stack$10[depth$11--] = void 0;
                                                    }
                                                }
                                            }
                                        }
                                        nodeParent = node$6;
                                        node = child$5;
                                    }
                                    appendNullKey = false;
                                    nodeParent = node;
                                    break follow_path_20645;
                                }
                            } else if (depth < height) {
                                nodeParent = nodeParent;
                                messageParent = messageParent;
                                depth = depth + 1;
                                continue follow_path_20645;
                            }
                            nodeParent = node;
                            break follow_path_20645;
                        } while (true);
                    node = nodeParent;
                }
                if (node != null || boxed === true) {
                    if (nodeType === ERROR) {
                        if (nodeExpires !== 1) {
                            var root$13 = root, head$12 = root$13.__head, tail$12 = root$13.__tail, next$12 = node.__next, prev$12 = node.__prev;
                            if (node !== head$12) {
                                next$12 && (next$12 != null && typeof next$12 === 'object') && (next$12.__prev = prev$12);
                                prev$12 && (prev$12 != null && typeof prev$12 === 'object') && (prev$12.__next = next$12);
                                (next$12 = head$12) && (head$12 != null && typeof head$12 === 'object') && (head$12.__prev = node);
                                root$13.__head = root$13.__next = head$12 = node;
                                head$12.__next = next$12;
                                head$12.__prev = void 0;
                            }
                            if (tail$12 == null || node === tail$12) {
                                root$13.__tail = root$13.__prev = tail$12 = prev$12 || node;
                            }
                            root$13 = head$12 = tail$12 = next$12 = prev$12 = void 0;
                        }
                        var nodeType$2 = node && node[$TYPE] || void 0;
                        nodeValue = nodeType$2 === SENTINEL ? node[VALUE] : nodeType$2 === ERROR ? node = errorSelector(requestedPath, node) : node;
                        var pbv = Object.create(null);
                        var src = requestedPath, i$35 = -1, n$26 = src.length, req = new Array(n$26);
                        while (++i$35 < n$26) {
                            req[i$35] = src[i$35];
                        }
                        if (appendNullKey === true) {
                            req[req.length] = null;
                        }
                        pbv.path = req;
                        if (boxed === true) {
                            pbv.value = node;
                        } else {
                            var dest = nodeValue, src$2 = dest, x;
                            if (dest != null && typeof dest === 'object') {
                                dest = Array.isArray(src$2) && [] || Object.create(null);
                                for (x in src$2) {
                                    !(!(x[0] !== '_' || x[1] !== '_') || (x === __SELF || x === __PARENT || x === __ROOT) || x[0] === '$') && (dest[x] = src$2[x]);
                                }
                            }
                            pbv.value = dest;
                        }
                        errors[errors.length] = pbv;
                    }
                    var src$3 = optimizedPath, i$36 = -1, n$27 = src$3.length, opt = new Array(n$27);
                    while (++i$36 < n$27) {
                        opt[i$36] = src$3[i$36];
                    }
                    var src$4 = requestedPath, i$37 = -1, n$28 = src$4.length, req$2 = new Array(n$28);
                    while (++i$37 < n$28) {
                        req$2[i$37] = src$4[i$37];
                    }
                    if (appendNullKey === true) {
                        req$2[req$2.length] = null;
                    }
                    requestedPaths[requestedPaths.length] = req$2;
                    optimizedPaths[optimizedPaths.length] = opt;
                    if (values != null) {
                        var pbv$2 = Object.create(null);
                        var src$5 = requestedPath, i$38 = -1, n$29 = src$5.length, req$3 = new Array(n$29);
                        while (++i$38 < n$29) {
                            req$3[i$38] = src$5[i$38];
                        }
                        if (appendNullKey === true) {
                            req$3[req$3.length] = null;
                        }
                        pbv$2.path = req$3;
                        if (boxed === true) {
                            pbv$2.value = node;
                        } else {
                            var dest$2 = nodeValue, src$6 = dest$2, x$2;
                            if (dest$2 != null && typeof dest$2 === 'object') {
                                dest$2 = Array.isArray(src$6) && [] || Object.create(null);
                                for (x$2 in src$6) {
                                    !(!(x$2[0] !== '_' || x$2[1] !== '_') || (x$2 === __SELF || x$2 === __PARENT || x$2 === __ROOT) || x$2[0] === '$') && (dest$2[x$2] = src$6[x$2]);
                                }
                            }
                            pbv$2.value = dest$2;
                        }
                        typeof values === 'function' && (values(pbv$2) || true) || Array.isArray(values) && (values[values.length] = pbv$2);
                    }
                }
                if (boxed === false && node == null || refreshing === true) {
                    var src$7 = boundPath, i$39 = -1, n$30 = src$7.length, req$4 = new Array(n$30);
                    while (++i$39 < n$30) {
                        req$4[i$39] = src$7[i$39];
                    }
                    var src$8 = optimizedPath, i$40 = -1, n$31 = src$8.length, opt$2 = new Array(n$31);
                    while (++i$40 < n$31) {
                        opt$2[i$40] = src$8[i$40];
                    }
                    var reqLen = req$4.length - 1, optLen = opt$2.length - 1, i$41 = -1, n$32 = requestedPath.length, j$2 = depth, k$6 = height, x$3;
                    while (++i$41 < n$32) {
                        req$4[++reqLen] = path[i$41 + boundLength] != null && typeof path[i$41 + boundLength] === 'object' && [requestedPath[i$41]] || requestedPath[i$41];
                    }
                    i$41 = -1;
                    n$32 = height - depth;
                    while (++i$41 < n$32) {
                        x$3 = req$4[++reqLen] = path[++j$2 + boundLength];
                        x$3 != null && (opt$2[++optLen] = x$3);
                    }
                    req$4.pathSetIndex = index$2;
                    requestedMissingPaths[requestedMissingPaths.length] = req$4;
                    optimizedMissingPaths[optimizedMissingPaths.length] = opt$2;
                }
                appendNullKey = false;
                var key$3;
                depth = depth;
                unroll_20277:
                    do {
                        if (depth < 0) {
                            depth = (path.depth = 0) - 1;
                            break unroll_20277;
                        }
                        if (!((key$3 = path[depth]) != null && typeof key$3 === 'object')) {
                            depth = path.depth = depth - 1;
                            continue unroll_20277;
                        }
                        if (Array.isArray(key$3)) {
                            if (++key$3.index === key$3.length) {
                                if (!((key$3 = key$3[key$3.index = 0]) != null && typeof key$3 === 'object')) {
                                    depth = path.depth = depth - 1;
                                    continue unroll_20277;
                                }
                            } else {
                                depth = path.depth = depth;
                                break unroll_20277;
                            }
                        }
                        if (++key$3[__OFFSET] > (key$3.to || (key$3.to = key$3.from + (key$3.length || 1) - 1))) {
                            key$3[__OFFSET] = key$3.from;
                            depth = path.depth = depth - 1;
                            continue unroll_20277;
                        }
                        depth = path.depth = depth;
                        break unroll_20277;
                    } while (true);
                depth = depth;
            }
        }
    }
    return {
        'values': values,
        'errors': errors,
        'requestedPaths': requestedPaths,
        'optimizedPaths': optimizedPaths,
        'requestedMissingPaths': requestedMissingPaths,
        'optimizedMissingPaths': optimizedMissingPaths
    };
}
module.exports = falcor;