<?js
    (function (self) {
        var classDocs = self.find({kind: 'class'})
        var keys = _.keys(classDocs[1])
        var getSubDocs = function (classDoc, docType) {
          var result = self.find({kind: docType, memberof: classDoc.longname})
          return result || [];
        }
        var typeDocs = self.find({kind: 'typedef', memberof: {isUndefined: true}})
        // So far I haven't encountered any pages with more than one doc in the doclist, but
        // based on the original template I'm guessing it's possible
        var currentDoc = _.first(docs);
    
        // escapes weird characters that jsdoc puts in ids but jquery chokes on
        var escapeDocId = function (docId) {
          return docId.replace(/(:|\.|\[|\]|,|~)/g, '\\$1');
        };
        // Returns a link just like linkto, but with an id to its target header on
        // the page added so bootstrap scrollspy can pick it up use it to work.
        // Also sanitizes the input because jsdoc uses all sorts of weird characters
        // in their ids. Optionally, link text can be passed in to use instead of
        // the doc's name inside the link.
        var linkToWithTarget = function (doc, linkText) {
          var linkTag = self.linkto(doc.longname, linkText || doc.name);
          return linkTag.slice(0, linkTag.indexOf('>')) + ' data-target="#' +
            escapeDocId(doc.id) + '"' + linkTag.slice(linkTag.indexOf('>'));
        };
        ?>

        <?js if (docs && docs.length > 0) { ?>
        <!--
          In case someone comes along later and sees the active item on the
          toc acting weirdly, hopefully they'll see this comment. This page, unlike
          any seen during development, has multiple 'docs' passed to container.tmpl.
          To debug it and enhance the page as needed, I would suggest looking there first.
        -->
        <?js } ?>

        <!-- Generate the table of contents -->
        <nav class="table-of-contents api-doc-toc">
            <ul class="nav">
                <li>
                    <?js= self.linkto(_.first(classDocs).longname, 'Classes') ?>
                    <ul class="toc-api-classes">
                        <?js _.each(classDocs, function (classDoc) { ?>
                            <li class="toc-api-class <?js= currentDoc.longname === classDoc.longname ? 'current-page' : '' ?>">
                                <?js= linkToWithTarget(classDoc) ?>
                                <?js 
                                    var methodDocs = getSubDocs(classDoc, 'function');
                                    var typeDocs = getSubDocs(classDoc, 'typedef');
                                    var eventDocs = getSubDocs(classDoc, 'event');
                                    // for now just combine them
                                    var subDocs = methodDocs.concat(eventDocs, typeDocs);
                                ?>
                                <?js if (subDocs.length) { ?>
                                    <ul class="toc-api-methods">
                                        <?js _.each(subDocs, function (subDoc) { ?>
                                            <li class="toc-api-method">
                                                <?js= linkToWithTarget(subDoc) ?>
                                            </li>
                                        <?js }) ?> 
                                    </ul>
                                <?js } ?>
                            </li>
                        <?js }) ?>
                    </ul>
                </li>
                <li class="toc-api-type-list <?js= currentDoc.kind === 'globalobj' ? 'current-page' : '' ?>">
                    <span class="toc-api-section-title">
                        <?js= self.linkto('global', 'Types') ?>
                    </span>
                    <ul class="toc-api-types">
                        <?js _.each(typeDocs, function (typeDoc) { ?>
                            <li class="toc-api-type">
                                <?js= linkToWithTarget(typeDoc) ?>
                            </li>
                        <?js }) ?>
                    </ul>
                </li>
            </ul>
        </nav>

<?js }(this)) ?>
