.toc-page {
  @toc-width-lg: 32%;
  @toc-width-md: 32%;
  @toc-width-sm: 37%;

  .table-of-contents {
    @content-toc-gap: 40px;
    position: absolute;    
    right: 0;
    top: 0;
    padding-left: @content-toc-gap;
    
    & > .nav {
      position: fixed;
      will-change: transform;
      padding: 35px 20px;
      background-color: lighten(#26B2E7, 40%);
      // alternate base background colors to try #26B2E7, #B987BB, #8BBE2D

      // Since the TOC is position: fixed, it must be manually sized
      @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
        width: 277px - @content-toc-gap;
        padding: 25px 15px;
      }
      @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
        width: 291px - @content-toc-gap;
      }
      @media (min-width: @screen-lg-min) {
        width: 292px - @content-toc-gap;
      }
    }
    
    @media (max-width: @screen-xs-max) {
      display: none;
    }
    @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
      width: @toc-width-sm;
    }
    @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
      width: @toc-width-md;
    }
    @media (min-width: @screen-lg-min) {
      width: @toc-width-lg;
    }
    
    // List styling
    list-style: none;
    & ul, & li {
      padding-left: 5px;
      list-style: none;
    }
    
    & a {
      color: black;
    }

    // ScrollSpy-added class for the current item path
    & > .nav .active > a {
      font-weight: bold;
    }
    
    // These selectors are messier than I'd like, because there's no
    // way to get full control of the html generated by kramdown's
    // TOC generator
    .nav > li > a {
      font-weight: 400;
      padding: 0;
      
      &:hover {
        text-decoration: underline;
      }
    }
    .nav li > a:hover {
      background-color: transparent;
    }
    & > ul > li > a, & ul > li > .toc-api-section-title {
      display: block;
      margin-top: 15px;
      margin-bottom: 5px;
      font-size: 16px;
    }
    & > ul > li.active > a, & > ul > li.active > .toc-api-section-title {
      font-weight: bold;
    }
    & > ul > li:first-child > a, & > ul > li:first-child > .toc-api-section-title {
      margin-top: 0;
    }
    & > ul > li > ul > li > a {
      font-weight: 400;
    }
    // end hack
  }
  @media (max-width: @screen-sm-max) {
    padding-right: 0;
  }
  @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
    padding-right: @toc-width-sm;
  }
  @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
    padding-right: @toc-width-md;
  }
  @media (min-width: @screen-lg-min) {
    padding-right: @toc-width-lg;
  }
  
  /* Since we can't touch the html the TOC command generates, it looks mediocre
   until the page is ready and jquery can move it to its proper place. Until then,
   the not-ready class lets us hide it so the page doesn't jump suddenly.
  */
  &.not-ready #markdown-toc {
    display: none;
  }
  // Small hack so the anchors will align with the top of the content area
  // rather than the top of the page. Please read that page for limitations
  // of the method (this is method #2) before modifying header styles.
  // See http://nicolasgallagher.com/jump-links-and-viewport-positioning/
  // Additionally modified to set manual z index stacking order so code snippets
  // never fall behind a subsequent header and lose clickable area
  // pre {
  //   position: relative;
  //   z-index: 2;
  // }
  h1, h2, h3, h4 {
    position: relative;
    border-top: (@navbar-height + @site-content-padding-top) solid transparent;
    // subtract the height of the border, then re-add bootstrap's standard margin
    // so the style appears the same as before the hack
    margin-top: -1 * (@navbar-height + @site-content-padding-top) + @line-height-computed;
    background-clip: padding-box;
    z-index: -1;
  }
  h4 {
    margin-top: -1 * (@navbar-height + @site-content-padding-top) + @line-height-computed / 2;
  }
  
  
}
